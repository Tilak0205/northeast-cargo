[{"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\Header.tsx":"1","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\App.tsx":"2","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\index.tsx":"3","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\SnakAlert.tsx":"4","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\Footer.tsx":"5","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\Login.tsx":"6","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\services\\client.ts":"7","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\services\\util.ts":"8","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\HandlerDropdown.tsx":"9","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\Routes.tsx":"10","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\TimerRefresher.tsx":"11","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\ProcessCreator.tsx":"12","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\MachineDropdown.tsx":"13","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\reportWebVitals.ts":"14","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\graphs\\TimeAreaGraph.tsx":"15","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\HandlerCreator.tsx":"16","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\ConfirmationDialog.tsx":"17","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\index.tsx":"18","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\Filter.tsx":"19","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\Listing.tsx":"20","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\DialogMachineTagName.tsx":"21","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\handlers\\Listing.tsx":"22","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\handlers\\index.tsx":"23","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\processes\\Filter.tsx":"24","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\processes\\Listing.tsx":"25","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\processes\\index.tsx":"26","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\queues\\index.tsx":"27","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\queues\\Listing.tsx":"28","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\queues\\Filter.tsx":"29","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\index.tsx":"30","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\reportWebVitals.ts":"31","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\App.tsx":"32","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\Routes.tsx":"33","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\SnakAlert.tsx":"34","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\Header.tsx":"35","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\Footer.tsx":"36","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\ConfirmationDialog.tsx":"37","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Login.tsx":"38","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\services\\client.ts":"39","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\services\\util.ts":"40","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\ResetPassword.tsx":"41","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Registration.tsx":"42","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Users.tsx":"43","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Products.tsx":"44","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\StepperInput.tsx":"45","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\AdminDashboard.tsx":"46","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\MySubscription.tsx":"47","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\ComplianceSearch.tsx":"48","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\MyAccount.tsx":"49","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\WithClearCache.tsx":"50","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\AppInitializer.tsx":"51","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\store\\index.ts":"52","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\store\\actions.js":"53","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\store\\actionTypes.js":"54","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Activate.tsx":"55","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\ChangePassword.tsx":"56","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\AlertMessage.tsx":"57","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\index.tsx":"58","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\Listing.tsx":"59","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\Filter.tsx":"60","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\form.tsx":"61","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\index.tsx":"62","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\Listing.tsx":"63","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\Filter.tsx":"64","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\form.tsx":"65","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\vendors\\index.tsx":"66","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\vendors\\Listing.tsx":"67","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\PaypalCheckoutDialog.tsx":"68","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\index.tsx":"69","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\Filter.tsx":"70","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\Listing.tsx":"71","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\form.tsx":"72","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\form.tsx":"73","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\index.tsx":"74","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\Filter.tsx":"75","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\Listing.tsx":"76","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\const.js":"77","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\packageList\\index.tsx":"78","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\packageList\\Filter.tsx":"79","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\packageList\\Listing.tsx":"80","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\index.tsx":"81","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\index.tsx":"82","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\Lawyer.tsx":"83","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\Company.tsx":"84","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\IDAML.tsx":"85","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\IDAMLResult.tsx":"86","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\form.tsx":"87","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\index.tsx":"88","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\Listing.tsx":"89","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\Filter.tsx":"90","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\PackagesDropdown.tsx":"91","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\UsersDropdown.tsx":"92","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\trustid\\index.tsx":"93","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\trustid\\TrustIDService.tsx":"94","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\SubscriptionValidator.tsx":"95","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\myResults\\index.tsx":"96","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\myResults\\Listing.tsx":"97","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\myResults\\Filter.tsx":"98","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\trustid\\TrustIdResult.tsx":"99","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\index.tsx":"100","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\IdentityVerification.tsx":"101","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\YotoError.tsx":"102","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\YotiSuccess.tsx":"103","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\YitoResult.tsx":"104","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\creditSafe\\index.tsx":"105","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\creditSafe\\CreditSafeCheck.tsx":"106","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\creditSafe\\CreditSafeResult.tsx":"107"},{"size":3505,"mtime":1614164883783,"results":"108","hashOfConfig":"109"},{"size":702,"mtime":1613163699375,"results":"110","hashOfConfig":"109"},{"size":442,"mtime":1611426669593,"results":"111","hashOfConfig":"109"},{"size":1943,"mtime":1613415068704,"results":"112","hashOfConfig":"109"},{"size":283,"mtime":1612368591610,"results":"113","hashOfConfig":"109"},{"size":2437,"mtime":1612373909967,"results":"114","hashOfConfig":"109"},{"size":2117,"mtime":1612417059228,"results":"115","hashOfConfig":"109"},{"size":2015,"mtime":1619025269837,"results":"116","hashOfConfig":"109"},{"size":2509,"mtime":1614446752116,"results":"117","hashOfConfig":"109"},{"size":1974,"mtime":1619055025685,"results":"118","hashOfConfig":"109"},{"size":2241,"mtime":1613158638899,"results":"119","hashOfConfig":"109"},{"size":7140,"mtime":1619313871352,"results":"120","hashOfConfig":"109"},{"size":2628,"mtime":1619137614527,"results":"121","hashOfConfig":"109"},{"size":425,"mtime":1611391257695,"results":"122","hashOfConfig":"109"},{"size":2814,"mtime":1619375910677,"results":"123","hashOfConfig":"109"},{"size":6662,"mtime":1619305395628,"results":"124","hashOfConfig":"109"},{"size":2546,"mtime":1614587504830,"results":"125","hashOfConfig":"109"},{"size":2574,"mtime":1619051299206,"results":"126","hashOfConfig":"109"},{"size":1417,"mtime":1619018304529,"results":"127","hashOfConfig":"109"},{"size":7936,"mtime":1619058227640,"results":"128","hashOfConfig":"109"},{"size":2174,"mtime":1619051093309,"results":"129","hashOfConfig":"109"},{"size":4401,"mtime":1619220638608,"results":"130","hashOfConfig":"109"},{"size":4917,"mtime":1619319312484,"results":"131","hashOfConfig":"109"},{"size":3314,"mtime":1619054333493,"results":"132","hashOfConfig":"109"},{"size":5525,"mtime":1619311820556,"results":"133","hashOfConfig":"109"},{"size":4755,"mtime":1619316946731,"results":"134","hashOfConfig":"109"},{"size":3304,"mtime":1619318365648,"results":"135","hashOfConfig":"109"},{"size":4090,"mtime":1619055135438,"results":"136","hashOfConfig":"109"},{"size":3970,"mtime":1619318999925,"results":"137","hashOfConfig":"109"},{"size":442,"mtime":1625850280191,"results":"138","hashOfConfig":"139"},{"size":425,"mtime":1611391257695,"results":"140","hashOfConfig":"139"},{"size":888,"mtime":1623325062829,"results":"141","hashOfConfig":"139"},{"size":6173,"mtime":1679890541360,"results":"142","hashOfConfig":"139"},{"size":2030,"mtime":1621724919111,"results":"143","hashOfConfig":"139"},{"size":5084,"mtime":1626360537839,"results":"144","hashOfConfig":"139"},{"size":541,"mtime":1623230862280,"results":"145","hashOfConfig":"139"},{"size":2574,"mtime":1623390827320,"results":"146","hashOfConfig":"139"},{"size":4177,"mtime":1625656111838,"results":"147","hashOfConfig":"139"},{"size":2255,"mtime":1660409953629,"results":"148","hashOfConfig":"139"},{"size":2413,"mtime":1626122168981,"results":"149","hashOfConfig":"139"},{"size":3313,"mtime":1623316374639,"results":"150","hashOfConfig":"139"},{"size":7861,"mtime":1623411292350,"results":"151","hashOfConfig":"139"},{"size":5693,"mtime":1619541935070,"results":"152","hashOfConfig":"153"},{"size":7953,"mtime":1625579797857,"results":"154","hashOfConfig":"153"},{"size":2341,"mtime":1619602407418,"results":"155","hashOfConfig":"153"},{"size":1951,"mtime":1626081290595,"results":"156","hashOfConfig":"139"},{"size":4593,"mtime":1626343428604,"results":"157","hashOfConfig":"139"},{"size":9393,"mtime":1621595065784,"results":"158","hashOfConfig":"139"},{"size":6042,"mtime":1626366697666,"results":"159","hashOfConfig":"139"},{"size":1718,"mtime":1623124198622,"results":"160","hashOfConfig":"139"},{"size":1832,"mtime":1623324935545,"results":"161","hashOfConfig":"139"},{"size":1196,"mtime":1623319735746,"results":"162","hashOfConfig":"139"},{"size":685,"mtime":1623320119784,"results":"163","hashOfConfig":"139"},{"size":159,"mtime":1622398948408,"results":"164","hashOfConfig":"139"},{"size":1955,"mtime":1623511070670,"results":"165","hashOfConfig":"139"},{"size":7759,"mtime":1626359922669,"results":"166","hashOfConfig":"139"},{"size":752,"mtime":1630953031475,"results":"167","hashOfConfig":"139"},{"size":3362,"mtime":1623393419975,"results":"168","hashOfConfig":"139"},{"size":6175,"mtime":1630779633933,"results":"169","hashOfConfig":"139"},{"size":2171,"mtime":1623393199549,"results":"170","hashOfConfig":"139"},{"size":7033,"mtime":1625573813692,"results":"171","hashOfConfig":"139"},{"size":3402,"mtime":1625573602382,"results":"172","hashOfConfig":"139"},{"size":5418,"mtime":1625580820450,"results":"173","hashOfConfig":"139"},{"size":2357,"mtime":1623415693028,"results":"174","hashOfConfig":"139"},{"size":9817,"mtime":1625573538223,"results":"175","hashOfConfig":"139"},{"size":1956,"mtime":1623440911290,"results":"176","hashOfConfig":"139"},{"size":5104,"mtime":1625580974913,"results":"177","hashOfConfig":"139"},{"size":7279,"mtime":1626283260206,"results":"178","hashOfConfig":"139"},{"size":3416,"mtime":1625519198505,"results":"179","hashOfConfig":"139"},{"size":2319,"mtime":1625513363883,"results":"180","hashOfConfig":"139"},{"size":4801,"mtime":1625581017187,"results":"181","hashOfConfig":"139"},{"size":5114,"mtime":1625574009328,"results":"182","hashOfConfig":"139"},{"size":16066,"mtime":1660408769798,"results":"183","hashOfConfig":"139"},{"size":3371,"mtime":1625571971820,"results":"184","hashOfConfig":"139"},{"size":4640,"mtime":1625596159492,"results":"185","hashOfConfig":"139"},{"size":7354,"mtime":1660409213937,"results":"186","hashOfConfig":"139"},{"size":9627,"mtime":1680429941743,"results":"187","hashOfConfig":"139"},{"size":2746,"mtime":1626343922338,"results":"188","hashOfConfig":"139"},{"size":3645,"mtime":1625580365184,"results":"189","hashOfConfig":"139"},{"size":6428,"mtime":1632167765599,"results":"190","hashOfConfig":"139"},{"size":395,"mtime":1625656076498,"results":"191","hashOfConfig":"139"},{"size":4337,"mtime":1626292482452,"results":"192","hashOfConfig":"139"},{"size":450,"mtime":1625772967839,"results":"193","hashOfConfig":"139"},{"size":451,"mtime":1625772982803,"results":"194","hashOfConfig":"139"},{"size":68555,"mtime":1680425385636,"results":"195","hashOfConfig":"139"},{"size":1958,"mtime":1626450925403,"results":"196","hashOfConfig":"139"},{"size":15457,"mtime":1626129555934,"results":"197","hashOfConfig":"139"},{"size":3415,"mtime":1626126606089,"results":"198","hashOfConfig":"139"},{"size":6963,"mtime":1626129293757,"results":"199","hashOfConfig":"139"},{"size":4588,"mtime":1626113658191,"results":"200","hashOfConfig":"139"},{"size":2717,"mtime":1626127659440,"results":"201","hashOfConfig":"139"},{"size":2596,"mtime":1626118836658,"results":"202","hashOfConfig":"139"},{"size":3390,"mtime":1626345288054,"results":"203","hashOfConfig":"139"},{"size":6971,"mtime":1626369017743,"results":"204","hashOfConfig":"139"},{"size":1240,"mtime":1626336312325,"results":"205","hashOfConfig":"139"},{"size":4558,"mtime":1680430250575,"results":"206","hashOfConfig":"139"},{"size":4987,"mtime":1680429977678,"results":"207","hashOfConfig":"139"},{"size":2738,"mtime":1626354215286,"results":"208","hashOfConfig":"139"},{"size":1788,"mtime":1626451267483,"results":"209","hashOfConfig":"139"},{"size":3382,"mtime":1630783343549,"results":"210","hashOfConfig":"139"},{"size":3819,"mtime":1679890254324,"results":"211","hashOfConfig":"139"},{"size":953,"mtime":1630910343489,"results":"212","hashOfConfig":"139"},{"size":1960,"mtime":1630931348202,"results":"213","hashOfConfig":"139"},{"size":7047,"mtime":1630957334487,"results":"214","hashOfConfig":"139"},{"size":3441,"mtime":1680383709196,"results":"215","hashOfConfig":"139"},{"size":21062,"mtime":1681665202607,"results":"216","hashOfConfig":"139"},{"size":8783,"mtime":1681665776223,"results":"217","hashOfConfig":"139"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"yqq39d",{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"224"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},"5ufsed",{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"280"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"280"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"280"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"280"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"280"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"280"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"280"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"315"},"1xzjdjq",{"filePath":"316","messages":"317","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"280"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"280"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"280"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"280"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"280"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"280"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"344"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"344"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"280"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"280"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"280"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"280"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"280"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"280"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"280"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"280"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"280"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"280"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"280"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"280"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"280"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"280"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"280"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"280"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"280"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"280"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"280"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"280"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"280"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"280"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"344"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"280"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"280"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"280"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"280"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"280"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"280"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"280"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"280"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"280"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"280"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"280"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"280"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"280"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"280"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"280"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"280"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"280"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"280"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"280"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"280"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"280"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"280"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"280"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"280"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"280"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"280"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"280"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"280"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"280"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"504"},"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\Header.tsx",["505","506"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\App.tsx",["507","508","509","510"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\index.tsx",[],["511","512"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\SnakAlert.tsx",["513"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\Footer.tsx",[],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\Login.tsx",["514","515","516","517","518"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\services\\client.ts",[],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\services\\util.ts",[],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\HandlerDropdown.tsx",["519","520"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\Routes.tsx",["521","522","523"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\TimerRefresher.tsx",["524","525","526","527","528"],"import { Button, Tooltip } from '@material-ui/core';\r\nimport React,{useState,useMemo,useEffect,memo} from 'react';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nlet timerRefresherRef:any = null;\r\n\r\nconst TimerRefresher:React.FC<any> = (props:any)=>{\r\n    let interval = props.interval/1000;\r\n    const [show,setShow] = useState(false);\r\n    const [count,setCount] = useState(interval);\r\n\r\n    useEffect(() => {\r\n        if(show){\r\n            timerRefresherRef = setInterval(()=>{\r\n                setCount(c => c-1);\r\n            },1000);\r\n        }\r\n        return () => {\r\n            clearTimeout(timerRefresherRef);\r\n            setCount(interval);\r\n        }\r\n    }, [show])\r\n\r\n    useEffect(()=>{\r\n        if(count == 0 && show){\r\n            if(props.onRefresh) props.onRefresh();\r\n            setCount(interval);\r\n        }\r\n    },[count])\r\n\r\n    const clockTextStyle = {\r\n        width: '40px',\r\n        color: '#fff',\r\n        fontSize: '80%',\r\n        padding: '2px 0 0 0',\r\n        textAlign: 'center',\r\n        position:'absolute',\r\n        top:'11px'\r\n    } as React.CSSProperties;\r\n\r\n    const circleAnimation = {\r\n        animation: `ctimer-animate ${interval}s linear infinite`\r\n    } as React.CSSProperties;\r\n    return (\r\n        <>\r\n        <div className=\"ctimer-container\">\r\n            <Tooltip title={`Auto Refresh - ${interval} sec.` } >\r\n                <Switch\r\n                    checked={show}\r\n                    onChange={(e:any)=>{setShow(e.target.checked )}}\r\n                    name=\"Timer\"\r\n                    color=\"primary\"\r\n                    //inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                />\r\n            </Tooltip>\r\n            {show?\r\n                <div className=\"ctimer\">\r\n                    <svg viewBox=\"0 0 100 100\">\r\n                        <circle cx=\"50\" cy=\"50\" r=\"38\" id=\"clockface\" ></circle>\r\n                        <path d=\"M50,31 A19,19 1 0,1 50,69 A19,19 1 0,1 50,31\" id=\"spent\" style={circleAnimation}></path>\r\n                    </svg>\r\n                    <div style={clockTextStyle}> {count}  </div>\r\n                </div>            \r\n                :''}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(TimerRefresher);","D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\ProcessCreator.tsx",["529","530","531","532"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\MachineDropdown.tsx",["533","534"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\reportWebVitals.ts",[],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\graphs\\TimeAreaGraph.tsx",["535","536"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\HandlerCreator.tsx",["537","538","539"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\common\\ConfirmationDialog.tsx",[],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\index.tsx",["540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\Filter.tsx",["558"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\Listing.tsx",["559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\machines\\DialogMachineTagName.tsx",["576"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\handlers\\Listing.tsx",["577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\handlers\\index.tsx",["593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\processes\\Filter.tsx",["611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\processes\\Listing.tsx",["628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\processes\\index.tsx",["649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\queues\\index.tsx",["670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\queues\\Listing.tsx",["694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717"],"D:\\projects\\WebCrawler\\crawler-front\\app\\src\\pages\\queues\\Filter.tsx",["718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737"],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\index.tsx",[],["738","739"],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\reportWebVitals.ts",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\App.tsx",["740","741"],"import React,{useState,useEffect} from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './assets/App.css';\n\nimport Footer from './common/Footer';\nimport Header from './common/Header';\n\nimport SnakAlert from './common/SnakAlert';\nimport ConfirmationDialog from './common/ConfirmationDialog';\nimport AppInitializer from './AppInitializer';\n\nimport Routes from './Routes';\nimport WithClearCache from './WithClearCache';\n\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nfunction App() {  \n\n  return (\n    <div className=\"app\">\n      <WithClearCache/>\n      <Provider store={store}>\n        <AppInitializer>\n          <Router>\n            <Header/>\n            <Routes/>\n            <Footer/>\n          </Router>\n        </AppInitializer>   \n      </Provider> \n      <SnakAlert/>\n      <ConfirmationDialog/>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\Routes.tsx",["742"],"import { LinearProgress } from '@material-ui/core';\r\nimport React,{lazy,Suspense } from 'react';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport {useSelector} from 'react-redux';\r\nimport ChangePassword from './pages/ChangePassword';\r\n\r\n\r\n\r\n\r\n// admin\r\nconst Users = lazy(()=> import('./pages/admin/users')); \r\nconst UserForm = lazy(()=> import('./pages/admin/users/form')); \r\nconst AdminUsers = lazy(()=> import('./pages/admin/adminUsers')); \r\nconst AdminUserForm = lazy(()=> import('./pages/admin/adminUsers/form')); \r\nconst Vendors = lazy(()=> import('./pages/admin/vendors')); \r\nconst PackageTypes = lazy(()=> import('./pages/admin/packageType')); \r\nconst PackageTypeForm = lazy(()=> import('./pages/admin/packageType/form')); \r\nconst Packages = lazy(()=> import('./pages/admin/packages')); \r\nconst PackagesForm = lazy(()=> import('./pages/admin/packages/form')); \r\nconst AdminDashboard = lazy(()=> import('./pages/admin/AdminDashboard')); \r\nconst Subscriptions = lazy(()=> import('./pages/admin/subscriptions')); \r\nconst SubscriptionForm = lazy(()=> import('./pages/admin/subscriptions/form')); \r\n// customer\r\nconst Login = lazy(()=> import('./pages/Login'));\r\nconst Registration = lazy(()=> import('./pages/Registration')); \r\nconst ResetPassword = lazy(()=> import('./pages/ResetPassword')); \r\nconst Activate = lazy(()=> import('./pages/Activate')); \r\n\r\nconst MyAccount = lazy(()=> import('./pages/MyAccount')); \r\nconst HomePage = lazy(()=> import('./pages/index')); \r\nconst ComplianceSearch = lazy(()=> import('./pages/ComplianceSearch')); \r\nconst MySubscription = lazy(()=> import('./pages/MySubscription')); \r\nconst PackageList = lazy(()=> import('./pages/packageList')); \r\nconst MyResults = lazy(()=> import('./pages/myResults')); \r\n\r\nconst Veriphy = lazy(()=> import('./pages/veriphy')); \r\nconst TrustID = lazy(()=> import('./pages/trustid')); \r\nconst Yoti = lazy(()=> import('./pages/yoti')); \r\nconst YotiError = lazy(()=> import('./pages/yoti/YotoError')); \r\nconst YotiSuccess = lazy(()=> import('./pages/yoti/YotiSuccess')); \r\nconst CreditSafe = lazy(()=> import('./pages/creditSafe')); \r\n\r\n\r\nconst CustomRoute = (props:any)=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const user = useSelector((state:any)=>state.user);\r\n    \r\n    if( isLogin && props.role.indexOf(user.role) !== -1 )\r\n        return <Route {...props}></Route>;\r\n    else if(props.role == null)\r\n        return <Route {...props}></Route>;\r\n    else \r\n        return <Redirect to=\"/login\"/>;\r\n}\r\n\r\nconst Fallback = ()=>{\r\n    return (\r\n        <>\r\n            <LinearProgress/>    \r\n        </> \r\n    )\r\n}\r\n\r\nconst Routers = ()=>{\r\n    return(\r\n        <Suspense fallback={<Fallback/>}>\r\n            \r\n            <div className=\"container\">\r\n                <Switch>\r\n                    <Route component={ChangePassword} path=\"/changePassword/:uuid?\" />\r\n                    <Route component={ResetPassword} path=\"/resetPassword\" exact />\r\n                    <Route component={Registration} path=\"/registration\" exact />\r\n                    <Route component={Login} path=\"/login\" exact key=\"login\" />\r\n                    <Route component={Activate} path=\"/activate/:email\" key=\"activate\" />\r\n               \r\n                    \r\n                    <CustomRoute component={HomePage} path=\"/\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={PackageList} path=\"/packages\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={MySubscription} path=\"/mySubscription\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={ComplianceSearch} path=\"/complianceSearch\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={MyAccount} path=\"/myAccount\" exact role={['Admin','Customer']} />       \r\n                    \r\n\r\n                    <CustomRoute component={Veriphy} path=\"/veriphy/:sid\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={TrustID} path=\"/trustid/:sid\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={Yoti} path=\"/yoti/:sid\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={YotiError} path=\"/yoti/result/error/:sid\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={YotiSuccess} path=\"/yoti/result/success/:sid\" exact role={['Admin','Customer']} />\r\n                    <CustomRoute component={CreditSafe} path=\"/CreditSafe/:sid\" exact role={['Admin','Customer']} />\r\n\r\n                    <CustomRoute component={MyResults} path=\"/myResults/\" exact role={['Admin','Customer']} />\r\n\r\n                    <CustomRoute component={AdminDashboard} path=\"/admin/dashboard\" exact role={['Admin']} />\r\n                    <CustomRoute component={Users} path=\"/admin/users/\" exact role={['Admin']} />\r\n                    <CustomRoute component={UserForm} path=\"/admin/user/:id\" exact role={['Admin']} />\r\n                    <CustomRoute component={AdminUsers} path=\"/admin/admin-users\" exact role={['Admin']} />\r\n                    <CustomRoute component={AdminUserForm} path=\"/admin/admin-user/doc/:id?\" exact role={['Admin']} />\r\n                    <CustomRoute component={PackageTypes} path=\"/admin/package-type\" exact role={['Admin']} />\r\n                    <CustomRoute component={PackageTypeForm} path=\"/admin/package-type/doc/:id?\" exact role={['Admin']} />\r\n                    <CustomRoute component={Packages} path=\"/admin/packages\" exact role={['Admin']} />\r\n                    <CustomRoute component={PackagesForm} path=\"/admin/packages/doc/:id?\" exact role={['Admin']} />\r\n                    <CustomRoute component={Vendors} path=\"/admin/vendors\" exact role={['Admin']} />\r\n                    <CustomRoute component={Subscriptions} path=\"/admin/subscriptions\" exact role={['Admin']} />\r\n                    <CustomRoute component={SubscriptionForm} path=\"/admin/subscriptions/doc/:id?\" exact role={['Admin']} />\r\n                    \r\n                </Switch>\r\n            </div>\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default Routers;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\SnakAlert.tsx",["743"],"import React,{useState,useEffect,memo} from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nenum snakAlertType{\r\n    success='success',\r\n    error='error',\r\n    warning='warning',\r\n    info='info'\r\n}\r\n \r\ndeclare global {\r\n    interface Window {\r\n        snakAlert:any\r\n    }\r\n}\r\n\r\nwindow.snakAlert = {\r\n    success:Function,\r\n    warning:Function,\r\n    error:Function,\r\n    info:Function,\r\n    show:Function\r\n}\r\n\r\nconst SnakAlert:React.FC = ()=>{\r\n    \r\n    const [state,setState]:any = useState({type:snakAlertType.success,open:false,message:''});\r\n    \r\n    const handleClose = (e:any,reason:any)=>{\r\n        if(reason !== 'clickaway')\r\n            setState({...state,open:false});\r\n    }\r\n\r\n    window.snakAlert.success = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.success})\r\n    }\r\n    window.snakAlert.warning = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.warning})\r\n    }\r\n    window.snakAlert.error = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.error})\r\n    }\r\n    window.snakAlert.info = (message:string)=>{\r\n        setState({...state,open:true,message:message,type:snakAlertType.info})\r\n    }\r\n    window.snakAlert.show = (res:any)=>{\r\n        if(res.success){\r\n            window.snakAlert.success(res.message);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <Snackbar className=\"snak-alert\"\r\n            open={state.open} \r\n            autoHideDuration={5000} \r\n            onClose={handleClose} \r\n            anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n            style={{top:'80px'}}\r\n            >\r\n            <Alert onClose={()=>{handleClose(null,null)}} severity={state.type}>\r\n                {state.message}\r\n            </Alert>\r\n        </Snackbar>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default memo(SnakAlert);","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\Header.tsx",["744","745","746","747","748","749","750","751","752","753"],"import React from 'react';\r\nimport {useHistory,withRouter,Link as RLink} from 'react-router-dom';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Badge, Icon, IconButton, Link } from '@material-ui/core';\r\nimport ComputerIcon from '@material-ui/icons/Computer';\r\nimport SettingsInputComponentIcon from '@material-ui/icons/SettingsInputComponent';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { DeviceHub, ListAlt, ShoppingCart } from '@material-ui/icons';\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {logout} from '../store/actions';\r\n\r\nexport default  function SwipeableTemporaryDrawer() {\r\n    let history = useHistory();\r\n    let dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const isAdmin = useSelector((state:any)=>state.user && state.user.role=='Admin');\r\n\r\n    const [state, setState] = React.useState(false);\r\n    const toggleDrawer = (open) => (event) => {\r\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        setState(open);\r\n    };\r\n    const handlerLogout = ()=>{\r\n        dispatch(logout());\r\n    }\r\n\r\n    const list = () => (\r\n        <div className=\"left-menu\"\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(false)}\r\n            onKeyDown={toggleDrawer(false)}\r\n        >\r\n        <List>\r\n            <ListItem button component={RLink} to=\"/packages\"  >\r\n                <ListItemIcon><DeviceHub/></ListItemIcon>\r\n                <ListItemText primary=\"Packages\" />\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={RLink} to=\"/myAccount\"  >\r\n                <ListItemIcon><DeviceHub/></ListItemIcon>\r\n                <ListItemText primary=\"My Account\" />\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={RLink} to=\"/mySubscription\"  >\r\n                <ListItemIcon><DeviceHub/></ListItemIcon>\r\n                <ListItemText primary=\"My Subscription\" />\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={RLink} to=\"/myResults\"  >\r\n                <ListItemIcon><DeviceHub/></ListItemIcon>\r\n                <ListItemText primary=\"My Results\" />\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <ListItem button component={RLink} to=\"/admin/dashboard\"  >\r\n                <ListItemIcon><DeviceHub/></ListItemIcon>\r\n                <ListItemText primary=\"Admin\" />\r\n            </ListItem>\r\n        </List>\r\n        <Divider />\r\n        </div>\r\n    );\r\n  \r\n    return (\r\n        <>\r\n        {isLogin?\r\n        <>\r\n            <AppBar position=\"static\" className=\"appBar\" color=\"transparent\" >\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        <div className=\"logo\"></div>\r\n                    </Typography>\r\n                    \r\n                    <Hidden smDown>\r\n                        <div className=\"menu\">\r\n                             \r\n                            <RLink to=\"/packages\">Packages</RLink>\r\n                            <RLink to=\"/myAccount\">My Account</RLink>\r\n                            <RLink to=\"/mySubscription\">My Subscription</RLink>\r\n                            <RLink to=\"/myResults\">My Results</RLink>\r\n                            {isAdmin?\r\n                            <>\r\n                                <RLink to=\"/admin/dashboard\">Admin</RLink>\r\n                            </>\r\n                            :''    \r\n                            }\r\n                            \r\n                        </div>\r\n                        \r\n                        <Button onClick={handlerLogout}>Logout</Button>\r\n                    </Hidden>\r\n                    <Hidden mdUp>\r\n                        <IconButton edge=\"start\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Hidden>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>        \r\n            \r\n            <SwipeableDrawer\r\n                anchor=\"left\"\r\n                open={state}\r\n                onClose={toggleDrawer(false)}\r\n                onOpen={toggleDrawer(true)}\r\n            >\r\n                {list()}\r\n            </SwipeableDrawer>  \r\n            </>\r\n            :''}\r\n        </>\r\n    );\r\n};","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\Footer.tsx",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\ConfirmationDialog.tsx",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Login.tsx",["754","755","756","757","758","759"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@material-ui/core';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport AlertMessage from '../common/AlertMessage';\r\nimport client from '../services/client';\r\n\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {login} from '../store/actions';\r\n\r\nconst Login:React.FC = ()=>{\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const Role = useSelector((state:any)=>state.user?state.user.role:'');\r\n    if(isLogin){\r\n        history.push('/');\r\n        /*if(Role == 'Admin'){\r\n            history.push('/admin/dashboard');\r\n        }else{\r\n            history.push('/mySubscription');\r\n        }*/\r\n    }\r\n\r\n    \r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [Email,setEmail] = useState('');\r\n    const [Password,setPassword] = useState('');\r\n\r\n    \r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        \r\n        let res:any = await client.post('auth/',{email:Email,pwd:Password});\r\n        if(res && res.success){\r\n            \r\n            dispatch(login(res.data));\r\n            \r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"logo-mini\"></div>\r\n            <h1>Log into your account</h1>\r\n            <Paper className=\"paper\">\r\n                <AlertMessage message={Message}/>\r\n\r\n                <ValidatorForm\r\n                    \r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => console.log(errors)}\r\n                >\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        name=\"Email\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                        validators={['required','isEmail']}\r\n                        errorMessages={['Ehis is required','Email is not valie']}\r\n                        value={Email}\r\n                        disabled={processing}\r\n                    />\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        name=\"Password\"\r\n                        onChange={(e:any)=>{ setPassword(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Password is required']}\r\n                        value={Password}\r\n                        disabled={processing}\r\n                    />\r\n                    <br/>\r\n                    <Button disabled={processing}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <LinearProgress style={{display: processing?'':'none' }} />\r\n                    \r\n                    <Grid container className=\"links\">\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <Rlink to=\"/resetPassword\"> Forgot your password?</Rlink>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Rlink to=\"/registration\"> Sign up</Rlink>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </ValidatorForm>\r\n            \r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\services\\client.ts",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\services\\util.ts",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\ResetPassword.tsx",["760","761","762","763","764"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@material-ui/core';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport client from '../services/client';\r\nimport AlertMessage from '../common/AlertMessage';\r\n\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst ResetPassword:React.FC = ()=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const history = useHistory();\r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [Email,setEmail] = useState('');\r\n    \r\n    const handleSubmit = async()=>{\r\n        \r\n        setProcessing(true);\r\n\r\n        let res:any = await client.post('user/resetPassword',{Email:Email});\r\n        if(res && res.success){\r\n            setMessage({type:'success',message:res.data});\r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isLogin){\r\n            history.push('/');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"logo-mini\"></div>\r\n            <h1>Reset your password</h1>\r\n            <Paper className=\"paper paper-login\">\r\n                <AlertMessage message={Message}/>\r\n\r\n                <p>To reset your password, please enter your email address below</p>\r\n                <ValidatorForm\r\n                    \r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => console.log(errors)}\r\n                >\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Email Address\"\r\n                        name=\"Email\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                        validators={['required','isEmail']}\r\n                        errorMessages={['this field is required','Email is not valie']}\r\n                        value={Email}\r\n                        disabled={processing}\r\n                    />\r\n                    <br/>\r\n                    <Button disabled={processing}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Reset my password\r\n                    </Button> \r\n                    <LinearProgress style={{display: processing?'':'none' }} />\r\n                    \r\n                    <Grid container className=\"links\">\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <Rlink to=\"/login\"> Login</Rlink>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Rlink to=\"/registration\"> Sign up</Rlink>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </ValidatorForm>\r\n            \r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ResetPassword;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Registration.tsx",["765","766","767","768","769"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@material-ui/core';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport client from '../services/client';\r\nimport AlertMessage from '../common/AlertMessage';\r\nimport {useSelector} from 'react-redux';\r\n\r\nlet _password:string = ''; // for referencing\r\n\r\nconst Registration:React.FC = ()=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const history = useHistory();\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n\r\n    const [Email,setEmail] = useState('');\r\n    const [FullName,setFullName] = useState('');\r\n    const [OrganisationName,setOrganisationName] = useState('');\r\n    const [TelephoneNo,setTelephoneNo] = useState('');\r\n    const [Password,setPassword] = useState('');\r\n    const [ConfirmPassword,setConfirmPassword] = useState('');\r\n    \r\n    _password = Password;\r\n    \r\n    useEffect(() => {\r\n        if(isLogin){\r\n            history.push('/');\r\n        }\r\n\r\n        // add custom validation for confirm password\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value:string) => {\r\n            if (value !== _password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        ValidatorForm.addValidationRule('validatePassword', (value:string) => {\r\n            let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n            return regex.test(value);  \r\n        });\r\n        return ()=>{\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('validatePassword');\r\n        }\r\n\r\n    }, [])\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        //registrations/create\r\n        let params = {\r\n            Email,FullName,OrganisationName,TelephoneNo,Password,ConfirmPassword\r\n        };\r\n        let res:any = await client.post('registrations/create',params);\r\n        if(res && res.success){\r\n            setMessage({type:'success',message:res.data});\r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"logo-mini\"></div>\r\n            <h1>Register with us</h1>\r\n            <Paper className=\"paper\">\r\n                <AlertMessage message={Message}/>\r\n\r\n                <ValidatorForm\r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => {\r\n                        console.log(errors)\r\n                    }}\r\n                >\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Full Name\"\r\n                        name=\"FullName\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setFullName(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Name is required']}\r\n                        value={FullName}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 100 }}\r\n                    />\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Organization Name\"\r\n                        name=\"OrganisationName\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setOrganisationName(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Organization name is required']}\r\n                        value={OrganisationName}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 100 }}\r\n                    />\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Company Business Email Address\"\r\n                        name=\"Email\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                        validators={['required','isEmail']}\r\n                        errorMessages={['Email is required','Email is not valid']}\r\n                        value={Email}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 100 }}\r\n                    />\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Telephone No\"\r\n                        name=\"TelephoneNo\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setTelephoneNo(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Phone is required']}\r\n                        value={TelephoneNo}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        name=\"Password\"\r\n                        onChange={(e:any)=>{ setPassword(e.target.value) }}\r\n                        validators={['required','validatePassword']}\r\n                        errorMessages={['Password is required','Password must be 8-16 char. long and must contain atleast one number']}\r\n                        value={Password}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        type=\"password\"\r\n                        label=\"Confirm Password\"\r\n                        name=\"ConfirmPassword\"\r\n                        onChange={(e:any)=>{ setConfirmPassword(e.target.value) }}\r\n                        value={ConfirmPassword}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 50 }}\r\n                        validators={['isPasswordMatch', 'required']}\r\n                        errorMessages={['Password mismatched','Confirm password is required']}\r\n                    />\r\n                    <br/>\r\n                    <Button disabled={processing}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Registration\r\n                    </Button>\r\n                    <LinearProgress style={{display: processing?'':'none' }} />\r\n                    \r\n                    <Grid container className=\"links\">\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <Rlink to=\"/resetPassword\"> Forgot your password?</Rlink>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Rlink to=\"/login\"> Login</Rlink>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </ValidatorForm>\r\n            \r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Registration;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Users.tsx",["770","771","772","773","774","775"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Switch } from '@material-ui/core';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../services/util';\r\nimport { now } from 'moment';\r\n \r\nconst Filter = (props:any)=>{\r\n \r\n  const [Name,setName] = useState('');\r\n  const [Active,setActive] = useState(true);\r\n\r\n  useEffect(()=>{\r\n      handlerSearch();\r\n  },[]);\r\n\r\n  const handlerSearch = ()=>{\r\n      props.onSearch({Name,page:1});\r\n  }\r\n  const handleStatus = (e:any)=>{\r\n    setActive( e.target.checked )\r\n  }\r\n  const handlerClear = ()=>{\r\n      setName('');\r\n      props.onSearch({Name,page:1});\r\n  }\r\n\r\n  return (\r\n      <Grid container spacing={1} >\r\n          <Grid item md={3} sm={6} xs={12}>\r\n              <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name | Email\"\r\n                  value={Name}\r\n                  onChange={(e:any)=>{setName(e.target.value)}} \r\n              />\r\n          </Grid>\r\n          <Grid item md={2} sm={6} xs={6}>\r\n              <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                  <Icon>search</Icon>\r\n              </Button> &nbsp;\r\n              <Button onClick={handlerClear} variant=\"contained\">\r\n                  <Icon>clear</Icon>\r\n              </Button>\r\n          </Grid>\r\n          <Grid item md={2} sm={6} xs={6}>\r\n            <Tooltip title={Active?'Active Users':'In-active Users'} >\r\n                <Switch\r\n                    checked={Active}\r\n                    onChange={handleStatus}\r\n                    name=\"Active\"\r\n                />\r\n            </Tooltip>\r\n          </Grid>\r\n          \r\n\r\n      </Grid>\r\n  )\r\n}\r\n\r\nconst Listing = (props:any)=>{\r\n  const columns = [\r\n    {\r\n      name: 'User',\r\n      selector: 'FirstName',\r\n      compact:true,\r\n      //width:'170px',\r\n      cell:(row:any)=><>{row.FirstName} {row.LastName}</>\r\n    },  \r\n    {\r\n          name: 'Email',\r\n          selector: 'Email',\r\n          compact:true,\r\n          //width:'170px',\r\n      },\r\n      {\r\n          name: 'Active',\r\n          selector: 'Active',\r\n          compact:true,\r\n          width:'160px',\r\n          \r\n          cell:(row:any)=><>{row.Active?'True':'False'}</>\r\n      },\r\n      \r\n      {\r\n          name: 'Last Update',\r\n          selector: 'DateUpdated',\r\n          compact:true,\r\n          width:'160px',\r\n          hide:1200,\r\n          cell:(row:any)=><>{u.format.datetime(row.DateUpdated)}</>\r\n      },\r\n      {\r\n          name: 'Actions',\r\n          //selector: 'MPID',\r\n          compact:true,\r\n          width:'100px',\r\n          right:true,\r\n          cell:(row:any) => \r\n              <>\r\n              <Tooltip title=\"Edit\" >\r\n                  <IconButton size=\"small\" className=\"action\" onClick={()=>{props.onEdit(row)}} >\r\n                      <Icon className=\"icon-green\">edit</Icon>\r\n                  </IconButton>\r\n              </Tooltip>\r\n              <Tooltip title=\"Delete\" >\r\n                  <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                      <Icon className=\"icon-red\">delete_forever</Icon>\r\n                  </IconButton>\r\n              </Tooltip>\r\n              <Tooltip title=\"Deactivate\" >\r\n                  <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                      <Icon className=\"icon-red\">remove_circle_outline</Icon>\r\n                  </IconButton>\r\n              </Tooltip>\r\n              </>\r\n      }\r\n    ];\r\n  return(\r\n      <DataTable\r\n          title=\"\"\r\n          noHeader={true}\r\n          columns={columns}\r\n          //selectableRows={true}\r\n          selectableRowsHighlight={true}\r\n          dense={true}\r\n          data={props.data.records}\r\n          highlightOnHover={true}\r\n          pagination={true}\r\n          paginationServer={true}\r\n          paginationTotalRows={props.data.count}\r\n          paginationPerPage={props.rowPerPage}\r\n          paginationComponentOptions={ {noRowsPerPage: true}}\r\n          paginationDefaultPage={1}\r\n          paginationResetDefaultPage={1==1}\r\n          onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n          //expandableRows\r\n          //expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n          /*onSelectedRowsChange={(rows:any)=>{\r\n              props.onSelectedRowsChange(rows.selectedRows);\r\n          }}*/\r\n      />\r\n  )\r\n}\r\n\r\n/*const ExpandedComponent = ({data}:any)=>{\r\n  return (\r\n      <>\r\n          <Card variant=\"outlined\" className=\"grid-detail\">\r\n              <CardContent>\r\n                  <Grid container spacing={0}>\r\n                      <Grid item xs={12} sm={6} md={3}>Name: <span>{data.Name}</span></Grid>\r\n                      \r\n                  </Grid>\r\n              </CardContent>\r\n          </Card >\r\n      </>\r\n  )\r\n}*/\r\n\r\nconst Users = () => {\r\n\r\n    const data = {\r\n      records:[{UserID:1,FirstName:'jacob',LastName:'Bejarano',Email:'jacob@gmail.com',Role:'Customer',Active:1,DateCreated:new Date(),DateUpdated:new Date()}],\r\n      count:1\r\n    }\r\n    const rowPerPage = 10;\r\n    const handlerSearch = async()=>{\r\n\r\n    } \r\n\r\n    return (\r\n        <>\r\n        <h1>Users List</h1>\r\n        <Paper elevation={0} className=\"section mt-10\">\r\n            <Filter onSearch={handlerSearch}/>\r\n        </Paper>\r\n        <Paper elevation={0} className=\"section mt-10\">\r\n            <Listing rowPerPage={rowPerPage} data={data} onPagingChange={handlerSearch}  \r\n                    \r\n                />      \r\n        </Paper>\r\n\r\n        </>\r\n    )\r\n} \r\n\r\nexport default Users;  ",["776","777"],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Products.tsx",["778","779","780","781","782","783"],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\StepperInput.tsx",["784","785","786","787","788"],"import React, { useEffect, useState, useMemo, SFC } from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\nconst StepperInput: React.FC<any> = (props:any) => {\r\n    const [value,setValue] = useState(1);\r\n    const [maxValue,setMaxValue] = useState(20);\r\n    const [minValue,setMinValue] = useState(1);\r\n    \r\n    useEffect(()=>{\r\n        if(props.maxValue && parseInt(props.maxValue) > 0 )\r\n            setMaxValue(parseInt(props.maxValue));\r\n        if(props.value && parseInt(props.value) > 0 )\r\n            setValue(parseInt(props.value));\r\n        if(props.minValue && parseInt(props.minValue) > 0 )\r\n            setMinValue(parseInt(props.minValue));\r\n    },[props])\r\n\r\n\r\n    const inc=()=>{\r\n        let newVal = value;\r\n        if(newVal < maxValue)\r\n            newVal = newVal + 1;\r\n        \r\n        setValue(newVal);\r\n\r\n        props.onchange(newVal);\r\n    }\r\n\r\n    const dec=()=>{\r\n        let newVal = value;\r\n        if(newVal > minValue)\r\n            newVal = newVal - 1;\r\n        setValue(newVal);\r\n        \r\n        props.onchange(newVal);\r\n    }\r\n\r\n    const validateNumeric = (e:any)=>{\r\n        var key =  e.keyCode?e.keyCode : e.which\r\n        let regex = /[0-9]+/;\r\n        if(!regex.test(String.fromCharCode(key))){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e:any)=>{\r\n        let regex = /^[0-9]+$/;\r\n        if(!regex.test(e.target.value)){\r\n            return false;\r\n        }else{\r\n            if(parseInt(e.target.value) == 0) \r\n            return false;\r\n        }\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    const onBlurHandler = (e:any)=>{\r\n        props.onchange(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className={'stepper-input ' + ((props.className)?props.className:'') }  >\r\n                <div className=\"wrapper\">\r\n                    <Icon className=\"dec\" onClick={dec}>remove_circle_outline</Icon>\r\n                    \r\n                    <input type=\"text\" className=\"textbox\" maxLength={5} value={value} onBlur={onBlurHandler} onChange={onChangeHandler} />\r\n                    <Icon  className=\"inc\" onClick={inc}>add_circle_outline</Icon>\r\n                    \r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default  React.memo(StepperInput) ;\r\n",["789","790"],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\AdminDashboard.tsx",["791","792","793","794","795","796","797","798","799","800","801","802","803"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nconst AdminDashboard = () => {\r\n\r\n    return (\r\n        <>\r\n        <h2>Dashboard <span>Admin navigation dashboard</span></h2>\r\n        <Paper elevation={1} className=\"section mt-10\">\r\n            <Grid spacing={1} container>\r\n                <Grid item md={3} sm={4} xs={12}>\r\n                    <Button variant=\"contained\" component={RLink} to=\"/admin/admin-users\" fullWidth={true} color=\"primary\">Admin Users</Button>\r\n                </Grid>\r\n\r\n                <Grid item md={3} sm={4} xs={12}>\r\n                    <Button variant=\"contained\" component={RLink} to=\"/admin/users\" fullWidth={true} color=\"primary\">Users</Button>\r\n                </Grid>\r\n                <Grid item md={3} sm={4} xs={12}>\r\n                    <Button variant=\"contained\" component={RLink} to=\"/admin/vendors\" fullWidth={true} color=\"primary\">Vendors</Button>\r\n                </Grid>\r\n                <Grid item md={3} sm={4} xs={12}>\r\n                <Button variant=\"contained\" component={RLink} to=\"/admin/package-type\" fullWidth={true} color=\"primary\">Package Types</Button>\r\n                </Grid>\r\n                <Grid item md={3} sm={4} xs={12}>\r\n                    <Button variant=\"contained\" component={RLink} to=\"/admin/packages\"  fullWidth={true} color=\"primary\">Packages</Button>\r\n                </Grid>\r\n                \r\n                <Grid item md={3} sm={4} xs={12}>\r\n                    <Button variant=\"contained\" component={RLink} to=\"/admin/subscriptions\"  fullWidth={true} color=\"primary\">Subscriptions</Button>\r\n                </Grid>\r\n                \r\n                \r\n            </Grid>\r\n        </Paper>\r\n\r\n        </>\r\n    )\r\n} \r\n\r\nexport default AdminDashboard;  ","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\MySubscription.tsx",["804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820"],"import React,{useState,useEffect,useMemo} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge, LinearProgress  } from '@material-ui/core';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport {useHistory} from 'react-router-dom';\r\nimport client from '../services/client';\r\nimport {PRICING_TYPE} from '../const';\r\nimport u from '../services/util';\r\nimport AlertMessage from '../common/AlertMessage';\r\n\r\nconst MySubscription = () => {\r\n    const history = useHistory();\r\n\r\n    const [Subscriptions,setSubscriptions]:any = useState([]);\r\n    const [ShowExpired,setShowExpired] = useState(false);\r\n    const [processing,setprocessing] = useState(false);\r\n\r\n    const loadSubscriptions = async()=>{\r\n        setprocessing(true);\r\n        let res = await client.get('mySubscription/',{ShowExpired:ShowExpired});\r\n        if(res.error){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            setSubscriptions(res.data);\r\n        }\r\n        setprocessing(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        loadSubscriptions();\r\n    },[ShowExpired])\r\n\r\n    const handlerUseSubscription = (row:any)=>{\r\n        history.push(`/${row.VendorCode}/${row.SID}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <h1>My Subscriptions</h1>\r\n        <Paper elevation={1} className=\"section mt-10\">\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={<Switch checked={ShowExpired} onChange={(e:any)=>{ \r\n                        setShowExpired(e.target.checked)\r\n                    }} name=\"show expired\" />}\r\n                    label=\"Show Expired\"\r\n                />\r\n            </FormGroup>\r\n        </Paper>\r\n        <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n        <Paper elevation={0} className=\"section mt-10\">\r\n            <Grid spacing={2} container>\r\n                {Subscriptions.length > 0 && Subscriptions.map((row:any)=>(\r\n                    <Grid item md={6} sm={6} xs={12}>\r\n                        <div className=\"subscription-box\">\r\n                            <label>{row.PackageTitle}</label>\r\n                            <div>Vendor  <span> {row.VendorName} </span></div>\r\n                            <div>Pricing Type  <span> {row.PricingType} </span></div>\r\n                            {row.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                            <>\r\n                            <div>Package Type  <span>{row.PackageType}</span></div>\r\n                            <div>Start Date <span>{u.format.date(row.StartDate)}</span></div>\r\n                            <div>End Date <span>{u.format.date(row.EndDate)}</span></div>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            <div>Date Created  <span>{u.format.date(row.DateCreated)}</span></div>\r\n                            <div>API Quantity  <span>{row.APICallsQuantity}</span></div>\r\n                            </>\r\n                            }\r\n                            <div>Quota  <span>{row.APICallsLimit}</span></div>\r\n                            <div>Used  <span>{row.APICallsCounter}</span></div>\r\n                            <div>Price  <span>{u.format.currency(row.TotalPackagePrice)}</span></div>\r\n                            {row.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                                <div className=\"remaining\">Remaining  <span> { row.APICallsLimit - row.APICallsCounter} </span></div>\r\n                            :\r\n                                <div className=\"remaining\">Remaining  <span> { row.APICallsQuantity - row.APICallsCounter} </span></div>\r\n                            }\r\n\r\n                            <Button size=\"small\" variant=\"contained\" style={{display:ShowExpired?'none':''}}\r\n                                onClick={()=>{\r\n                                    handlerUseSubscription(row);\r\n                                }}\r\n                            >Use subscription</Button>\r\n                        </div>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {!processing && Subscriptions.length ==0 ? \r\n                    <AlertMessage message={{type:'info',message:'No subscription available'}}/>\r\n                :''}\r\n        </Paper>\r\n\r\n        </>\r\n    )\r\n} \r\n\r\nexport default MySubscription;  ","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\ComplianceSearch.tsx",["821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge  } from '@material-ui/core';\r\n\r\n\r\nconst Filter = (props:any)=>{\r\n \r\n    const [Name,setName] = useState('');\r\n    const [Active,setActive] = useState(true);\r\n  \r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n  \r\n    const handlerSearch = ()=>{\r\n        props.onSearch({Name,page:1});\r\n    }\r\n    const handleStatus = (e:any)=>{\r\n      setActive( e.target.checked )\r\n    }\r\n    const handlerClear = ()=>{\r\n        setName('');\r\n        props.onSearch({Name,page:1});\r\n    }\r\n  \r\n    return (\r\n        <>\r\n        <h3>Basic Info</h3>\r\n        <Grid container spacing={1} >    \r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Name\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"ID\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Account No.\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n        </Grid>\r\n        <h3>Address</h3>\r\n        <Grid container spacing={1} >    \r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Address 1\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Address 2\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Town\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"County\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Post code\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Country\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n        </Grid>\r\n        <h3>Contact</h3>\r\n        <Grid container spacing={1} >    \r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Telephone\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Mobile\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Fax\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Email\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n        </Grid>\r\n        <h3>Other Info</h3>\r\n        <Grid container spacing={1} >    \r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"DOB\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Gender\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Driving License\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Passport\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Mother's Madian Name\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"National insourance number\"\r\n                    value={Name}\r\n                    onChange={(e:any)=>{setName(e.target.value)}} \r\n                />\r\n            </Grid>\r\n        </Grid>\r\n        <br/><br/>\r\n        <Grid container spacing={1} >    \r\n            <Grid item md={12} sm={12} xs={12}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" size=\"small\"  color=\"primary\" fullWidth >\r\n                    <Icon>search</Icon>\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n\r\n        </>\r\n    )\r\n  }\r\n\r\n  \r\nconst ComplianceSearch = () => {\r\n    const data = {\r\n        records:[{UserID:1,FirstName:'jacob',LastName:'Bejarano',Email:'jacob@gmail.com',Role:'Customer',Active:1,DateCreated:new Date(),DateUpdated:new Date()}],\r\n        count:1\r\n      }\r\n      const rowPerPage = 10;\r\n      const handlerSearch = async()=>{\r\n  \r\n      } \r\n\r\n    return (\r\n        <>\r\n        <h1>Compliance Search</h1>\r\n        <Paper elevation={0} className=\"section mt-10\">\r\n            <Filter onSearch={handlerSearch}/>\r\n        </Paper>\r\n        <br/>   \r\n        <hr/>\r\n        <h1>Search Results</h1>\r\n        <hr/>\r\n        <Paper elevation={0} className=\"section mt-10\">\r\n            <div className=\"search-result-list\" >\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">First Name:</span>\r\n                        <div className=\"value\"> Test </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Last Name:</span>\r\n                        <div className=\"value\"> Tester</div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">DOB: </span>\r\n                        <div className=\"value\"> 10-10-1970</div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Address:</span>\r\n                        <div className=\"value\"> 68 Jesmond Road West </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Telephone:</span>\r\n                        <div className=\"value\"> 2342342234   </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Passport:</span>\r\n                        <div className=\"value\"> 234234223   </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Card Number:</span>\r\n                        <div className=\"value\"> 2342342234234223   </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">SmartLink: </span>\r\n                        <div className=\"value\"> 10-10-1970</div>\r\n                    </div>\r\n                </div>\r\n            \r\n                <br/><hr/><br/>\r\n                <Button onClick={handlerSearch} variant=\"contained\" size=\"small\"  color=\"primary\" fullWidth >\r\n                    Email This Result\r\n                </Button>\r\n                <br/>\r\n\r\n        </Paper>\r\n\r\n        </>\r\n    )\r\n} \r\n\r\nexport default ComplianceSearch;  ","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\MyAccount.tsx",["837","838","839","840"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@material-ui/core';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport client from '../services/client';\r\n\r\nconst MyAccount:React.FC = ()=>{\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [FullName,setFullName] = useState('');\r\n    const [OrganisationName,setOrganisationName] = useState('');\r\n    const [TelephoneNo,setTelephoneNo] = useState('');\r\n\r\n    \r\n    const getInfo = async()=>{\r\n        setProcessing(true);\r\n        let res = await client.get('myAccountInfo/',{});\r\n        if(res.success && res.data){\r\n            setFullName(res.data.FullName);\r\n            setOrganisationName(res.data.OrganisationName);\r\n            setTelephoneNo(res.data.TelephoneNo);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let res = await client.post('myAccountInfo/update_info/',{FullName,OrganisationName,TelephoneNo});\r\n        if(res.success && res.data){\r\n            window.snakAlert.success(res.data);\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getInfo();\r\n    },[]);\r\n\r\n    return (\r\n\r\n            <>\r\n            <h1>My Account</h1>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n\r\n                <ValidatorForm\r\n                    \r\n                    onSubmit={handleSubmit}\r\n                    onError={errors => console.log(errors)}\r\n                >\r\n                    {FullName?\r\n                        <>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"First Name\"\r\n                                        name=\"FullName\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setFullName(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Name is required']}\r\n                                        value={FullName}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Organization Name\"\r\n                                        name=\"OrganizationName\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setOrganisationName(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Name is required']}\r\n                                        value={OrganisationName}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Telephone No\"\r\n                                        name=\"TelephoneNo\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setTelephoneNo(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Name is required']}\r\n                                        value={TelephoneNo}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12}> \r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item style={{ flex: 1 }}>\r\n                                            <Button disabled={processing}\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\">Submit</Button>\r\n                                        </Grid>\r\n                                        <Grid item >\r\n                                            <Rlink to=\"/changePassword\">Change Password</Rlink>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid> \r\n                        </Grid>    \r\n                        </>\r\n                    :''}\r\n                    \r\n                </ValidatorForm>\r\n            </Paper>\r\n            <LinearProgress style={{display: processing?'':'none' }} />\r\n            </>\r\n            \r\n    )\r\n\r\n}\r\n\r\nexport default MyAccount;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\WithClearCache.tsx",["841"],"import React, { useState, useEffect } from \"react\";\r\nimport packageJson from \"../package.json\";\r\nimport moment from \"moment\";\r\n\r\nconst buildDateGreaterThan = (latestDate:any, currentDate:any) => {\r\n  const momLatestDateTime = moment(latestDate);\r\n  const momCurrentDateTime = moment(currentDate);\r\n\r\n  if (momLatestDateTime.isAfter(momCurrentDateTime)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst WithClearCache =()=> {\r\n  const [isLatestBuildDate, setIsLatestBuildDate] = useState(false);\r\n  const [buldVersion, setbuldVersion] = useState(false);\r\n\r\n  const refreshCacheAndReload = () => {\r\n    \r\n    if (caches) {\r\n      \r\n      // Service worker cache should be cleared with caches.delete()\r\n      caches.keys().then((names) => {\r\n        for (const name of names) {\r\n          caches.delete(name);\r\n          \r\n        }\r\n      });\r\n    }\r\n    // delete browser cache and hard reload\r\n    window.location.reload(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"/meta.json\")\r\n      .then((response) => response.json())\r\n      .then((meta) => {\r\n        const latestVersionDate = meta.buildDate;\r\n        const currentVersionDate = packageJson.buildDate;\r\n\r\n        const shouldForceRefresh = buildDateGreaterThan(\r\n          latestVersionDate,\r\n          currentVersionDate\r\n        );\r\n        console.log(meta.buildVersion)\r\n        setbuldVersion(meta.buildVersion);\r\n        if (shouldForceRefresh) {\r\n          setIsLatestBuildDate(false);\r\n          refreshCacheAndReload();\r\n        } else {\r\n          setIsLatestBuildDate(true);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <><span className=\"build-version\">v{buldVersion}</span></>\r\n  );\r\n}\r\n\r\nexport default WithClearCache;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\AppInitializer.tsx",["842","843","844","845"],"import React,{useState,useEffect} from 'react';\r\nimport client from './services/client';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {login,logout} from './store/actions';\r\nimport { Icon, LinearProgress } from '@material-ui/core';\r\n\r\nimport logo from './assets/images/logo.png';\r\n\r\nconst AppInitializer = (props:any)=>{\r\n    const dispatch = useDispatch();\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const isInitialized = useSelector((state:any)=>state.init);\r\n\r\n    const verifyToken = async()=>{\r\n        let auth:any = localStorage.getItem('auth');\r\n        if(auth){\r\n            let user = JSON.parse(auth);\r\n            let res:any = await client.post('/auth/verifyToken',{token:user.token,UserID:user.UserID});\r\n            \r\n            if(res.error){\r\n                window.snakAlert.error(res.message);\r\n            }else{\r\n                if(res.success && res.data){\r\n                    // dispath login\r\n                    dispatch(login(res.data));\r\n                }else{\r\n                    dispatch(logout());\r\n                }\r\n            }\r\n        }else{\r\n            dispatch(logout());\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(!isLogin){\r\n            verifyToken();   \r\n            document.body.classList.add('bg-gradient');\r\n        }else{\r\n            document.body.classList.remove('bg-gradient');\r\n        }\r\n    },[isLogin])\r\n\r\n    return (\r\n        <>\r\n            {isInitialized?props.children:<SiteLoader/>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst SiteLoader = ()=>{\r\n    return (\r\n        <div className=\"site-loader\">\r\n            <div className=\"wrapper bg-gradient round-container\">\r\n                <img src={logo}/>\r\n                <LinearProgress/> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AppInitializer;\r\n\r\n","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\store\\index.ts",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\store\\actions.js",[],["846","847"],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\store\\actionTypes.js",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\Activate.tsx",["848","849","850","851","852","853","854","855","856","857"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@material-ui/core';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useParams,useHistory} from 'react-router-dom';\r\nimport client from '../services/client';\r\nimport AlertMessage from '../common/AlertMessage';\r\n\r\nimport {useSelector} from 'react-redux';\r\n\r\nconst Activate:React.FC = ()=>{\r\n    const params = useParams();\r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const history = useHistory();\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    \r\n    useEffect(() => {\r\n        if(isLogin){\r\n            history.push('/');\r\n        }\r\n        if(!params.email){\r\n            window.snakAlert.error('Activation link is not valid');\r\n        }else{\r\n            activate();  \r\n        }\r\n    }, [])\r\n    \r\n    const activate = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.post('registrations/activate',{email:params.email});\r\n        if(res && res.success){\r\n            setMessage({type:res.data.type,message:res.data.message});\r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"logo-mini\"></div>\r\n            <h1>Account Activation</h1>\r\n            \r\n            <Paper className=\"paper\">\r\n                <AlertMessage message={Message}/>\r\n            \r\n                {Message.type=='success'?\r\n                <>\r\n                    <br/><Rlink to=\"/login\">Please click here to login</Rlink>\r\n                </>\r\n                :''}\r\n\r\n                <LinearProgress style={{display: processing?'':'none' }} />\r\n            </Paper>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Activate;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\ChangePassword.tsx",["858","859","860","861","862","863","864"],"import { Button, Container, Grid, Icon, LinearProgress, TextField,Paper } from '@material-ui/core';\r\nimport React,{useState,useMemo,useEffect} from 'react';\r\nimport {Link as Rlink,useHistory,useParams} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport client from '../services/client';\r\n\r\nimport {useSelector} from 'react-redux';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport AlertMessage from '../common/AlertMessage';\r\n\r\nlet _password:string = ''; // for referencing\r\n\r\nconst ChangePassword:React.FC = ()=>{\r\n    const isLogin = useSelector((state:any)=>state.isLogin);\r\n    const history = useHistory();\r\n    const params = useParams();\r\n    const [Message,setMessage] = useState({type:'',message:''});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    const [ShowForm,setShowForm] = useState(false);\r\n\r\n\r\n    const [OldPassword,setOldPassword] = useState('');\r\n    const [NewPassword,setNewPassword] = useState('');\r\n    const [ConfirmPassword,setConfirmPassword] = useState('');\r\n    \r\n    _password = NewPassword;\r\n    \r\n    useEffect(() => {\r\n        if(isLogin){\r\n            setShowForm(true);\r\n        }else{\r\n            validateUUID();\r\n        }\r\n        \r\n        // add custom validation for confirm password\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value:string) => {\r\n            if (value !== _password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        ValidatorForm.addValidationRule('validatePassword', (value:string) => {\r\n            let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n            return regex.test(value);  \r\n        });\r\n        return ()=>{\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('validatePassword');\r\n        }\r\n    }, [])\r\n\r\n    const validateUUID = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get('user/validateUUIDLink',{uuid:params.uuid});\r\n        \r\n        if(res && res.success){\r\n            setShowForm(true);\r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        \r\n        let param:any = {};\r\n        let res:any = null;\r\n        param = {\r\n            NewPassword,ConfirmPassword,uuid:params.uuid\r\n        };\r\n        if(isLogin){\r\n            param = {...param,OldPassword};\r\n        }\r\n        res = await client.post('user/changePassword',param);    \r\n        if(res && res.success){\r\n            if(isLogin){\r\n                history.push(\"/myAccount\");\r\n                window.snakAlert.success(res.data);\r\n            }else{\r\n                setMessage({type:'success',message:res.data});\r\n            }\r\n            \r\n        }else{\r\n            setMessage({type:'error',message:res.message});\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <div className={!isLogin?'login':''}>\r\n            {isLogin?'':<div className=\"logo-mini\"></div>}\r\n            \r\n            <h1>Update Password</h1>\r\n            <Paper className={!isLogin?'paper':'section mt-10'}>\r\n                <AlertMessage message={Message}/>\r\n\r\n                {ShowForm?\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container>\r\n                            <Grid item md={isLogin?6:12} sm={12} xs={12}>\r\n                                {isLogin?\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    type=\"password\"\r\n                                    label=\"Old Password\"\r\n                                    name=\"OldPassword\"\r\n                                    onChange={(e:any)=>{ setOldPassword(e.target.value) }}\r\n                                    validators={['required']}\r\n                                    errorMessages={['Password is required']}\r\n                                    value={OldPassword}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 50 }}\r\n                                />\r\n                                :''}\r\n                                \r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    type=\"password\"\r\n                                    label=\"New Password\"\r\n                                    name=\"NewPassword\"\r\n                                    onChange={(e:any)=>{ setNewPassword(e.target.value) }}\r\n                                    validators={['required','validatePassword']}\r\n                                    errorMessages={['Password is required','Password must be 8-16 char. long and must contain atleast one number']}\r\n                                    value={NewPassword}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 50 }}\r\n                                />\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    type=\"password\"\r\n                                    label=\"Confirm Password\"\r\n                                    name=\"ConfirmPassword\"\r\n                                    onChange={(e:any)=>{ setConfirmPassword(e.target.value) }}\r\n                                    value={ConfirmPassword}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 50 }}\r\n                                    validators={['isPasswordMatch', 'required']}\r\n                                    errorMessages={['Password mismatched','Confirm password is required']}\r\n                                />\r\n                                <br/>\r\n                                <Button disabled={processing}\r\n                                    type=\"submit\"\r\n                                    fullWidth={isLogin?false:true}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Update Password\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        \r\n                    </ValidatorForm>\r\n                :\r\n               ''\r\n                }\r\n                {!isLogin?\r\n                    <Grid container className=\"links\">\r\n                        <Grid item style={{ flex: 1 }}>\r\n                            <Rlink to=\"/resetPassword\"> Forgot your password?</Rlink>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Rlink to=\"/login\"> Login</Rlink>\r\n                        </Grid>\r\n                    </Grid>    \r\n                :''}\r\n                \r\n                <LinearProgress style={{display: processing?'':'none' }} />\r\n                <br/>\r\n            </Paper>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ChangePassword;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\AlertMessage.tsx",["865","866"],"import React,{useState,useEffect,memo} from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { AlertTitle } from '@material-ui/lab';\r\n\r\nconst AlertMessage:React.FC<any> = (props:any)=>{\r\n    \r\n    const [state,setState]:any = useState({type:props.message.type,message:props.message.message});\r\n    \r\n    useEffect(() => {\r\n        setState({type:props.message.type,message:props.message.message});\r\n    }, [props])\r\n\r\n    return (\r\n        <>\r\n        {state.type!=''?\r\n            <Alert severity={state.type}>\r\n                <AlertTitle style={{textTransform:'capitalize'}}>{state.type}</AlertTitle>\r\n                {state.message}\r\n            </Alert>\r\n        :''}\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AlertMessage;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\index.tsx",["867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport util from '../../../services/util';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\n\r\nconst Users:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/users/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User deletion\",`Delete selected user with name \"${row.FullName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/users/remove/\",{id:row.UserID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User Activation\",`Activate selected user with name \"${row.FullName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/users/activate/\",{id:row.UserID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Users <span>List of all users</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Users;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\Listing.tsx",["889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n          name: 'Full Name',\r\n          selector: 'FullName',\r\n          compact:true,\r\n          //width:'170px',\r\n        },  \r\n        {\r\n            name: 'Email',\r\n            selector: 'Email',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Organisation Name',\r\n            selector: 'OrganisationName',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Telephone',\r\n            selector: 'TelephoneNo',\r\n            compact:true,\r\n            hide:600,\r\n            //width:'170px',\r\n        },\r\n        {\r\n            name: 'Active',\r\n            selector: 'Active',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.Active?'True':'False'}</>\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateModified',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'Modified By',\r\n            //selector: 'FullName',\r\n            compact:true,\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.ModifiedByUser?row.ModifiedByUser.FullName:''}</>\r\n        },\r\n        {\r\n            name: '',\r\n            //selector: 'MPID',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                <Tooltip title=\"Edit\" >\r\n                    <IconButton size=\"small\" className=\"action\" component={RLink} to={`/admin/user/${row.UserID}`}>\r\n                        <Icon className=\"icon-green\">edit</Icon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            \r\n                {row.Deleted?\r\n                    <Tooltip title=\"Activate\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                            <Icon className=\"icon-red\">undo</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                :\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                            <Icon className=\"icon-red\">delete_forever</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                \r\n                \r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Organisation Name:</span>\r\n                    <div className=\"value\"> {data.OrganisationName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Email:</span>\r\n                    <div className=\"value\"> {data.Email} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Telephone No:</span>\r\n                    <div className=\"value\"> {data.TelephoneNo} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'True':'False'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser.FullName} </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\Filter.tsx",["910"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name / Email\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"inactive\" key=\"inactive\">In Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button>\r\n            </Grid> \r\n             \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\users\\form.tsx",["911"],"import { Button, Grid, LinearProgress, Paper } from '@material-ui/core';\r\nimport React,{useState,useEffect } from 'react';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useHistory} from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport client from '../../../services/client';\r\n\r\nconst UserForm:React.FC = ()=>{\r\n    const param = useParams();\r\n    const history = useHistory();\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    \r\n    const [Email,setEmail] = useState('');\r\n    const [FullName,setFullName] = useState('');\r\n    const [OrganisationName,setOrganisationName] = useState('');\r\n    const [TelephoneNo,setTelephoneNo] = useState('');\r\n\r\n    const setData = (data:any)=>{\r\n        if(data){\r\n            setEmail(data.Email);\r\n            setFullName(data.FullName);\r\n            setOrganisationName(data.OrganisationName);\r\n            setTelephoneNo(data.TelephoneNo);\r\n        }else{\r\n            setEmail('');\r\n            setFullName('');\r\n            setOrganisationName('');\r\n            setTelephoneNo('');\r\n        }\r\n    }\r\n\r\n    const getRecord = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/users/get/\",{id:param.id});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData(null);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            Email,FullName,OrganisationName,TelephoneNo,\r\n            id:param.id\r\n        }\r\n        let res:any = await client.post(\"admin/users/update/\",params);\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                window.snakAlert.success(res.data);\r\n                history.push('/admin/users');\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRecord();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h2>Users <span>Update user information</span></h2>\r\n            \r\n            {Email?\r\n            <>\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    User Email: <strong>{Email}</strong>\r\n                </Paper>\r\n                <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"First Name\"\r\n                                        name=\"FullName\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setFullName(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Name is required']}\r\n                                        value={FullName}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Organization Name\"\r\n                                        name=\"OrganisationName\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setOrganisationName(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Organization name is required']}\r\n                                        value={OrganisationName}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Telephone No\"\r\n                                        name=\"TelephoneNo\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setTelephoneNo(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Phone is required']}\r\n                                        value={TelephoneNo}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 20 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12}>\r\n                                    <br/>\r\n                                    <Button disabled={processing}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\">Submit</Button>\r\n                                    &nbsp; &nbsp;\r\n                                    <Button\r\n                                        component={RLink}\r\n                                        to=\"/admin/users\"\r\n                                        variant=\"contained\"\r\n                                        >Calcel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>                        \r\n                    </ValidatorForm>\r\n                </Paper>\r\n            </>\r\n            :''    \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserForm;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\index.tsx",["912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport util from '../../../services/util';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\n\r\nconst AdminUsers:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/admin-users/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User deletion\",`Delete selected user with name \"${row.FullName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/admin-users/remove/\",{id:row.UserID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"User Activation\",`Activate selected user with name \"${row.FullName}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/admin-users/activate/\",{id:row.UserID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Admin Users <span>List of all admin users</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminUsers;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\Listing.tsx",["934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n          name: 'Full Name',\r\n          selector: 'FullName',\r\n          compact:true,\r\n          //width:'170px',\r\n        },  \r\n        {\r\n            name: 'Email',\r\n            selector: 'Email',\r\n            compact:true,\r\n            //width:'170px',\r\n            hide:600,\r\n        },\r\n        {\r\n            name: 'Active',\r\n            selector: 'Active',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.Active?'True':'False'}</>\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateModified',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'Modified By',\r\n            selector: 'FullName',\r\n            compact:true,\r\n            hide:1200,\r\n            //cell:(row:any)=><>{u.format.datetime(row.ModifiedBy)}</>\r\n        },\r\n        {\r\n            name: '',\r\n            //selector: 'MPID',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                <Tooltip title=\"Edit\" >\r\n                    <IconButton size=\"small\" className=\"action\" component={RLink} to={`/admin/admin-user/doc/${row.UserID}`}>\r\n                        <Icon className=\"icon-green\">edit</Icon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            \r\n                {row.Deleted?\r\n                    <Tooltip title=\"Activate\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                            <Icon className=\"icon-red\">undo</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                :\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                            <Icon className=\"icon-red\">delete_forever</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                \r\n                \r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Email:</span>\r\n                    <div className=\"value\"> {data.Email} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'True':'False'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser.FullName} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\Filter.tsx",["955"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [UserType,setUserType] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({userType:UserType,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        setUserType('active');\r\n        props.onSearch({userType:'active',term:'',page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name / Email\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setUserType(e.target.value)}}\r\n                        value={UserType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button variant=\"contained\" color=\"primary\" component={RLink} to=\"/admin/admin-user/doc\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\adminUsers\\form.tsx",["956","957","958","959","960","961","962","963"],"import { Button, Checkbox, FormControlLabel, FormGroup, Grid, LinearProgress, Paper } from '@material-ui/core';\r\nimport React,{useState,useEffect } from 'react';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useHistory} from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport client from '../../../services/client';\r\n\r\nlet _password:string = ''; // for referencing\r\n\r\nconst AdminUserForm:React.FC = ()=>{\r\n    const param = useParams();\r\n    const history = useHistory();\r\n\r\n    const mode = param.id?'update':'create';\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [Email,setEmail] = useState('');\r\n    const [FullName,setFullName] = useState('');\r\n    const [ChangePassword,setChangePassword] = useState(false);\r\n    const [Password,setPassword] = useState('');\r\n    const [ConfirmPassword,setConfirmPassword] = useState('');\r\n\r\n    _password = Password;\r\n    \r\n    const setData = (data:any)=>{\r\n        if(data){\r\n            setEmail(data.Email);\r\n            setFullName(data.FullName);\r\n        }else{\r\n            setEmail('');\r\n            setFullName('');\r\n        }\r\n    }\r\n\r\n    const getRecord = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/admin-users/get/\",{id:param.id});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData(null);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            Email,FullName,ChangePassword,Password,\r\n            id:param.id\r\n        }\r\n        let res:any = null;\r\n\r\n        if(mode == 'update')\r\n            res = await client.post(\"admin/admin-users/update/\",params);\r\n        else\r\n            res = await client.post(\"admin/admin-users/create/\",params);\r\n\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                history.push('/admin/admin-users')\r\n                window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mode == 'update')\r\n            getRecord();\r\n        \r\n        // add custom validation for confirm password\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value:string) => {\r\n            if (value !== _password) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        ValidatorForm.addValidationRule('validatePassword', (value:string) => {\r\n            let regex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/;\r\n            return regex.test(value);  \r\n        });\r\n        return ()=>{\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('validatePassword');\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h2>Admin Users <span>  {mode=='update'?'Update User':'Create User'} </span></h2>\r\n            \r\n            <>\r\n                {mode=='update'?\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    User Email: <strong>{Email}</strong>\r\n                </Paper>\r\n                :''}\r\n                <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Full Name\"\r\n                                        name=\"FullName\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setFullName(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Name is required']}\r\n                                        value={FullName}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    label=\"Email\"\r\n                                    name=\"Email\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ setEmail(e.target.value) }}\r\n                                    validators={['required','isEmail']}\r\n                                    errorMessages={['Email is required','Email is not valid']}\r\n                                    value={Email}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 100 }}\r\n                                />\r\n                                {mode == 'update'?\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <FormGroup row>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"primary\" \r\n                                                checked={ChangePassword} \r\n                                                onChange={(e:any)=>{setChangePassword(e.target.checked)}} name=\"checkedA\" />}\r\n                                                label=\"Change Password\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                :''}\r\n                                \r\n                                {((mode=='update' && ChangePassword) || (mode=='create') )?\r\n                                <>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        type=\"password\"\r\n                                        label=\"New Password\"\r\n                                        name=\"Password\"\r\n                                        onChange={(e:any)=>{ setPassword(e.target.value) }}\r\n                                        validators={['required','validatePassword']}\r\n                                        errorMessages={['Password is required','Password must be 8-16 char. long and must contain atleast one number']}\r\n                                        value={Password}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 50 }}\r\n                                    />\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        type=\"password\"\r\n                                        label=\"Confirm Password\"\r\n                                        name=\"ConfirmPassword\"\r\n                                        onChange={(e:any)=>{ setConfirmPassword(e.target.value) }}\r\n                                        value={ConfirmPassword}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 50 }}\r\n                                        validators={['isPasswordMatch', 'required']}\r\n                                        errorMessages={['Password mismatched','Confirm password is required']}\r\n                                    />    \r\n                                </>    \r\n                                :''\r\n                                }\r\n                                \r\n                                <Grid item md={12}>\r\n                                    <br/>\r\n                                    <Button disabled={processing}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\">Submit</Button>\r\n                                    &nbsp; &nbsp;\r\n                                    <Button\r\n                                        component={RLink}\r\n                                        to=\"/admin/admin-users\"\r\n                                        variant=\"contained\"\r\n                                        >Calcel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>                        \r\n                    </ValidatorForm>\r\n                </Paper>\r\n            </>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminUserForm;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\vendors\\index.tsx",["964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport util from '../../../services/util';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Listing from './Listing';\r\n\r\n\r\nconst Vendors:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    //const [filters,setFilters] = useState({});\r\n    //const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/vendors/list\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        //if(Object.keys(filters).length > 0)\r\n        search();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        search();\r\n        //setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Vendors <span>List of all vendors</span></h2>\r\n        \r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    />      \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Vendors;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\vendors\\Listing.tsx",["985","986","987","988","989","990","991","992","993","994","995","996","997","998"],"import { Box, Breadcrumbs, Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport client from '../../../services/client';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [VDialog,setVDialog]:any = useState({show:false,row:{}});\r\n    const handlerShowGrid = (row:any)=>{\r\n        setVDialog({show:true,row:row});\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'ID',\r\n            selector: 'VendorID',\r\n            compact:true,\r\n            width:'60px',\r\n        }, \r\n        {\r\n          name: 'Code',\r\n          selector: 'VendorCode',\r\n          compact:true,\r\n          width:'100px',\r\n        },  \r\n        {\r\n            name: 'Vendor Name',\r\n            selector: 'Name',\r\n            compact:true,\r\n            //width:'170px',\r\n            cell:(row:any)=><>\r\n                <strong style={{cursor:'pointer'}} onClick={()=>{handlerShowGrid(row)}}>\r\n                    {row.VendorName}\r\n                </strong>\r\n            </>\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateModified',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:700,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'Modified By',\r\n            //selector: 'DateUpdated',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:700,\r\n            cell:(row:any)=><>{row.ModifiedByUser.FullName}</>\r\n        }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data}\r\n            highlightOnHover={true}\r\n            //pagination={true}\r\n            //paginationServer={true}\r\n            //paginationTotalRows={props.data.count}\r\n            //paginationPerPage={props.rowPerPage}\r\n            //paginationComponentOptions={ {noRowsPerPage: true}}\r\n            //paginationDefaultPage={1}\r\n            //paginationResetDefaultPage={1==1}\r\n            //onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            //expandableRows\r\n            //expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n        />\r\n        <VendorNameDialog dialog={VDialog}\r\n            close={()=>{setVDialog({...VDialog,show:false})}}\r\n            refreshGrid={props.onPagingChange}\r\n        />  \r\n        </>\r\n    )\r\n}\r\n/*\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Full Name:</span>\r\n                    <div className=\"value\"> {data.FullName} </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\nconst VendorNameDialog = (props:any)=>{\r\n    const [Name,setName] = useState('');\r\n    const [processing,setProcessing] = useState(false);\r\n    \r\n    const handlerUpdate = async()=>{\r\n\r\n        setProcessing(true);\r\n\r\n        let res:any = await client.post(\"admin/vendors/update/\",{id:props.dialog.row.VendorID,VendorName:Name});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            props.refreshGrid();\r\n            window.snakAlert.success(res.data);\r\n            props.close();\r\n        }\r\n        setProcessing(false);\r\n        \r\n    }\r\n\r\n    const handlerClose = ()=>{\r\n        props.close();\r\n    }\r\n\r\n    useEffect(() => {\r\n        setName(props.dialog.row.VendorName)\r\n    }, [props])\r\n\r\n    return (\r\n        <Dialog className=\"modal-dialog\" fullWidth={true} aria-labelledby=\"customized-dialog-title\" open={props.dialog.show}>\r\n            <DialogTitle id=\"customized-dialog-title\"><Icon>menu_book</Icon> Update Vendor</DialogTitle>\r\n            <DialogContent dividers>\r\n                <Grid container spacing={2} >\r\n                    <Grid item sm={12} md={12}> \r\n                        <TextField label=\"Vendor Name\"  type=\"text\"  variant=\"outlined\" fullWidth size=\"small\" \r\n                            value={Name}\r\n                            onChange={(e:any)=>{setName(e.target.value)}}\r\n                            inputProps={{maxlength:15}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handlerClose} variant=\"contained\">Cancle</Button>\r\n                <Button onClick={handlerUpdate} autoFocus color=\"primary\" variant=\"contained\">Update</Button>\r\n            </DialogActions>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\PaypalCheckoutDialog.tsx",["999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009"],"import { Button, DialogActions, DialogContent, DialogTitle, Grid, Icon, LinearProgress, TextField } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport CurrencyTextField from '@unicef/material-ui-currency-textfield';\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport client from '../services/client';\r\nimport u from '../services/util';\r\n\r\nimport {PRICING_TYPE} from '../const';\r\n\r\ndeclare const window: any;\r\n\r\nconst PayPalButton = window.paypal.Buttons.driver(\"react\", { React, ReactDOM });\r\n\r\n//let _paypalButton:any = null;\r\nconst PaypalCheckoutDialog = (props:any)=>{\r\n    \r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [ID,setID] = useState('');\r\n    const [Package,setPackage]:any = useState({});\r\n    const [PackageAmount,setPackageAmount]:any = useState(0);\r\n    const [APIQuantity,setAPIQuantity] = useState(1);\r\n    \r\n    // show check out button if true\r\n    const [checkOutPage,setCheckOutPage] = useState(false);\r\n\r\n    // OrderID\r\n    const [OrderID,setOrderID] = useState(0);\r\n\r\n    const calc = (quantity:any,amount:any) =>{\r\n        return (parseInt(quantity)*amount).toFixed(2);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(window.paypal && props.dialog.open){\r\n            setID(`paypal-button-container_`+ (new Date()).getTime().toString());\r\n            if(props.dialog.row){\r\n                setPackage(props.dialog.row);\r\n                if(props.dialog.row.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION){\r\n                    setPackageAmount(props.dialog.row.PackagePrice);\r\n                }else{\r\n                    setPackageAmount(calc(APIQuantity,props.dialog.row.PricePerAPICall));\r\n                }\r\n                setCheckOutPage(false);\r\n            }\r\n        }\r\n        \r\n    }, [props]);\r\n \r\n \r\n    const createOrder = (data, actions) =>{\r\n        let desc = Package.PackageCode;\r\n        if(Package.PricingType == PRICING_TYPE.PAY_AS_YOU_GO){\r\n            desc += ` (API Quantity: ${APIQuantity})`; \r\n        }\r\n        return actions.order.create({\r\n            purchase_units: [\r\n            {\r\n                amount: {\r\n                    value:PackageAmount,\r\n                },\r\n                description:desc\r\n            },\r\n            ],\r\n        });\r\n    };\r\n    \r\n    const onApprove = (data, actions) => {\r\n        return actions.order.capture().then(function(details) {\r\n            window.snakAlert.success(\"Transaction completed successfully. Your subscription will be available soon.\")\r\n            props.close();\r\n        });\r\n    };\r\n\r\n    return(\r\n        <Dialog className=\"modal-dialog\" fullWidth={true} aria-labelledby=\"customized-dialog-title\" open={props.dialog.open}  >\r\n            <DialogTitle id=\"customized-dialog-title\"><Icon>payment</Icon> Subscription </DialogTitle>\r\n            <DialogContent dividers>\r\n                <Grid container spacing={2} style={{minHeight:'250px   '}}>\r\n                    {!checkOutPage?\r\n                    \r\n                        <Grid item sm={12} md={12} xs={12}>\r\n                            \r\n                            <p>Package:<br/>\r\n                            <strong>{Package.PackageTitle}</strong>\r\n                            </p>\r\n                            <p>Pricing Type:<br/>\r\n                            <strong>{Package.PricingType}</strong>\r\n                            </p>\r\n                            {Package.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                            <>\r\n                                <p>Package Type<br/>\r\n                                    <strong>{Package.PackageTypes.PackageType}</strong>\r\n                                </p>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <table style={{width:'100%'}}>\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <td><strong>API Quantity</strong></td>\r\n                                        <td style={{textAlign:'right'}}>\r\n                                            <CurrencyTextField\r\n                                                decimalPlaces={0}\r\n                                                currencySymbol=\"\"\r\n                                                minimumValue={1}\r\n                                                maximumValue={99999}\r\n                                                value={APIQuantity}\r\n                                                style={{width:'100px'}}\r\n                                                onChange={(event:any, value:any)=>{\r\n                                                setAPIQuantity(value);\r\n                                                let amount:any  = calc(value,Package.PricePerAPICall);\r\n                                                setPackageAmount(amount)\r\n                                            }}\r\n                                            ></CurrencyTextField>\r\n                                        </td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </>\r\n                            }\r\n                            <table style={{width:'100%',borderRadius:'6px',padding:'3px 10px',fontSize:'20px',background:'#f1f1f1'}}>\r\n                                <tbody>\r\n                                <tr>\r\n                                    <td>Total Amount</td>\r\n                                    <td style={{textAlign:'right'}}><strong>{u.format.currency(PackageAmount)}</strong></td>\r\n                                </tr>\r\n                                </tbody>\r\n                            </table>\r\n                            <br/>\r\n                            <Button style={{float:'right'}} size=\"small\" color=\"primary\" variant=\"contained\" \r\n                            onClick={()=>{\r\n                                setCheckOutPage(true)\r\n                            }}\r\n                            >Checkout</Button>\r\n                            \r\n                        </Grid>\r\n                    :   \r\n                \r\n                        <Grid item sm={12} md={12} xs={12}>\r\n                            <PayPalButton \r\n                                style={{\r\n                                    layout:  'vertical',\r\n                                    color:   'blue',\r\n                                    shape:   'rect',\r\n                                    label:   'paypal'\r\n                                }}\r\n                                createOrder={(data, actions) => createOrder(data, actions)}\r\n                                onApprove={(data, actions) => onApprove(data, actions)}\r\n                            />\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.close} variant=\"contained\">Cancle</Button>\r\n            </DialogActions>\r\n\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default PaypalCheckoutDialog;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\index.tsx",["1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport util from '../../../services/util';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\n\r\nconst PackageType:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/package-type/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Package Type\",`Delete package type \"${row.PackageType}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/package-type/remove/\",{id:row.PackageTypeID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Package Type\",`Activate selected type with name \"${row.PackageType}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/package-type/activate/\",{id:row.PackageTypeID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Package Types <span>List of all package types</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default PackageType;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\Filter.tsx",["1032"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [type,settype] = useState('active');\r\n    useEffect(()=>{\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({type:type,term:Term,page:1});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        settype('active');\r\n        props.onSearch({type:'active',term:'',page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{settype(e.target.value)}}\r\n                        value={type}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button variant=\"contained\" color=\"primary\" component={RLink} to=\"/admin/package-type/doc\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\Listing.tsx",["1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const handlerShowTagDialog = (row:any)=>{\r\n        setTagDialog({...tagDialog,open:true,row:row});\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n          name: 'Type',\r\n          selector: 'PackageType',\r\n          compact:true,\r\n          //width:'170px',\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateUpdated',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'MOdofied By',\r\n            compact:true,\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.ModifiedByUser.FullName}</>\r\n        },\r\n        {\r\n            name: '',\r\n            //selector: 'MPID',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                <Tooltip title=\"Edit\" >\r\n                    <IconButton size=\"small\" className=\"action\" component={RLink} to={`/admin/package-type/doc/${row.PackageTypeID}`}>\r\n                        <Icon className=\"icon-green\">edit</Icon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            \r\n                {row.Deleted?\r\n                    <Tooltip title=\"Activate\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                            <Icon className=\"icon-red\">undo</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                :\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                            <Icon className=\"icon-red\">delete_forever</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                \r\n                \r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n            \r\n        />\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Type:</span>\r\n                    <div className=\"value\"> {data.PackageType} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'False':'True'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser.FullName} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packageType\\form.tsx",["1054","1055","1056","1057","1058","1059","1060","1061","1062"],"import { Button, Checkbox, FormControlLabel, FormGroup, Grid, LinearProgress, Paper } from '@material-ui/core';\r\nimport React,{useState,useEffect } from 'react';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useHistory} from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport AlertMessage from '../../../common/AlertMessage';\r\nimport client from '../../../services/client';\r\n\r\n\r\nconst PackageTypeForm:React.FC = ()=>{\r\n    const param = useParams();\r\n    const history = useHistory();\r\n\r\n    const mode = param.id?'update':'create';\r\n\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    \r\n    const [PackageType,setPackageType] = useState('');\r\n    \r\n    const setData = (data:any)=>{\r\n        if(data){\r\n            setPackageType(data.PackageType);\r\n        }else{\r\n            setPackageType('');\r\n        }\r\n    }\r\n\r\n    const getRecord = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/package-type/get/\",{id:param.id});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData(null);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            PackageType,\r\n            id:param.id\r\n        }\r\n        let res:any = null;\r\n\r\n        if(mode == 'update')\r\n            res = await client.post(\"admin/package-type/update/\",params);\r\n        else\r\n            res = await client.post(\"admin/package-type/create/\",params);\r\n\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                window.snakAlert.success(res.data);\r\n                history.push('/admin/package-type')\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mode == 'update')\r\n            getRecord();\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h2>Package Type <span>{mode=='update'?'Upage':'Create'} Type</span></h2>\r\n            \r\n            <>\r\n                {mode=='update'?\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    User PackageType: <strong>{PackageType}</strong>\r\n                </Paper>\r\n                :''}\r\n                <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Package Type\"\r\n                                        name=\"PackageType\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setPackageType(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Type is required']}\r\n                                        value={PackageType}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100 }}\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={12}>\r\n                                    <br/>\r\n                                    <Button disabled={processing}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\">Submit</Button>\r\n                                    &nbsp; &nbsp;\r\n                                    <Button\r\n                                        component={RLink}\r\n                                        to=\"/admin/package-type\"\r\n                                        variant=\"contained\"\r\n                                        >Calcel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>                        \r\n                    </ValidatorForm>\r\n                </Paper>\r\n            </>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PackageTypeForm;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\form.tsx",["1063","1064","1065","1066","1067","1068","1069","1070","1071","1072"],"import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, Grid, InputLabel, LinearProgress, MenuItem, Paper, Select } from '@material-ui/core';\r\nimport React,{useState,useEffect } from 'react';\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useHistory} from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport client from '../../../services/client';\r\nimport {PRICING_TYPE} from '../../../const';\r\n\r\nimport CurrencyTextField from '@unicef/material-ui-currency-textfield';\r\n\r\nconst PackageForm:React.FC = ()=>{\r\n    const history = useHistory();\r\n    const param = useParams();\r\n    \r\n    const mode = param.id?'update':'create';\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    \r\n    const [vendors,setVendors]:any = useState([]);\r\n    const [packageTypes,setPackageTypes]:any = useState([]);\r\n\r\n    const [PackageTitle,setPackageTitle] = useState('');\r\n    const [Description,setDescription] = useState('');\r\n    const [VendorID,setVendorID] = useState(1);\r\n    const [PricingType,setPricingType] = useState(PRICING_TYPE.PAY_AS_YOU_GO);\r\n    const [PackageTypeID,setPackageTypeID] = useState(0);\r\n    const [APICallsLimit,setAPICallsLimit] = useState(0);\r\n    const [PackagePrice,setPackagePrice] = useState(0);\r\n    const [PricePerAPICall,setPricePerAPICall] = useState(0);\r\n    const [Visibility,setVisibility] = useState('Public');\r\n    \r\n    const setData = (data:any)=>{\r\n        if(data){\r\n            setPackageTitle(data.PackageTitle);\r\n            setDescription(data.Description);\r\n            setVendorID(data.VendorID);\r\n            setPricingType(data.PricingType);\r\n            setPackageTypeID(data.PackageTypeID);\r\n            setAPICallsLimit(data.APICallsLimit);\r\n            setPackagePrice(data.PackagePrice);\r\n            setPricePerAPICall(data.PricePerAPICall);\r\n            setVisibility(data.Visibility);\r\n        }\r\n    }\r\n\r\n    const getRecord = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/packages/get/\",{id:param.id});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            PackageTitle,Description,VendorID,PricingType,PackageTypeID,APICallsLimit,PackagePrice,PricePerAPICall,Visibility,\r\n            id:param.id\r\n        }\r\n        let res:any = null;\r\n\r\n        if(mode == 'update')\r\n            res = await client.post(\"admin/packages/update/\",params);\r\n        else\r\n            res = await client.post(\"admin/packages/create/\",params);\r\n\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                history.push('/admin/packages');\r\n                window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.data);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const getVendors = async()=>{\r\n        let res = await client.get(\"admin/vendors/list\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendors([])\r\n        }else{\r\n            setVendors(res.data);\r\n        }\r\n    }\r\n    const getPackageTypes = async()=>{\r\n        let res = await client.get(\"admin/package-type/activeList\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setPackageTypes([])\r\n        }else{\r\n            setPackageTypes(res.data);\r\n            if(res.data){\r\n                setPackageTypeID(res.data[0].PackageTypeID);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(mode == 'update')\r\n            getRecord();\r\n        getVendors();\r\n        getPackageTypes();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h2>Package <span>{mode=='update'?'Upage package':'Create new package'}</span></h2>\r\n            <>\r\n                {mode=='update'?\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    User PackageTitle: <strong>{PackageTitle}</strong>\r\n                </Paper>\r\n                :''}\r\n                <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Title\"\r\n                                        name=\"PackageTitle\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setPackageTitle(e.target.value) }}\r\n                                        validators={['required']}\r\n                                        errorMessages={['Type is required']}\r\n                                        value={PackageTitle}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 100,tabIndex:1 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        label=\"Description\"\r\n                                        name=\"Description\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ setDescription(e.target.value) }}\r\n                                        validators={[]}\r\n                                        errorMessages={['Type is required']}\r\n                                        value={Description}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 1000,tabIndex:2 }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12} className=\"mt-10\">\r\n                                    <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                                        <InputLabel id=\"labelVisibility\">Visibility</InputLabel>\r\n                                        <Select \r\n                                            onChange={(e:any)=>{setVisibility(e.target.value)}}\r\n                                            value={Visibility}\r\n                                            labelId=\"labelVisibility\"\r\n                                            label=\"Visibility\" inputProps={{  tabIndex:3 }}>\r\n                                            <MenuItem value={'Public'}>Public</MenuItem>\r\n                                            <MenuItem value={'Private'}>Private</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12} className=\"mt-10\">\r\n                                    <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                                        <InputLabel id=\"labelVendor\">Vendor</InputLabel>\r\n                                        <Select \r\n                                            onChange={(e:any)=>{setVendorID(e.target.value)}}\r\n                                            value={VendorID}\r\n                                            labelId=\"labelVendor\"\r\n                                            label=\"Vendor\" inputProps={{  tabIndex:3 }}>\r\n                                            {vendors && vendors.map((row:any)=>(\r\n                                                <MenuItem value={row.VendorID}>{row.VendorName}</MenuItem>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={6} xs={12} className=\"mt-16\">\r\n                                    <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                                        <InputLabel id=\"labelPricingType\">Pricing Type</InputLabel>\r\n                                        <Select \r\n                                            onChange={(e:any)=>{setPricingType(e.target.value)}}\r\n                                            value={PricingType}\r\n                                            labelId=\"labelPricingType\"\r\n                                            label=\"PricingType\"\r\n                                            inputProps={{  tabIndex:4 }}\r\n                                            >\r\n                                            <MenuItem value={PRICING_TYPE.MONTHLY_SUBSCRIBTION} key=\"monthly\">{PRICING_TYPE.MONTHLY_SUBSCRIBTION}</MenuItem>\r\n                                            <MenuItem value={PRICING_TYPE.PAY_AS_YOU_GO} key=\"pay-as-you-go\">{PRICING_TYPE.PAY_AS_YOU_GO}</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                \r\n                                {PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                                    <>\r\n                                    <Grid item md={12} xs={12} className=\"mt-16\">\r\n                                        <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                                            <InputLabel id=\"labelPackageType\">Package Type</InputLabel>\r\n                                            <Select \r\n                                                onChange={(e:any)=>{setPackageTypeID(e.target.value)}}\r\n                                                value={PackageTypeID}\r\n                                                labelId=\"labelPackageType\"\r\n                                                label=\"PackageType\"\r\n                                                inputProps={{  tabIndex:5 }}>\r\n                                                {packageTypes && packageTypes.map((row:any)=>(\r\n                                                    <MenuItem value={row.PackageTypeID}>{row.PackageType}</MenuItem>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12} className=\"mt-10\">\r\n                                        <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"API Calls Limit\"\r\n                                            name=\"APICallsLimit\"\r\n                                            autoFocus\r\n                                            type=\"number\"\r\n                                            onChange={(e:any)=>{ \r\n                                                let value = e.target.value;\r\n                                                if(value.length > 6) return;\r\n                                                if(value > 999999){\r\n                                                    value = 999999; \r\n                                                }\r\n                                                if(value <=0)\r\n                                                    value = 0;\r\n\r\n                                                setAPICallsLimit(value) \r\n                                            }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['Type is required']}\r\n                                            value={APICallsLimit}\r\n                                            disabled={processing}\r\n                                             \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12} className=\"mt-10\">\r\n                                        <CurrencyTextField\r\n                                            label=\"Package Price\"\r\n                                            variant=\"outlined\"\r\n                                            value={PackagePrice}\r\n                                            currencySymbol=\"\"\r\n                                            outputFormat=\"string\"\r\n                                            disabled={processing}\r\n                                            fullWidth\r\n                                            inputProps={{tabIndex:7}}\r\n                                            onChange={(event, value)=> setPackagePrice(value)}\r\n                                        ></CurrencyTextField>\r\n                                        \r\n                                    </Grid>\r\n                                    </>\r\n                                :\r\n                                    <Grid item md={12} xs={12} className=\"mt-16\">\r\n                                        <CurrencyTextField\r\n                                            label=\"Price Per API Call\"\r\n                                            variant=\"outlined\"\r\n                                            value={PricePerAPICall}\r\n                                            currencySymbol=\"\"\r\n                                            outputFormat=\"string\"\r\n                                            disabled={processing}\r\n                                            fullWidth\r\n                                            inputProps={{tabIndex:5}}\r\n                                            onChange={(event, value)=> setPricePerAPICall(value)}\r\n                                        ></CurrencyTextField>\r\n                                    </Grid>\r\n                                }                                \r\n                                <Grid item md={12}>\r\n                                    <br/>\r\n                                    <Button disabled={processing}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\">Submit</Button>\r\n                                    &nbsp; &nbsp;\r\n                                    <Button\r\n                                        component={RLink}\r\n                                        to=\"/admin/packages\"\r\n                                        variant=\"contained\"\r\n                                        >Calcel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>                        \r\n                    </ValidatorForm>\r\n                </Paper>\r\n            </>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PackageForm;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\index.tsx",["1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport util from '../../../services/util';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\n\r\nconst Packages:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/packages/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Packages\",`Delete package \"${row.PackageTitle}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/packages/remove/\",{id:row.PackageID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Packages\",`Activate selected package with name \"${row.PackageTitle}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/packages/activate/\",{id:row.PackageID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Packages <span>List of all package</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Packages;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\Filter.tsx",["1095"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {PRICING_TYPE} from '../../../const';\r\nimport client from '../../../services/client';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [type,settype] = useState('active');\r\n    const [pricingType,setpricingType] = useState(\"\");\r\n    const [vendors,setVendors]:any = useState([]);\r\n    const [vendorId,setvendorId]:any = useState(0);\r\n\r\n    const getVendors = async()=>{\r\n        let res = await client.get(\"admin/vendors/list\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendors([])\r\n        }else{\r\n            setVendors(res.data);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getVendors();\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({type:type,term:Term,page:1,vendorId,pricingType});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        settype('active');\r\n        props.onSearch({type:'active',term:'',vendorId:0,pricingType:'',page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name / Code\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{settype(e.target.value)}}\r\n                        value={type}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Pricing</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setpricingType(e.target.value)}}\r\n                        value={pricingType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        <MenuItem value={PRICING_TYPE.MONTHLY_SUBSCRIBTION} key=\"monthly\">{PRICING_TYPE.MONTHLY_SUBSCRIBTION}</MenuItem>\r\n                        <MenuItem value={PRICING_TYPE.PAY_AS_YOU_GO} key=\"pay-as-you-go\">{PRICING_TYPE.PAY_AS_YOU_GO}</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Vendor</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setvendorId(e.target.value)}}\r\n                        value={vendorId}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        {\r\n                            vendors && vendors.map((row)=>(\r\n                                <MenuItem value={row.VendorID} key=\"monthly\">{row.VendorName}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button>\r\n            </Grid> \r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button variant=\"contained\" color=\"primary\" component={RLink} to=\"/admin/packages/doc\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\packages\\Listing.tsx",["1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {PRICING_TYPE} from '../../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const columns = [\r\n        {\r\n            name: 'Code',\r\n            selector: 'PackageCode',\r\n            compact:true,\r\n            width:'90px',\r\n        },\r\n        {\r\n          name: 'Title',\r\n          selector: 'PackageTitle',\r\n          compact:true,\r\n          width:'220px',\r\n        },\r\n        {\r\n            name: 'Vendor',\r\n            selector: 'Vendors.VendorName',\r\n            compact:true,\r\n        },\r\n        {\r\n            name: 'Pricing Type',\r\n            selector: 'PricingType',\r\n            compact:true,\r\n        },\r\n        {\r\n            name: 'Package Type',\r\n            compact:true,\r\n            cell:(row:any)=><>{row.PackageTypes?row.PackageTypes.PackageType:''}</>\r\n        },\r\n        {\r\n            name: 'Visibility',\r\n            selection:'Visibility',\r\n            compact:true,\r\n            cell:(row:any)=><>{row.Visibility}</>\r\n        },\r\n        {\r\n            name: 'Amount',\r\n            //selector: 'PackageTypes.PackageType',\r\n            compact:true,\r\n            cell:(row:any)=><>{\r\n                (row.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION)?`${u.format.currency(row.PackagePrice)} / Package`:`${u.format.currency(row.PricePerAPICall)} / API`}</>\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateModified',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'Modofied By',\r\n            compact:true,\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.ModifiedByUser.FullName}</>\r\n        },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                <Tooltip title=\"Edit\" >\r\n                    <IconButton size=\"small\" className=\"action\" component={RLink} to={`/admin/packages/doc/${row.PackageID}`}>\r\n                        <Icon className=\"icon-green\">edit</Icon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            \r\n                {row.Deleted?\r\n                    <Tooltip title=\"Activate\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                            <Icon className=\"icon-red\">undo</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                :\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                            <Icon className=\"icon-red\">delete_forever</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Title:</span>\r\n                    <div className=\"value\"> {data.PackageTitle} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Description:</span>\r\n                    <div className=\"value\"> {data.Description} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'False':'True'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Vendor:</span>\r\n                    <div className=\"value\"> {data.Vendors.VendorName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Pricing Type:</span>\r\n                    <div className=\"value\"> {data.PricingType} </div>\r\n                </div>\r\n                {data.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                <>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Package Type:</span>\r\n                        <div className=\"value\"> {data.PackageTypes.PackageType} </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">API Calls Limit:</span>\r\n                        <div className=\"value\"> {data.APICallsLimit} </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Package Price:</span>\r\n                        <div className=\"value\"> {data.PackagePrice} </div>\r\n                    </div>\r\n                </>\r\n                :\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Price Per API Call:</span>\r\n                        <div className=\"value\"> {data.PricePerAPICall} </div>\r\n                    </div>\r\n                }\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser.FullName} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\const.js",[],"D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\packageList\\index.tsx",["1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../services/client';\r\nimport util from '../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\n\r\nconst Packages:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/packages/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Packages\",`Delete package \"${row.PackageTitle}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/packages/remove/\",{id:row.PackageID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n     \r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Packages <span>List of all package</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                     \r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Packages;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\packageList\\Filter.tsx",["1141","1142"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {PRICING_TYPE} from '../../const';\r\nimport client from '../../services/client';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [pricingType,setpricingType] = useState(\"\");\r\n    const [vendors,setVendors]:any = useState([]);\r\n    const [vendorId,setvendorId]:any = useState(0);\r\n\r\n    const getVendors = async()=>{\r\n        let res = await client.get(\"admin/vendors/list\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendors([])\r\n        }else{\r\n            setVendors(res.data);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getVendors();\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({type:'active',term:Term,page:1,vendorId,pricingType});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        props.onSearch({type:'active',term:'',vendorId:0,pricingType:'',page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Name\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelPricingType\">Pricing Type</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setpricingType(e.target.value)}}\r\n                        value={pricingType}\r\n                        labelId=\"labelPricingType\"\r\n                        label=\"PricingType\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        <MenuItem value={PRICING_TYPE.MONTHLY_SUBSCRIBTION} key=\"monthly\">{PRICING_TYPE.MONTHLY_SUBSCRIBTION}</MenuItem>\r\n                        <MenuItem value={PRICING_TYPE.PAY_AS_YOU_GO} key=\"pay-as-you-go\">{PRICING_TYPE.PAY_AS_YOU_GO}</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Vendor</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setvendorId(e.target.value)}}\r\n                        value={vendorId}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        {\r\n                            vendors && vendors.map((row)=>(\r\n                                <MenuItem value={row.VendorID} key=\"monthly\">{row.VendorName}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\packageList\\Listing.tsx",["1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport PaypalCheckoutDialog from '../../common/PaypalCheckoutDialog';\r\n\r\nimport {PRICING_TYPE} from '../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [PaypalDialog,setPaypalDialog] = useState({open:false,row:{}});\r\n\r\n    const columns = [\r\n        {\r\n          name: 'Title',\r\n          selector: 'PackageTitle',\r\n          compact:true,\r\n          width:'220px',\r\n        },\r\n        {\r\n            name: 'Vendor',\r\n            selector: 'Vendors.VendorName',\r\n            compact:true,\r\n        },\r\n        {\r\n            name: 'Pricing Type',\r\n            selector: 'PricingType',\r\n            compact:true,\r\n            hide:800,\r\n        },\r\n        {\r\n            name: 'Package Type',\r\n            compact:true,\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.PackageTypes?row.PackageTypes.PackageType:''}</>,\r\n        },\r\n        {\r\n            name: 'Amount',\r\n            //selector: 'PackageTypes.PackageType',\r\n            compact:true,\r\n            hide:360,\r\n            cell:(row:any)=><>{\r\n                (row.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION)?`${u.format.currency(row.PackagePrice)} / Package`:`${u.format.currency(row.PricePerAPICall)} / API`}</>\r\n        },\r\n         \r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                 <div className=\"in-grid-add-cart\">\r\n                     <div className=\"wrapper\">\r\n                        <Button size=\"small\" className=\"btn-add-to-cart\" variant=\"contained\" color=\"primary\"\r\n                            onClick={()=>{\r\n                                setPaypalDialog({open:true,row:row})\r\n                            }}\r\n                        >Subscribe</Button>\r\n                    </div>\r\n                </div>\r\n             \r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n        />\r\n        <PaypalCheckoutDialog\r\n            dialog={PaypalDialog}\r\n            close={()=>{\r\n                setPaypalDialog({...PaypalDialog,open:false})\r\n            }}\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Title:</span>\r\n                    <div className=\"value\"> {data.PackageTitle} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Description:</span>\r\n                    <div className=\"value\"> {data.Description} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Active:</span>\r\n                    <div className=\"value\"> {data.Active?'False':'True'} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Vendor:</span>\r\n                    <div className=\"value\"> {data.Vendors.VendorName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Pricing Type:</span>\r\n                    <div className=\"value\"> {data.PricingType} </div>\r\n                </div>\r\n                {data.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                <>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Package Type:</span>\r\n                        <div className=\"value\"> {data.PackageTypes.PackageType} </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">API Calls Limit:</span>\r\n                        <div className=\"value\"> {data.APICallsLimit} </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Package Price:</span>\r\n                        <div className=\"value\"> {data.PackagePrice} </div>\r\n                    </div>\r\n                </>\r\n                :\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Price Per API Call:</span>\r\n                        <div className=\"value\"> {data.PricePerAPICall} </div>\r\n                    </div>\r\n                }\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser.FullName} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\index.tsx",["1168"],"import { Paper } from '@material-ui/core';\r\nimport { Filter } from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nconst HomePage = ()=>{\r\n    return(\r\n        <>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <h1 style={{textAlign:'center'}}>Welcome to Complience Search</h1>        \r\n            </Paper>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomePage;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\index.tsx",["1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport {VERIPHY_APIS} from '../../const';\r\n\r\nimport IDAML from './IDAML';\r\nimport Lawyer from './Lawyer';\r\nimport Company from './Company';\r\nimport SubscriptionValidator from '../../common/SubscriptionValidator';\r\n\r\nconst Veriphy = ()=>{\r\n    const [Service,setService]:any = useState({Type:'',ServiceCode:''});\r\n \r\n    useEffect(()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    },[]);\r\n\r\n    const HandlerOnBack = ()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    }\r\n    \r\n\r\n    \r\n    return (\r\n        <>\r\n            <SubscriptionValidator>\r\n                {Service && Service.Type==''?\r\n                    <>\r\n                        <h1>Veriphy Check List</h1>\r\n                        <Paper elevation={0} className=\"section mt-10\">\r\n                            <Grid spacing={1} container>\r\n                                {VERIPHY_APIS && VERIPHY_APIS.map((service:any,index:number)=>(\r\n                                    <>\r\n                                        <Grid item lg={3} md={4} sm={4} xs={12} key={index}>\r\n                                            <div className=\"box-wraper\">\r\n                                                <div className=\"box\" style={{minHeight:'120px'}}>\r\n                                                    <h2>{service.Name}</h2>\r\n                                                    <p>{service.Title}</p>\r\n                                                    <p className=\"note\">{service.Short}</p>\r\n                                                </div>\r\n                                                <Button variant=\"contained\" fullWidth \r\n                                                    onClick={()=>{\r\n                                                        setService({Type:service.Type,ServiceCode:service.ServiceCode})\r\n                                                    }}\r\n                                                >Go</Button>\r\n                                            </div>\r\n                                        </Grid>    \r\n                                    </>\r\n                                ))}\r\n                                \r\n                            </Grid>\r\n                        </Paper>    \r\n                    </>\r\n                    :\r\n                    <>\r\n                        <ServicePage onBack={HandlerOnBack} Service = {Service}/>\r\n                    </>\r\n                }\r\n            </SubscriptionValidator>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ServicePage:any = (props:any)=>{\r\n    const getService = ()=>{\r\n        let Service:any = VERIPHY_APIS.filter((service:any)=>{\r\n            return service.ServiceCode == props.Service.ServiceCode;\r\n        });\r\n        if(Service) return Service[0];\r\n    }\r\n\r\n    let Service:any = getService();\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"serviceHeading\">{Service.Title}</h1>\r\n            <div style={{textAlign:'right'}}>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={props.onBack}>&lt;&lt; Back</Button>\r\n            </div>\r\n                        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Grid container>\r\n                    <Grid item md={12}>\r\n                        \r\n                        {Service.Desc && Service.Desc.map((desc:string,index:number)=>(\r\n                            <p key={index}>{desc}</p>\r\n                        ))}\r\n                    \r\n                    </Grid>\r\n                </Grid>\r\n                <ServiceSwitcher Service={props.Service}/>\r\n            </Paper>\r\n        </>\r\n    );    \r\n}\r\n\r\nconst ServiceSwitcher = (props:any)=>{\r\n    switch(props.Service.Type){\r\n        case \"IDAML\":\r\n            return <IDAML ServiceCode={props.Service.ServiceCode}/>;\r\n        case \"Company\":\r\n            return <Company ServiceCode={props.Service.ServiceCode}/>;\r\n        case \"Lawyer\":\r\n            return <Lawyer ServiceCode={props.Service.ServiceCode}/>;\r\n        default:\r\n            return <h4>Service not found</h4>;\r\n    }\r\n}\r\n\r\nexport default Veriphy;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\Lawyer.tsx",["1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport {VERIPHY_APIS} from '../../const';\r\n\r\nconst Company = (props:any)=>{\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n             Lawyer\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Company;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\Company.tsx",["1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport {VERIPHY_APIS} from '../../const';\r\n\r\nconst Company = (props:any)=>{\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n             Company\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Company;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\IDAML.tsx",["1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248"],"import React,{useState,useEffect,memo,useCallback,useRef} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge, LinearProgress  } from '@material-ui/core';\r\nimport { ValidatorForm,TextValidator,SelectValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useParams} from 'react-router-dom';\r\nimport client from '../../services/client';\r\nimport {VERIPHY_APIS} from '../../const';\r\nimport IDAMLResult from './IDAMLResult';\r\nimport BlockUi from 'react-block-ui';\r\nimport 'react-block-ui/style.css';\r\n\r\nconst IDAML = (props:any)=>{\r\n    const qParam = useParams();\r\n    \r\n    const [processing,setProcessing] = useState(false);\r\n    const [DialogResult,setDialogResult] = useState({open:false,data:{}});\r\n    // show hide conditional fields flag\r\n    const [ShowAdditionalInformation,setShowAdditionalInformation]=  useState(true);\r\n    const [ShowEUIDCard,setShowEUIDCard]=  useState(false);\r\n    const [ShowBankValidation,setShowBankValidation]=  useState(false);\r\n    const [ShowTravelVisa,setShowTravelVisa]=  useState(false);\r\n\r\n    // form state\r\n    const [YourReference,setYourReference] = useState('');\r\n    // personal information\r\n    const [Gender,setGender] = useState('');\r\n    const [Title,setTitle] = useState('');\r\n    const [OtherTitle,setOtherTitle] = useState('');\r\n    const [FirstName,setFirstName] = useState('');\r\n    const [MiddleName,setMiddleName] = useState('');\r\n    const [Surname,setSurname] = useState('');\r\n    const [DateofBirth,setDateofBirth] = useState('');\r\n    //address details\r\n    //const [AddressLookup,setAddressLookup] = useState('');\r\n    const [Address1,setAddress1] = useState('');\r\n    const [Address2,setAddress2] = useState('');\r\n    const [Address3,setAddress3] = useState('');\r\n    const [Address4,setAddress4] = useState('');\r\n    const [Address5,setAddress5] = useState('');\r\n    const [TownCity,setTownCity] = useState('');\r\n    const [Postcode,setPostcode] = useState('');\r\n    //additional optional data\r\n    const [UKHomeTelephoneNumber,setUKHomeTelephoneNumber] = useState('');\r\n    const [UKMobileNumber,setUKMobileNumber] = useState('');\r\n    const [UKNINumber,setUKNINumber] = useState('');\r\n    const [PassportNumber,setPassportNumber] = useState({\r\n        PassportNumber1:'',PassportNumber2:'',PassportNumber3:'',PassportNumber4:'',PassportNumber5:'',PassportNumber6:'',PassportNumber7:'',PassportNumber8:'',\r\n    });\r\n    const [UKLicenceNumber,setUKLicenceNumber] = useState({\r\n        UKLicenceNumber1:'',UKLicenceNumber2:'',UKLicenceNumber3:'',UKLicenceNumber4:''\r\n    });\r\n    const [EUIDCard ,setEUIDCard] = useState({\r\n        EUIDCard1:'',EUIDCard2:'',EUIDCard3:'',EUIDCard4:'',\r\n        EUIDCard5:'',EUIDCard6:'',EUIDCard7:'',EUIDCard8:'',EUIDCard9:'',EUIDCard10:'',\r\n    });\r\n    const [BankSortCode,setBankSortCode] = useState({\r\n        BankSortCode1:'',BankSortCode2:'',BankSortCode3:''\r\n    });\r\n    const [AccountNumber,setAccountNumber] = useState('');\r\n    const [TravelVisa,setTravelVisa] = useState({\r\n        TravelVisa1:'',TravelVisa2:'',TravelVisa3:'',\r\n        TravelVisa4:'',TravelVisa5:'',TravelVisa6:'',TravelVisa7:'',TravelVisa8:'',TravelVisa9:''\r\n    });\r\n\r\n    // reference fields\r\n    const ref_PassportNumber = {\r\n        PassportNumber1:useRef(),PassportNumber2:useRef(),PassportNumber3:useRef(),PassportNumber4:useRef(),PassportNumber5:useRef(),PassportNumber6:useRef(),PassportNumber7:useRef(),PassportNumber8:useRef()\r\n    }\r\n    const ref_UKLicenceNumber = {\r\n        UKLicenceNumber1:useRef(),UKLicenceNumber2:useRef(),UKLicenceNumber3:useRef(),UKLicenceNumber4:useRef()\r\n    }\r\n    const ref_EUIDCard = {\r\n        EUIDCard1:useRef(),EUIDCard2:useRef(),EUIDCard3:useRef(),EUIDCard4:useRef(),\r\n        EUIDCard5:useRef(),EUIDCard6:useRef(),EUIDCard7:useRef(),EUIDCard8:useRef(),EUIDCard9:useRef(),EUIDCard10:useRef(),\r\n    }\r\n    const ref_BankSortCode = {\r\n        BankSortCode1:useRef(),BankSortCode2:useRef(),BankSortCode3:useRef()\r\n    }\r\n    const ref_TravelVisa = {\r\n        TravelVisa1:useRef(),TravelVisa2:useRef(),TravelVisa3:useRef(),\r\n        TravelVisa4:useRef(),TravelVisa5:useRef(),TravelVisa6:useRef(),TravelVisa7:useRef(),TravelVisa8:useRef(),TravelVisa9:useRef()\r\n    }\r\n    // check json k=>v is empty\r\n    const isEmpty = (params:any) => {\r\n        for(let k in params){\r\n            if(params[k] !='') return true;\r\n        }\r\n        return false;\r\n    }\r\n    // conditional validation\r\n    const recheckFields = (field,rfield,k,v)=>{\r\n        let rtn = true;\r\n        for(let f in field){\r\n            if(f == k)\r\n                rtn = v == '';\r\n            else\r\n                rtn = field[f] == '';\r\n            if(rtn == false) return false;\r\n        }\r\n        if(rtn){\r\n            // clear validatio rules\r\n            for(let k in rfield){\r\n                rfield[k].current.makeValid();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            sid:qParam.sid,\r\n            YourReference,\r\n            ServiceCode:props.ServiceCode,\r\n            Gender,Title,OtherTitle,FirstName,MiddleName,Surname,DateofBirth,\r\n            Address1,Address2,Address3,Address4,Address5,TownCity,Postcode,\r\n            UKHomeTelephoneNumber,UKMobileNumber,UKNINumber,\r\n            ...PassportNumber,\r\n            ...UKLicenceNumber,\r\n            ...EUIDCard,\r\n            ...BankSortCode,\r\n            AccountNumber,\r\n            ...TravelVisa\r\n        }\r\n        let res:any = await client.post(\"veriphy/IDAML\",params);\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setDialogResult({open:true,data:res.data});\r\n                //console.log(res.data)\r\n                //window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        if(['CREDACTIVE','DIRSEARCH','PEPSANCTION','ER'].indexOf(props.ServiceCode) != -1){\r\n            setShowAdditionalInformation(false);\r\n        }\r\n        if(['INTID','VISA','360'].indexOf(props.ServiceCode) != -1){\r\n            setShowEUIDCard(true);   \r\n        }\r\n        if(['HR','360'].indexOf(props.ServiceCode) != -1){\r\n            setShowBankValidation(true);   \r\n        }\r\n        if(['360','VISA'].indexOf(props.ServiceCode) != -1){\r\n            setShowTravelVisa(true)\r\n        }\r\n          \r\n    },[])\r\n\r\n    return (\r\n        <>    \r\n        <BlockUi tag=\"div\" blocking={processing}>\r\n        <ValidatorForm \r\n                onSubmit={handleSubmit}\r\n                onError={errors => {\r\n                    window.snakAlert.error(\"Please correct the highlight fields\");\r\n                }}\r\n                \r\n            >\r\n            <Grid container>\r\n                <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Your Reference\"\r\n                        name=\"YourReference\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setYourReference(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Reference is required']}\r\n                        value={YourReference}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 50 }}\r\n                    />\r\n\r\n                    <h3 className=\"heading\">Personal Details</h3>\r\n                    <SelectValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Gender\"\r\n                        name=\"Gender\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setGender(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Gender is required']}\r\n                        value={Gender}\r\n                        disabled={processing}\r\n                        //inputProps={{ maxLength: 100 }}\r\n                        >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                        <MenuItem value=\"Unknown\">Unknown</MenuItem>\r\n                    </SelectValidator>\r\n                    <SelectValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Title\"\r\n                        name=\"Title\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setTitle(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Title is required']}\r\n                        value={Title}\r\n                        disabled={processing}\r\n                        //inputProps={{ maxLength: 100 }}\r\n                        >\r\n                        <MenuItem value=\"Mr\">Mr</MenuItem>\r\n                        <MenuItem value=\"Miss\">Miss</MenuItem>\r\n                        <MenuItem value=\"Mrs\">Mrs</MenuItem>\r\n                        <MenuItem value=\"Dr\">Dr</MenuItem>\r\n                        <MenuItem value=\"Lord\">Lord</MenuItem>\r\n                        <MenuItem value=\"Rev\">Rev</MenuItem>\r\n                        <MenuItem value=\"Sir\">Sir</MenuItem>\r\n                        <MenuItem value=\"Other\">Other</MenuItem>\r\n                    </SelectValidator>\r\n                    {Title=='Other'?\r\n                        <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Please specify title\"\r\n                            name=\"OtherTitle\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setOtherTitle(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Title is required']}\r\n                            value={OtherTitle}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 10 }}\r\n                        />\r\n                    :''}\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"First Name\"\r\n                            name=\"FirstName\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setFirstName(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['First Name is required']}\r\n                            value={FirstName}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Middle Name\"\r\n                            name=\"MiddleName\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setMiddleName(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Reference is required']}\r\n                            value={MiddleName}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Surname\"\r\n                            name=\"Surname\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setSurname(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Surname is required']}\r\n                            value={Surname}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Date of Birth\"\r\n                            name=\"DateofBirth\"\r\n                            placeholder=\"dd/mm/yyyy\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setDateofBirth(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Date of Birth is required']}\r\n                            value={DateofBirth}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 10 }}\r\n                    />\r\n                    \r\n                    <h3 className=\"heading\">Address Details</h3>\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Address 1\"\r\n                            name=\"Address1\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setAddress1(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Address 1 is required']}\r\n                            value={Address1}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Address 2\"\r\n                            name=\"Address2\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setAddress2(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Address 1 is required']}\r\n                            value={Address2}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Address 3\"\r\n                            name=\"Address3\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setAddress3(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Address 1 is required']}\r\n                            value={Address3}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Address 4\"\r\n                            name=\"Address4\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setAddress4(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Address 1 is required']}\r\n                            value={Address4}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Address 5\"\r\n                            name=\"Address5\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setAddress5(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Address 1 is required']}\r\n                            value={Address5}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Town/City\"\r\n                            name=\"TownCity\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setTownCity(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Town / City is required']}\r\n                            value={TownCity}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Postcode\"\r\n                            name=\"Postcode\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setPostcode(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Postcode is required']}\r\n                            value={Postcode}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    {ShowAdditionalInformation?\r\n                    <>\r\n                    <h3 className=\"heading\">Additional Optional Data</h3>\r\n                    <h4 className=\"subheading\">Telephone</h4>\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"UK Home Telephone Number\"\r\n                            name=\"UKHomeTelephoneNumber\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setUKHomeTelephoneNumber(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Postcode is required']}\r\n                            value={UKHomeTelephoneNumber}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"UK Mobile Number\"\r\n                            name=\"UKMobileNumber\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setUKMobileNumber(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Postcode is required']}\r\n                            value={UKMobileNumber}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 20 }}\r\n                    />\r\n                    <h4 className=\"subheading\">National Insurance Number</h4>\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"UK NI Number\"\r\n                            placeholder=\"AB123456A\"\r\n                            name=\"UKNINumber\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setUKNINumber(e.target.value) }}\r\n                            //validators={['required']}\r\n                            //errorMessages={['Postcode is required']}\r\n                            value={UKNINumber}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 9 }}\r\n                    />\r\n                    <h4 className=\"subheading\">UK/International Passport</h4>\r\n                    <p>(for non-UK passports please include any &lt; symbols)</p>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item lg={2} md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"012345678\"\r\n                                name=\"PassportNumber1\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber1:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber1\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{9}$']:null}\r\n                                errorMessages={['Required','min length 9']}\r\n                                value={PassportNumber.PassportNumber1}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 9 }}\r\n                                ref={ref_PassportNumber.PassportNumber1}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={1} md={1}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"1\"\r\n                                name=\"PassportNumber2\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber2:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber2\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{1}$']:null}\r\n                                errorMessages={['','min length 1']}\r\n                                value={PassportNumber.PassportNumber2}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 1 }}\r\n                                ref={ref_PassportNumber.PassportNumber2}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={2}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"GBR\"\r\n                                name=\"PassportNumber3\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber3:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber3\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{3}$']:null}\r\n                                errorMessages={['Required','min length 3']}\r\n                                value={PassportNumber.PassportNumber3}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 3 }}\r\n                                ref={ref_PassportNumber.PassportNumber3}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"5011025\"\r\n                                name=\"PassportNumber4\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber4:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber4\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{7}$']:null}\r\n                                errorMessages={['Required','min length 7']}\r\n                                value={PassportNumber.PassportNumber4}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 7 }}\r\n                                ref={ref_PassportNumber.PassportNumber4}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={1} md={1}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"M\"\r\n                                name=\"PassportNumber5\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber5:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber5\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{1}$']:null}\r\n                                errorMessages={['','min length 1']}\r\n                                value={PassportNumber.PassportNumber5}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 1 }}\r\n                                ref={ref_PassportNumber.PassportNumber5}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={3} md={2}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"0810050\"   \r\n                                name=\"PassportNumber6\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber6:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber6\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{7}$']:null}\r\n                                errorMessages={['Required','min length 7']}\r\n                                value={PassportNumber.PassportNumber6}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 7 }}\r\n                                ref={ref_PassportNumber.PassportNumber6}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={3} md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"<<<<<<<<<<<<<<  \"   \r\n                                name=\"PassportNumber7\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber7:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber7\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{14}$']:null}\r\n                                errorMessages={['Required','min length 14']}\r\n                                value={PassportNumber.PassportNumber7}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 14 }}\r\n                                ref={ref_PassportNumber.PassportNumber7}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={2} md={2}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"29\"   \r\n                                name=\"PassportNumber8\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setPassportNumber({...PassportNumber,PassportNumber8:e.target.value}) ;\r\n                                    recheckFields(PassportNumber,ref_PassportNumber,\"PassportNumber8\",e.target.value);\r\n                                }}\r\n                                validators={isEmpty(PassportNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                errorMessages={['Required','min length 2']}\r\n                                value={PassportNumber.PassportNumber8}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 2 }}\r\n                                ref={ref_PassportNumber.PassportNumber8}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <h4 className=\"subheading\">Driving Licence</h4>\r\n                    <p>UK Licence Number</p>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item lg={2} md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"SMYTH\"\r\n                                name=\"UKLicenceNumber1\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setUKLicenceNumber({...UKLicenceNumber,UKLicenceNumber1:e.target.value}); \r\n                                    recheckFields(UKLicenceNumber,ref_UKLicenceNumber,'UKLicenceNumber1',e.target.value);\r\n                                }}\r\n                                validators={isEmpty(UKLicenceNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{5}$']:null}\r\n                                errorMessages={['Required','Min. length 5']}\r\n                                value={UKLicenceNumber.UKLicenceNumber1}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 5 }}\r\n                                ref={ref_UKLicenceNumber.UKLicenceNumber1}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={2} md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"809130\"\r\n                                name=\"UKLicenceNumber2\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setUKLicenceNumber({...UKLicenceNumber,UKLicenceNumber2:e.target.value}); \r\n                                    recheckFields(UKLicenceNumber,ref_UKLicenceNumber,'UKLicenceNumber2',e.target.value);\r\n                                }}\r\n                                validators={isEmpty(UKLicenceNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{6}$']:null}\r\n                                errorMessages={['Required','Min. length 6']}\r\n                                value={UKLicenceNumber.UKLicenceNumber2}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 6 }}\r\n                                ref={ref_UKLicenceNumber.UKLicenceNumber2}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={2} md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"JA9\"\r\n                                name=\"UKLicenceNumber3\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setUKLicenceNumber({...UKLicenceNumber,UKLicenceNumber3:e.target.value}); \r\n                                    recheckFields(UKLicenceNumber,ref_UKLicenceNumber,'UKLicenceNumber3',e.target.value);\r\n                                }}\r\n                                validators={isEmpty(UKLicenceNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{3}$']:null}\r\n                                errorMessages={['Required','Min. length 3']}\r\n                                value={UKLicenceNumber.UKLicenceNumber3}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 3 }}\r\n                                ref={ref_UKLicenceNumber.UKLicenceNumber3}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={2} md={3}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                placeholder=\"JA9\"\r\n                                name=\"UKLicenceNumber4\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ \r\n                                    setUKLicenceNumber({...UKLicenceNumber,UKLicenceNumber4:e.target.value}); \r\n                                    recheckFields(UKLicenceNumber,ref_UKLicenceNumber,'UKLicenceNumber4',e.target.value);\r\n                                }}\r\n                                validators={isEmpty(UKLicenceNumber)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                errorMessages={['Required','Min. length 2']}\r\n                                value={UKLicenceNumber.UKLicenceNumber4}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 2 }}\r\n                                ref={ref_UKLicenceNumber.UKLicenceNumber4}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    {ShowEUIDCard?\r\n                        <>\r\n                        <h4 className=\"subheading\">EU ID Card or UK Residence Permit</h4>\r\n                        <p className=\"label\">Line 1</p>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item lg={1} md={2} sm={2}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"I<  \"\r\n                                    name=\"EUIDCard1\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard1:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard1',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                    errorMessages={['Required','Min. length 2']}\r\n                                    value={EUIDCard.EUIDCard1}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 2 }}\r\n                                    ref={ref_EUIDCard.EUIDCard1}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={2} md={2} sm={2}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"ABC\"\r\n                                    name=\"EUIDCard2\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard2:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard2',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{3}$']:null}\r\n                                    errorMessages={['Required','Min. length 3']}\r\n                                    value={EUIDCard.EUIDCard2}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 3 }}\r\n                                    ref={ref_EUIDCard.EUIDCard2}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={2} md={3} sm={3}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"ZU12345673\"\r\n                                    name=\"EUIDCard3\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard3:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard3',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{10}$']:null}\r\n                                    errorMessages={['Required','Min. length 10']}\r\n                                    value={EUIDCard.EUIDCard3}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 10 }}\r\n                                    ref={ref_EUIDCard.EUIDCard3}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={3} md={4} sm={4}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"<<<<<<<<<<<<<<< \"\r\n                                    name=\"EUIDCard4\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard4:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard4',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{15}$']:null}\r\n                                    errorMessages={['Required','Min. length 15']}\r\n                                    value={EUIDCard.EUIDCard4}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 15 }}\r\n                                    ref={ref_EUIDCard.EUIDCard4}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <p className=\"label\">Line 2</p>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item lg={2} md={2} sm={2}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"6608198\"\r\n                                    name=\"EUIDCard5\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard5:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard5',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{7}$']:null}\r\n                                    errorMessages={['Required','Min. length 7']}\r\n                                    value={EUIDCard.EUIDCard5}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 7 }}\r\n                                    ref={ref_EUIDCard.EUIDCard5}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={1} md={1} sm={1}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"F\"\r\n                                    name=\"EUIDCard6\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard6:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard6',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{1}$']:null}\r\n                                    errorMessages={['','Min. length 1']}\r\n                                    value={EUIDCard.EUIDCard6}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 1 }}\r\n                                    ref={ref_EUIDCard.EUIDCard6}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={2} md={2} sm={2}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"0808088\"\r\n                                    name=\"EUIDCard7\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard7:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard7',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{7}$']:null}\r\n                                    errorMessages={['Required','Min. length 7']}\r\n                                    value={EUIDCard.EUIDCard7}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 7 }}\r\n                                    ref={ref_EUIDCard.EUIDCard7}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={1} md={2} sm={2}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"JKL \"\r\n                                    name=\"EUIDCard8\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard8:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard8',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{3}$']:null}\r\n                                    errorMessages={['Required','Min. length 3']}\r\n                                    value={EUIDCard.EUIDCard8}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 3 }}\r\n                                    ref={ref_EUIDCard.EUIDCard8}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={2} md={3} sm={3}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"<<<<<<<<<<<<<<< \"\r\n                                    name=\"EUIDCard9\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard9:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard9',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{11}$']:null}\r\n                                    errorMessages={['Required','Min. length 11']}\r\n                                    value={EUIDCard.EUIDCard9}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 11 }}\r\n                                    ref={ref_EUIDCard.EUIDCard9}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item lg={1} md={1} sm={1}>\r\n                                <TextValidator\r\n                                    variant=\"outlined\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    placeholder=\"6\"\r\n                                    name=\"EUIDCard10\"\r\n                                    autoFocus\r\n                                    onChange={(e:any)=>{ \r\n                                        setEUIDCard({...EUIDCard,EUIDCard10:e.target.value}); \r\n                                        recheckFields(EUIDCard,ref_EUIDCard,'EUIDCard10',e.target.value);\r\n                                    }}\r\n                                    validators={isEmpty(EUIDCard)?['required','matchRegexp:^[A-Z|a-z|0-9]{1}$']:null}\r\n                                    errorMessages={['Required','Min. length 1']}\r\n                                    value={EUIDCard.EUIDCard10}\r\n                                    disabled={processing}\r\n                                    inputProps={{ maxLength: 1 }}\r\n                                    ref={ref_EUIDCard.EUIDCard10}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        </>:''}\r\n                        {ShowTravelVisa?<>\r\n                            <h4 className=\"subheading\">UK/EU Travel Visa or UK Entry Clearance</h4>\r\n                            <p className=\"label\">Top Line (first 5 characters)</p>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"VC\"\r\n                                        name=\"TravelVisa1\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa1:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa1',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                        errorMessages={['Required','Min. length 2']}\r\n                                        value={TravelVisa.TravelVisa1}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 2 }}\r\n                                        ref={ref_TravelVisa.TravelVisa1}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"ABC\"\r\n                                        name=\"TravelVisa2\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa2:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa2',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{3}$']:null}\r\n                                        errorMessages={['Required','Min. length 3']}\r\n                                        value={TravelVisa.TravelVisa2}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 3 }}\r\n                                        ref={ref_TravelVisa.TravelVisa2}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid> \r\n                            <p className=\"label\">Bottom Line</p>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"123456789\"\r\n                                        name=\"TravelVisa3\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa3:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa3',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{9}$']:null}\r\n                                        errorMessages={['Required','Min. length 9']}\r\n                                        value={TravelVisa.TravelVisa3}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 9 }}\r\n                                        ref={ref_TravelVisa.TravelVisa3}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={1} md={1} sm={1}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"1\"\r\n                                        name=\"TravelVisa4\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa4:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa4',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{1}$']:null}\r\n                                        errorMessages={['Required','Min. length 1']}\r\n                                        value={TravelVisa.TravelVisa4}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 1 }}\r\n                                        ref={ref_TravelVisa.TravelVisa4}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"JKL\"\r\n                                        name=\"TravelVisa5\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa5:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa5',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{3}$']:null}\r\n                                        errorMessages={['Required','Min. length 3']}\r\n                                        value={TravelVisa.TravelVisa5}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 3 }}\r\n                                        ref={ref_TravelVisa.TravelVisa5}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"0101751\"\r\n                                        name=\"TravelVisa6\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa6:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa6',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{7}$']:null}\r\n                                        errorMessages={['Required','Min. length 7']}\r\n                                        value={TravelVisa.TravelVisa6}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 7 }}\r\n                                        ref={ref_TravelVisa.TravelVisa6}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={1} md={1} sm={1}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"M\"\r\n                                        name=\"TravelVisa7\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa7:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa7',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{1}$']:null}\r\n                                        errorMessages={['Required','Min. length 1']}\r\n                                        value={TravelVisa.TravelVisa7}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 1 }}\r\n                                        ref={ref_TravelVisa.TravelVisa7}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"0101189\"\r\n                                        name=\"TravelVisa8\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa8:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa8',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{7}$']:null}\r\n                                        errorMessages={['Required','Min. length 7']}\r\n                                        value={TravelVisa.TravelVisa8}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 7 }}\r\n                                        ref={ref_TravelVisa.TravelVisa8}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"<<<<<<<<  \"\r\n                                        name=\"TravelVisa9\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setTravelVisa({...TravelVisa,TravelVisa9:e.target.value}); \r\n                                            recheckFields(TravelVisa,ref_TravelVisa,'TravelVisa9',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(TravelVisa)?['required','matchRegexp:^[A-Z|a-z|0-9]{8}$']:null}\r\n                                        errorMessages={['Required','Min. length 8']}\r\n                                        value={TravelVisa.TravelVisa9}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 7 }}\r\n                                        ref={ref_TravelVisa.TravelVisa9}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </>:''}\r\n                        {ShowBankValidation?<>\r\n                            <h4 className=\"subheading\">Bank validation</h4>\r\n                            <p className=\"label\">Sort Code</p>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"12\"\r\n                                        name=\"BankSortCode1\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setBankSortCode({...BankSortCode,BankSortCode1:e.target.value}); \r\n                                            recheckFields(BankSortCode,ref_BankSortCode,'BankSortCode1',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(BankSortCode)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                        errorMessages={['Required','Min. length 2']}\r\n                                        value={BankSortCode.BankSortCode1}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 2 }}\r\n                                        ref={ref_BankSortCode.BankSortCode1}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"34\"\r\n                                        name=\"BankSortCode2\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setBankSortCode({...BankSortCode,BankSortCode2:e.target.value}); \r\n                                            recheckFields(BankSortCode,ref_BankSortCode,'BankSortCode2',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(BankSortCode)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                        errorMessages={['Required','Min. length 2']}\r\n                                        value={BankSortCode.BankSortCode2}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 2 }}\r\n                                        ref={ref_BankSortCode.BankSortCode2}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"56\"\r\n                                        name=\"BankSortCode3\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setBankSortCode({...BankSortCode,BankSortCode3:e.target.value}); \r\n                                            recheckFields(BankSortCode,ref_BankSortCode,'BankSortCode3',e.target.value);\r\n                                        }}\r\n                                        validators={isEmpty(BankSortCode)?['required','matchRegexp:^[A-Z|a-z|0-9]{2}$']:null}\r\n                                        errorMessages={['Required','Min. length 2']}\r\n                                        value={BankSortCode.BankSortCode3}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 2 }}\r\n                                        ref={ref_BankSortCode.BankSortCode3}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <p className=\"label\">Account Number</p>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item lg={2} md={2} sm={2}>\r\n                                    <TextValidator\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                        placeholder=\"12345678\"\r\n                                        name=\"AccountNumber\"\r\n                                        autoFocus\r\n                                        onChange={(e:any)=>{ \r\n                                            setAccountNumber(e.target.value); \r\n                                        }}\r\n                                        validators={[\"matchRegexp:^[A-Z|a-z|0-9]{8}$\"]}\r\n                                        errorMessages={['Min. length 8']}\r\n                                        value={AccountNumber}\r\n                                        disabled={processing}\r\n                                        inputProps={{ maxLength: 8 }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </>:''}\r\n                    </>\r\n                    :''\r\n                    }\r\n                    \r\n                    <hr/>\r\n                    <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                    <div style={{float:'right'}}>\r\n                        <br/>\r\n                        <Button disabled={processing}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\">Perform Check </Button>\r\n                    </div>\r\n                   \r\n                </Grid>\r\n\r\n                <Grid item md={6} sm={12} xs={12}>\r\n                    \r\n                </Grid>\r\n            </Grid>   \r\n        </ValidatorForm>\r\n        </BlockUi>\r\n        <IDAMLResult\r\n            dialog={DialogResult}\r\n            onClose={()=>{ setDialogResult({open:false,data:{}}) }}\r\n        />\r\n        </>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default memo(IDAML);","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\veriphy\\IDAMLResult.tsx",["1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link, Dialog, AppBar, Toolbar, Typography  } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport {Link as RLink,useParams,useHistory} from 'react-router-dom';\r\nimport {VERIPHY_APIS} from '../../const';\r\n\r\n\r\n// get log ID and generate results by fetching record from db\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }));\r\n\r\nconst IDAMLResult = (props:any)=>{\r\n    const classes = useStyles();\r\n\r\n    //const [dialog, setDialog] = React.useState(props.dialog);\r\n    const getPDFString = ()=>{\r\n      if(props.dialog && props.dialog.data && props.dialog.data.Response){\r\n        let json = JSON.parse(props.dialog.data.Response);\r\n        return json.responseEncodedPdf;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    return(\r\n        <>  \r\n        <Dialog fullScreen open={props.dialog.open} onClose={props.close}>\r\n          <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n              <IconButton edge=\"start\" color=\"inherit\" onClick={props.onClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                  Veriphy Check Result\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n              <embed \r\n                src={`data:application/pdf;base64,${getPDFString()}`}\r\n                type=\"application/pdf\"\r\n              ></embed> \r\n            </Paper>\r\n        </Dialog>              \r\n        </>\r\n    )\r\n}\r\n\r\nexport default IDAMLResult;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\form.tsx",["1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288"],"import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, Grid, InputLabel, LinearProgress, MenuItem, Paper, Select } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo } from 'react';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\n\r\nimport { ValidatorForm,TextValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useHistory} from 'react-router-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport client from '../../../services/client';\r\nimport {PRICING_TYPE} from '../../../const';\r\nimport PackagesDropdown from '../../../common/PackagesDropdown';\r\nimport UsersDropdown from '../../../common/UsersDropdown';\r\n\r\nimport u from '../../../services/util'\r\n\r\nconst SubscriptionForm:React.FC = ()=>{\r\n    const history = useHistory();\r\n    const param = useParams();\r\n    \r\n    const mode = param.id?'update':'create';\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    \r\n    const [PackageID,setPackageID] = useState(0);\r\n    const [UserID,setUserID] = useState(0);\r\n    const [StartDate,setStartDate] = useState(u.date.today());\r\n    const [EndDate,setEndDate] = useState(u.date.oneMonthAhead());\r\n    const [APICallsQuantity,setAPICallsQuantity] = useState(0);\r\n\r\n    const [User,setUser]:any = useState();\r\n    const [Package,setPackage]:any = useState();\r\n\r\n    const setData = (data:any)=>{\r\n        if(data){\r\n            setPackageID(data.PackageID);\r\n            setStartDate(data.StartDate);\r\n            setEndDate(data.EndDate);\r\n            setAPICallsQuantity(data.APICallsQuantity);\r\n            setUserID(data.UserID);\r\n        }\r\n    }\r\n\r\n    const getRecord = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/subscriptions/get/\",{id:param.id});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            UserID,PackageID,StartDate,EndDate,APICallsQuantity,\r\n            id:param.id\r\n        }\r\n        let res:any = null;\r\n\r\n        if(mode == 'update')\r\n            res = await client.post(\"admin/subscriptions/update/\",params);\r\n        else\r\n            res = await client.post(\"admin/subscriptions/create/\",params);\r\n\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                history.push('/admin/subscriptions');\r\n                window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.data);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(mode == 'update')\r\n            getRecord();\r\n    }, [])\r\n\r\n    const loadPackage = async()=>{\r\n        let res = await client.get(\"admin/packages/getPackage\",{id:PackageID});\r\n        if(!res.success){\r\n            setPackage();\r\n        }else{\r\n            setPackage(res.data);\r\n        }\r\n    }\r\n    const loadUser = async()=>{\r\n        let res = await client.get(\"admin/users/get\",{id:UserID});\r\n        if(!res.success){\r\n            setUser();\r\n        }else{\r\n            setUser(res.data);\r\n        }\r\n    }\r\n\r\n\r\n    useMemo(() => {\r\n        if(UserID > 0){\r\n            loadUser();\r\n        }else{\r\n            setUser();\r\n        }\r\n    }, [UserID]);\r\n\r\n    useMemo(() => {\r\n        if(PackageID > 0){\r\n            loadPackage();\r\n        }else{\r\n            setPackage();\r\n        }\r\n    }, [PackageID]);\r\n\r\n    const getPackageCost=()=>{\r\n        if(Package){\r\n            if(Package.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION){\r\n                return Package.PackagePrice;\r\n            }else{\r\n                return (APICallsQuantity * Package.PricePerAPICall).toFixed(2);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Subscription <span>{mode=='update'?'Upage subscription':'Create new subscription'}</span></h2>\r\n            <>\r\n                <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <ValidatorForm\r\n                        onSubmit={handleSubmit}\r\n                        onError={errors => {\r\n                            console.log(errors)\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <Grid item md={12} xs={12}>\r\n                                    {mode != 'update'?\r\n                                    <PackagesDropdown \r\n                                    onSelect={(value:number)=>{setPackageID(value)}}/>\r\n                                    :<h3>Package</h3>}\r\n                                </Grid>\r\n                                {Package?<>\r\n                                    <Grid item md={12} xs={12}>\r\n                                        <div className=\"grid-result-list\" >\r\n                                            <div className=\"field\">\r\n                                                <span className=\"key\">Title:</span>\r\n                                                <div className=\"value\"> {Package.PackageTitle} </div>\r\n                                            </div>\r\n                                            <div className=\"field\">\r\n                                                <span className=\"key\">Vendor:</span>\r\n                                                <div className=\"value\"> {Package.Vendors.VendorName} </div>\r\n                                            </div>\r\n                                            <div className=\"field\">\r\n                                                <span className=\"key\">Pricing Type:</span>\r\n                                                <div className=\"value\"> {Package.PricingType} </div>\r\n                                            </div>\r\n                                            {Package.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                                            <>\r\n                                                <div className=\"field\">\r\n                                                    <span className=\"key\">Package Type:</span>\r\n                                                    <div className=\"value\"> {Package.PackageTypes && Package.PackageTypes.PackageType} </div>\r\n                                                </div>\r\n                                                <div className=\"field\">\r\n                                                    <span className=\"key\">API Calls Limit:</span>\r\n                                                    <div className=\"value\"> {Package.APICallsLimit} </div>\r\n                                                </div>\r\n                                            </>\r\n                                            :\r\n                                            <>\r\n                                                <div className=\"field\">\r\n                                                    <span className=\"key\">Pricing Per API Call:</span>\r\n                                                    <div className=\"value\"> { u.format.currency(Package.PricePerAPICall)} </div>\r\n                                                </div>\r\n                                                \r\n                                            </>\r\n                                            }\r\n                                        </div>\r\n                                    </Grid>\r\n                                    {Package.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                                    <>\r\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                        <Grid item md={12} xs={12}>\r\n                                        <KeyboardDatePicker\r\n                                                disableToolbar\r\n                                                variant=\"dialog\"\r\n                                                inputVariant=\"outlined\"\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                margin=\"normal\"\r\n                                                id=\"startdate-picker-inline\"\r\n                                                label=\"Start Date\"\r\n                                                fullWidth\r\n                                                value={StartDate}\r\n                                                disabled={processing}\r\n                                                onChange={(date:any)=>{ \r\n                                                    setStartDate(date)\r\n                                                }}\r\n                                                autoOk={true}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={12} xs={12}>\r\n                                            <KeyboardDatePicker\r\n                                                disableToolbar\r\n                                                variant=\"dialog\"\r\n                                                inputVariant=\"outlined\"\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                margin=\"normal\"\r\n                                                id=\"enddate-picker-inline\"\r\n                                                fullWidth\r\n                                                label=\"End Date\"\r\n                                                value={EndDate}\r\n                                                disabled={processing}\r\n                                                onChange={(date:any)=>{ \r\n                                                    setEndDate(date)\r\n                                                }}\r\n                                                autoOk={true}\r\n                                                KeyboardButtonProps={{\r\n                                                    'aria-label': 'change date',\r\n                                                }}\r\n                                            />\r\n                                        </Grid>\r\n                                    </MuiPickersUtilsProvider>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <TextValidator\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            fullWidth\r\n                                            label=\"API Calls Quantity\"\r\n                                            name=\"APICallsQuantity\"\r\n                                            autoFocus\r\n                                            type=\"number\"\r\n                                            onChange={(e:any)=>{ \r\n                                                let value = e.target.value;\r\n                                                if(value.length > 6) return;\r\n                                                if(value > 999999){\r\n                                                    value = 999999; \r\n                                                }\r\n                                                if(value <=0)\r\n                                                    value = 0;\r\n\r\n                                                setAPICallsQuantity(value) \r\n                                            }}\r\n                                            validators={['required']}\r\n                                            errorMessages={['Type is required']}\r\n                                            value={APICallsQuantity}\r\n                                            disabled={processing}\r\n                                        />\r\n                                    </>\r\n                                    }\r\n                                </>:''}\r\n                                <div>\r\n                                    <h3>Package Cost: {u.format.currency(getPackageCost())}</h3>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>    \r\n                                <Grid item md={12} xs={12}>\r\n                                    {mode != 'update'?\r\n                                    <UsersDropdown onSelect={(value:number)=>{setUserID(value)}}/>\r\n                                    :<h3>User</h3>}\r\n                                </Grid>\r\n                                {User?<>\r\n                                    <div className=\"grid-result-list\" >\r\n                                        <div className=\"field\">\r\n                                            <span className=\"key\">Email:</span>\r\n                                            <div className=\"value\"> {User.Email} </div>\r\n                                        </div>\r\n                                        <div className=\"field\">\r\n                                            <span className=\"key\">Full Name:</span>\r\n                                            <div className=\"value\"> {User.FullName} </div>\r\n                                        </div>\r\n                                        <div className=\"field\">\r\n                                            <span className=\"key\">Telephone No:</span>\r\n                                            <div className=\"value\"> {User.TelephoneNo} </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </>:''}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>    \r\n                                <Grid item md={12}>\r\n                                    <hr/>\r\n                                    <br/>\r\n                                    <Button disabled={processing}\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\">Submit</Button>\r\n                                    &nbsp; &nbsp;\r\n                                    <Button\r\n                                        component={RLink}\r\n                                        to=\"/admin/subscriptions\"\r\n                                        variant=\"contained\"\r\n                                        >Calcel</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>                        \r\n                    </ValidatorForm>\r\n                </Paper>\r\n            </>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SubscriptionForm;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\index.tsx",["1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../../services/client';\r\nimport util from '../../../services/util';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\n\r\nconst Subscriptions:React.FC = ()=>{\r\n    const [data,setData]:any = useState({});\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    // listing filters\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 10;\r\n\r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"admin/subscriptions/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    const handlerDelete = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Subscriptions\",`Delete subscription \"${row.PackageTitle}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/subscriptions/remove/\",{id:row.SID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    const handlerActivate = async(row:any)=>{\r\n        if(await window.ConfirmationDialog(\"Subscriptions\",`Activate selected subscription with name \"${row.PackageTitle}\"?`)){\r\n            setProcessing(true);\r\n            let res:any = await client.post(\"admin/subscriptions/activate/\",{id:row.SID});\r\n            if(!res.success){\r\n                window.snakAlert.error(res.message);\r\n                setProcessing(false);\r\n            }else{\r\n                window.snakAlert.success(res.data);\r\n                search();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Subscriptions <span>List of all subscriptions</span></h2>\r\n        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Listing rowPerPage={rowPerPage} data={data} \r\n                    onPagingChange={handlerSearch} \r\n                    onDelete={handlerDelete}\r\n                    onActivate={handlerActivate}\r\n                    />      \r\n                    \r\n            </Paper>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Subscriptions;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\Listing.tsx",["1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {PRICING_TYPE} from '../../../const';\r\n\r\nconst Listing = (props:any)=>{\r\n    const [tagDialog,setTagDialog]:any = useState({open:false,row:{}});\r\n    \r\n    const columns = [\r\n        {\r\n            name: 'User',\r\n            selector: 'Users.FullName',\r\n            compact:true,\r\n          },\r\n        {\r\n          name: 'Title',\r\n          selector: 'PackageTitle',\r\n          compact:true,\r\n          width:'220px',\r\n        },\r\n        {\r\n            name: 'Vendor',\r\n            selector: 'Vendors.VendorName',\r\n            compact:true,\r\n        },\r\n        {\r\n            name: 'Pricing Type',\r\n            selector: 'PricingType',\r\n            compact:true,\r\n        },\r\n        {\r\n            name: 'Amount',\r\n            //selector: 'PackageTypes.PackageType',\r\n            compact:true,\r\n            cell:(row:any)=><>{u.format.currency(row.TotalPackagePrice)}</>\r\n        },\r\n        {\r\n            name: 'Last Update',\r\n            selector: 'DateModified',\r\n            compact:true,\r\n            width:'160px',\r\n            hide:1200,\r\n            cell:(row:any)=><>{u.format.datetime(row.DateModified)}</>\r\n        },\r\n        {\r\n            name: 'Modofied By',\r\n            compact:true,\r\n            hide:1200,\r\n            cell:(row:any)=><>{row.ModifiedByUser.FullName}</>\r\n        },\r\n        {\r\n            name: '',\r\n            compact:true,\r\n            width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n                <>\r\n                <Tooltip title=\"Edit\" >\r\n                    <IconButton size=\"small\" className=\"action\" component={RLink} to={`/admin/subscriptions/doc/${row.SID}`}>\r\n                        <Icon className=\"icon-green\">edit</Icon>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            \r\n                {row.Deleted?\r\n                    <Tooltip title=\"Activate\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onActivate(row)}} >\r\n                            <Icon className=\"icon-red\">undo</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                :\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton size=\"small\" className=\"action danger\" onClick={()=>{props.onDelete(row)}} >\r\n                            <Icon className=\"icon-red\">delete_forever</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                </>\r\n          }\r\n      ];\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} />}\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Title:</span>\r\n                    <div className=\"value\"> {data.PackageTitle} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Vendor:</span>\r\n                    <div className=\"value\"> {data.Vendors.VendorName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Pricing Type:</span>\r\n                    <div className=\"value\"> {data.PricingType} </div>\r\n                </div>\r\n                {data.PricingType == PRICING_TYPE.MONTHLY_SUBSCRIBTION?\r\n                <>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Package Type:</span>\r\n                        <div className=\"value\"> {data.PackageTypes.PackageType} </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">API Calls Limit:</span>\r\n                        <div className=\"value\"> {data.APICallsLimit} </div>\r\n                    </div>\r\n                </>\r\n                :\r\n                    <>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">Price Per API Call:</span>\r\n                        <div className=\"value\"> {u.format.currency(data.PricePerAPICall)} </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <span className=\"key\">API Quantity:</span>\r\n                        <div className=\"value\"> {data.APICallsQuantity} </div>\r\n                    </div>\r\n                    </>\r\n                }\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Package Price:</span>\r\n                    <div className=\"value\"> {u.format.currency(data.TotalPackagePrice)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Consumed API Counter:</span>\r\n                    <div className=\"value\"> {data.APICallsCounter} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Created:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Created By:</span>\r\n                    <div className=\"value\"> {data.CreatedByUser.FullName} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date Updated:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateModified)} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Modified By:</span>\r\n                    <div className=\"value\"> {data.ModifiedByUser.FullName} </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\admin\\subscriptions\\Filter.tsx",["1334"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {PRICING_TYPE} from '../../../const';\r\nimport client from '../../../services/client';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    const [type,settype] = useState('active');\r\n    const [pricingType,setpricingType] = useState(\"\");\r\n    const [vendors,setVendors]:any = useState([]);\r\n    const [vendorId,setvendorId]:any = useState(0);\r\n\r\n    const getVendors = async()=>{\r\n        let res = await client.get(\"admin/vendors/list\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendors([])\r\n        }else{\r\n            setVendors(res.data);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getVendors();\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({type:type,term:Term,page:1,vendorId,pricingType});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        settype('active');\r\n        props.onSearch({type:'active',term:'',vendorId:0,pricingType:'',page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={3} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By User Name/Email\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Status</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{settype(e.target.value)}}\r\n                        value={type}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"active\" key=\"active\">Active</MenuItem>\r\n                        <MenuItem value=\"deleted\" key=\"deleted\">Deleted</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Pricing</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setpricingType(e.target.value)}}\r\n                        value={pricingType}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        <MenuItem value={PRICING_TYPE.MONTHLY_SUBSCRIBTION} key=\"monthly\">{PRICING_TYPE.MONTHLY_SUBSCRIBTION}</MenuItem>\r\n                        <MenuItem value={PRICING_TYPE.PAY_AS_YOU_GO} key=\"pay-as-you-go\">{PRICING_TYPE.PAY_AS_YOU_GO}</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Vendor</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setvendorId(e.target.value)}}\r\n                        value={vendorId}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        {\r\n                            vendors && vendors.map((row)=>(\r\n                                <MenuItem value={row.VendorID} key=\"monthly\">{row.VendorName}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={3} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button> &nbsp;\r\n                <Button variant=\"contained\" color=\"primary\" component={RLink} to=\"/admin/subscriptions/doc\">\r\n                    <Icon>add</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\PackagesDropdown.tsx",["1335","1336"],"import React,{memo,useEffect,useState,useCallback,useRef } from 'react';\r\nimport client from '../services/client';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { CircularProgress, TextField } from '@material-ui/core';\r\n\r\nconst PackagesDropdown:React.FC<any> = (props:any)=>{\r\n    const autoC = useRef<HTMLDivElement>(null);\r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions]:any = useState([]);\r\n    //const [value, setValue] = React.useState(null);\r\n    let loading = false;// open && options.length === 0;\r\n    \r\n    const search = useCallback(async(term:string='')=>{\r\n        loading =  true;\r\n        let res = await client.get('admin/packages/search',{term:term});\r\n        if(res.success){\r\n            setOptions(res.data);\r\n        }\r\n        loading =  false;\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        search();\r\n    },[]);\r\n\r\n    // clear selection\r\n    useEffect(() => {\r\n        if(props.clear === true){\r\n          if(autoC && autoC.current){\r\n            const ele:any = autoC.current.getElementsByClassName('MuiAutocomplete-clearIndicatorDirty')[0];\r\n            if(ele) ele.click();\r\n          }\r\n        }\r\n    }, [props.clear])\r\n    \r\n\r\n    return (\r\n    <Autocomplete ref={autoC}\r\n      id=\"package-search-auto\"\r\n      size=\"small\"\r\n      className=\"autocomplete\"\r\n      //searchText={props.value}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      autoComplete={false}\r\n      fullWidth\r\n      getOptionSelected={(option:any, value:any) => option.name === value.name}\r\n      getOptionLabel={(option:any) => option.name}\r\n      //defaultValue= {props.package?{name:props.package.PackageTitle,id:props.package.PackageID}:null}\r\n      options={options}\r\n      loading={loading}\r\n      clearOnEscape\r\n      onChange={(event, newValue:any) => {\r\n        setOptions(newValue ? [newValue, ...options] : options);\r\n        props.onSelect(newValue?newValue.value:'');\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        search(newInputValue);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select Packages\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          margin=\"normal\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    )\r\n}\r\n\r\nexport default memo(PackagesDropdown);","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\UsersDropdown.tsx",["1337","1338"],"import React,{memo,useEffect,useState,useCallback,useRef } from 'react';\r\nimport client from '../services/client';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { CircularProgress, TextField } from '@material-ui/core';\r\n\r\nconst UsersDropdown:React.FC<any> = (props:any)=>{\r\n    const autoC = useRef<HTMLDivElement>(null);\r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions]:any = useState([]);\r\n    //const [value, setValue] = React.useState(null);\r\n    let loading = false;// open && options.length === 0;\r\n    \r\n    const search = useCallback(async(term:string='')=>{\r\n        loading =  true;\r\n        let res = await client.get('admin/users/search',{term:term});\r\n        if(res.success){\r\n            setOptions(res.data);\r\n        }\r\n        loading =  false;\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        search();\r\n    },[]);\r\n\r\n    // clear selection\r\n    useEffect(() => {\r\n        if(props.clear === true){\r\n          if(autoC && autoC.current){\r\n            const ele:any = autoC.current.getElementsByClassName('MuiAutocomplete-clearIndicatorDirty')[0];\r\n            if(ele) ele.click();\r\n          }\r\n        }\r\n    }, [props.clear])\r\n    \r\n\r\n    return (\r\n    <Autocomplete ref={autoC}\r\n      id=\"user-search-auto\"\r\n      className=\"autocomplete\"\r\n      //searchText={props.value}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      autoComplete={false}\r\n      fullWidth\r\n      size=\"small\"\r\n      getOptionSelected={(option:any, value:any) => option.name === value.name}\r\n      getOptionLabel={(option:any) => option.name}\r\n      options={options}\r\n      loading={loading}\r\n      clearOnEscape\r\n      onChange={(event, newValue:any) => {\r\n        setOptions(newValue ? [newValue, ...options] : options);\r\n        props.onSelect(newValue?newValue.value:'');\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        search(newInputValue);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select User\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          margin=\"normal\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <React.Fragment>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </React.Fragment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n    )\r\n}\r\n\r\nexport default memo(UsersDropdown);","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\trustid\\index.tsx",["1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport TrustIDService from './TrustIDService';\r\nimport SubscriptionValidator from '../../common/SubscriptionValidator';\r\n\r\nimport {TRUSTID_SERVICES} from '../../const';\r\n\r\n\r\nconst TrustID = ()=>{\r\n    const [Service,setService]:any = useState({Type:'',ServiceCode:''});\r\n \r\n    useEffect(()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    },[]);\r\n\r\n    const HandlerOnBack = ()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <SubscriptionValidator>\r\n                {Service && Service.Type==''?\r\n                    <>\r\n                        <h1>Trust ID Check List</h1>\r\n                        <Paper elevation={0} className=\"section mt-10\">\r\n                            <Grid spacing={1} container>\r\n                                {TRUSTID_SERVICES && TRUSTID_SERVICES.map((service:any,index:number)=>(\r\n                                    <>\r\n                                        <Grid item lg={3} md={4} sm={4} xs={12} key={index}>\r\n                                            <div className=\"box-wraper\">\r\n                                                <div className=\"box\">\r\n                                                    <h2>{service.Name}</h2>\r\n                                                    <p>{service.Title}</p>\r\n                                                </div>\r\n                                                <Button variant=\"contained\" fullWidth \r\n                                                    onClick={()=>{\r\n                                                        setService({Type:service.Type,ServiceCode:service.ServiceCode})\r\n                                                    }}\r\n                                                >Go</Button>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </>\r\n                                ))}\r\n                                \r\n                            </Grid>\r\n                        </Paper>    \r\n                    </>\r\n                    :\r\n                    <>\r\n                        <ServicePage onBack={HandlerOnBack} Service = {Service}/>\r\n                    </>\r\n                }\r\n            </SubscriptionValidator>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ServicePage:any = (props:any)=>{\r\n    const getService = ()=>{\r\n        let Service:any = TRUSTID_SERVICES.filter((service:any)=>{\r\n            return service.ServiceCode == props.Service.ServiceCode;\r\n        });\r\n        if(Service) return Service[0];\r\n    }\r\n\r\n    let Service:any = getService();\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"serviceHeading\">{Service.Title}</h1>\r\n            <div style={{textAlign:'right'}}>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={props.onBack}>&lt;&lt; Back</Button>\r\n            </div>\r\n                        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <TrustIDService Service={props.Service}/>\r\n            </Paper>\r\n        </>\r\n    );    \r\n}\r\n\r\nexport default TrustID;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\trustid\\TrustIDService.tsx",["1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link, LinearProgress  } from '@material-ui/core';\r\nimport {Link as RLink,useParams} from 'react-router-dom';\r\nimport { ValidatorForm,TextValidator,SelectValidator } from 'react-material-ui-form-validator';\r\nimport client from '../../services/client';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport FileInputComponent from 'react-file-input-previews-base64';\r\n\r\nimport sampleImg1 from '../../assets/images/trustid_img1.png';\r\nimport sampleImg2 from '../../assets/images/trustid_img2.png';\r\nimport sampleImg3 from '../../assets/images/trustid_img3.png';\r\nimport BlockUi from 'react-block-ui';\r\nimport 'react-block-ui/style.css';\r\n\r\nconst TrustIDService = (props:any)=>{\r\n    const qParam = useParams();\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [YourReference,setYourReference] = useState('');\r\n    //const [Image1,setImage1] = useState('');\r\n    //const [Image2,setImage2] = useState('');\r\n\r\n    const document:any = {Image1:'',Image2:''};\r\n    const [Documents,setDocuments]:any = useState([]);\r\n\r\n    useEffect(()=>{\r\n        addDocument();\r\n        return ()=>{ \r\n            setDocuments([]);\r\n        }\r\n    },[]);\r\n\r\n    const addDocument = ()=>{\r\n        if(Documents.length >=2 ) return;\r\n        let docs = [...Documents];\r\n        docs.push({...document});\r\n        setDocuments(docs);\r\n    }\r\n    const removeDocument = (index:number)=>{\r\n        console.log(index)\r\n        let docs = [...Documents];\r\n        if (index > -1) {\r\n            docs.splice(index, 1);\r\n        }\r\n        setDocuments(docs);\r\n    }\r\n\r\n    const updateImage = (index:number,field:string,imageBase64:string)=>{\r\n        let docs = [...Documents];\r\n        docs[index][field] = imageBase64;\r\n        setDocuments(docs);\r\n    }\r\n\r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            sid:qParam.sid,\r\n            ServiceCode:props.Service.ServiceCode,\r\n            YourReference,\r\n            Documents,\r\n        }\r\n        let res:any = await client.post(\"trustid/check\",params);\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                window.snakAlert.success(res.data);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n     \r\n    return (\r\n        <>\r\n        <BlockUi tag=\"div\" blocking={processing}>\r\n        <ValidatorForm\r\n                onSubmit={handleSubmit}\r\n                onError={errors => {\r\n                    window.snakAlert.error(\"Please correct the highlight fields\");\r\n                }}\r\n            >\r\n            <Grid container spacing={3}>\r\n                <Grid item><img style={{width:'200px'}} src={sampleImg1}/></Grid>\r\n                <Grid item><img style={{width:'200px'}} src={sampleImg2}/></Grid>\r\n                <Grid item><img style={{width:'200px'}} src={sampleImg3}/></Grid>\r\n            </Grid>\r\n             \r\n            <Grid container>\r\n                <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                    <TextValidator\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            fullWidth\r\n                            label=\"Your Reference\"\r\n                            name=\"YourReference\"\r\n                            autoFocus\r\n                            onChange={(e:any)=>{ setYourReference(e.target.value) }}\r\n                            validators={['required']}\r\n                            errorMessages={['Reference is required']}\r\n                            value={YourReference}\r\n                            disabled={processing}\r\n                            inputProps={{ maxLength: 50 }}\r\n                        />\r\n                    {Documents && Documents.map((doc:any,index:number)=>(\r\n                        <Document key={index} index={index} removeDocument={removeDocument} updateImage={updateImage} />    \r\n                    ))}\r\n                    {Documents && Documents.length <2? <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={addDocument}><Icon>add</Icon></Button>:''}\r\n                    \r\n                </Grid>\r\n                <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                <hr/>\r\n                    <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                    <div style={{float:'right'}}>\r\n                        <br/>\r\n                        <Button disabled={processing}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\">Perform Check </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </ValidatorForm>\r\n        </BlockUi>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst Document = (props:any)=>{\r\n    \r\n    return (\r\n        <>\r\n            <div style={{padding:'10px',background:'#f1f1f1',marginBottom:'10px',position:'relative'}}>\r\n                <div style={{position:'absolute',right:'10px',zIndex:100, display:(props.index>0)?'':'none'}}  >\r\n                    <IconButton color=\"secondary\" onClick={()=>{props.removeDocument(props.index)}}> <DeleteIcon/>  </IconButton>\r\n                </div>\r\n                \r\n                <h2>Document {(props.index+1)}</h2>\r\n                <h4 className=\"subheading\">Upload Front Side Image:</h4>\r\n                <FileInputComponent style={{background:\"#e1e1e1\"}}\r\n                    labelText=\"\"\r\n                    labelStyle={{fontSize:14}}\r\n                    multiple={false}\r\n                    textFieldComponent={<TextField variant=\"outlined\" fullWidth />}\r\n                    buttonComponent={<Button variant=\"contained\" color=\"primary\">Browse</Button>}\r\n                    callbackFunction={(file_arr)=>{\r\n                        //setImage1(file_arr.base64);\r\n                        props.updateImage(props.index,'Image1',file_arr.base64)\r\n                    }}\r\n                    accept=\"image/*\" \r\n                />\r\n                <h4 className=\"subheading\">Upload Rear Side Image: (optional)</h4>\r\n                <FileInputComponent\r\n                    labelText=\"\"\r\n                    labelStyle={{fontSize:14}}\r\n                    multiple={false}\r\n                    textFieldComponent={<TextField variant=\"outlined\" fullWidth />}\r\n                    buttonComponent={<Button variant=\"contained\" color=\"primary\">Browse</Button>}\r\n                    callbackFunction={(file_arr)=>{\r\n                        props.updateImage(props.index,'Image2',file_arr.base64)\r\n                    }}\r\n                    accept=\"image/*\" \r\n                />\r\n                \r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TrustIDService;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\common\\SubscriptionValidator.tsx",["1372","1373"],"import React,{useState,useEffect,useCallback} from 'react';\r\nimport client from '../services/client';\r\nimport {useParams} from 'react-router-dom';\r\nimport { LinearProgress, Paper } from '@material-ui/core';\r\nimport AlertMessage from './AlertMessage';\r\n\r\nconst SubscriptionValidator = (props:any)=>{\r\n    const params = useParams();\r\n\r\n    const [IsValid,setIsValid] = useState(false);\r\n    const [processing,setprocessing] = useState(false);\r\n\r\n    const validate = useCallback(async() => {\r\n        setprocessing(true);\r\n        let res = await client.get('mySubscription/isExpired/',{sid:params.sid});\r\n        if(!res.error){\r\n            setIsValid(res.data==true);\r\n        }\r\n        setprocessing(false);\r\n    },[params]);\r\n\r\n    useEffect(()=>{\r\n        validate();\r\n    },[]);\r\n\r\n    if(IsValid){\r\n        return props.children;\r\n    }\r\n    if(processing){\r\n        return (\r\n            <LinearProgress className=\"progress-bar\"/>\r\n        )\r\n    }else{\r\n        return (\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <AlertMessage message={{type:'error',message:'Selected subscription is expired or not valid.'}}/>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubscriptionValidator;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\myResults\\index.tsx",["1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport client from '../../services/client';\r\nimport util from '../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\nimport BlockUi from 'react-block-ui';\r\nimport 'react-block-ui/style.css';\r\n\r\n\r\n// child components\r\nimport Filter from './Filter';\r\nimport Listing from './Listing';\r\n\r\nimport {VENDORS} from '../../const';\r\n\r\n// result preview pages\r\nimport IDAMLResult from '../veriphy/IDAMLResult';\r\nimport TrustIdResult from '../trustid/TrustIdResult';\r\nimport YitoResult from '../yoti/YitoResult';\r\nimport CreditSafeResult from '../creditSafe/CreditSafeResult';\r\n\r\nconst MyResults:React.FC = ()=>{\r\n    const [processing,setProcessing] = useState(false);\r\n\r\n    const [data,setData]:any = useState({});\r\n    const [filters,setFilters] = useState({});\r\n    const rowPerPage = 20;\r\n\r\n    const [VeriphyIDAMLDialog,setVeriphyIDAMLDialog] = useState({open:false,data:{}});\r\n    const [TrustIdDialog,setTrustIdDialog] = useState({open:false,data:{}});\r\n    const [YotiDialog,setYotiDialog] = useState({open:false,data:{},inline:false});\r\n\r\n    const [CreditSafeDialog,setCreditSafeDialog] = useState({open:false,data:{}});\r\n    \r\n    const search = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get(\"logs/list/\",{...filters,rowPerPage});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setData({});\r\n        }else{\r\n            if(res.success && res.data){\r\n                setData(res.data);\r\n                \r\n            }else{\r\n                setData({});\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n     \r\n    useEffect(()=>{\r\n        // if filters present \r\n        if(Object.keys(filters).length > 0)\r\n            search();\r\n    },[filters]);\r\n\r\n    const handlerSearch = (newFilter:any)=>{\r\n        setFilters({...filters,...newFilter});\r\n    }\r\n\r\n    const handlerViewResults = async(row:any)=>{\r\n        setProcessing(true);\r\n        let res = await client.get('logs/get',{id:row.ID});\r\n        if(res.success){\r\n            if(res.data.VendorCode == VENDORS.veriphy){\r\n                if(res.data.Service == 'IDAML'){\r\n                    setVeriphyIDAMLDialog({open:true,data:res.data});\r\n                }\r\n            }else if(res.data.VendorCode == VENDORS.trustid){\r\n                setTrustIdDialog({open:true,data:res.data});\r\n            }else if(res.data.VendorCode == VENDORS.yoti){\r\n                setYotiDialog({...YotiDialog,open:true,data:res.data});\r\n            }else if(res.data.VendorCode == VENDORS.creditSage){\r\n                setCreditSafeDialog({...CreditSafeDialog,open:true,data:res.data});\r\n            }\r\n        }else{\r\n            window.snakAlert.error(res.message);\r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>My Checklist Results <span>List of all subscription results</span></h2>\r\n\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <Filter onSearch={handlerSearch}/>\r\n            </Paper>\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n            \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <BlockUi tag=\"div\" blocking={processing}>\r\n                    <Listing rowPerPage={rowPerPage} data={data} \r\n                        onPagingChange={handlerSearch} \r\n                        viewResults={handlerViewResults}\r\n                        />      \r\n                </BlockUi>\r\n            </Paper>\r\n            \r\n            <IDAMLResult\r\n                dialog={VeriphyIDAMLDialog}\r\n                onClose={()=>{ setVeriphyIDAMLDialog({open:false,data:{}}) }}\r\n            />\r\n\r\n            <TrustIdResult\r\n                dialog={TrustIdDialog}\r\n                onClose={()=>{ setTrustIdDialog({open:false,data:{}}) }}\r\n            />\r\n\r\n            <YitoResult\r\n                dialog={YotiDialog}\r\n                onClose={()=>{ setYotiDialog({...YotiDialog,open:false,data:{}}) }}\r\n            />\r\n\r\n            <CreditSafeResult\r\n                dialog={CreditSafeDialog}\r\n                onClose={()=>{ setCreditSafeDialog({...CreditSafeDialog,open:false,data:{}}) }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default MyResults;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\myResults\\Listing.tsx",["1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429"],"import { Box, Breadcrumbs, Button, Card, CardContent, DialogActions, DialogContent, DialogTitle, Grid, Icon, IconButton, LinearProgress,Link, List, ListItem, ListItemText, Paper, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect,useMemo} from 'react';\r\nimport DataTable  from 'react-data-table-component';\r\nimport u from '../../services/util';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {TRUSTID_SERVICES,VERIPHY_APIS,VENDORS,YOTI_SERVICES} from '../../const';\r\n\r\n\r\n// get service name from log.ServiceType \r\nconst getServiceName = (row:any)=>{\r\n    if(row.VendorCode == VENDORS.trustid){\r\n        let service = TRUSTID_SERVICES.filter((s)=>{\r\n            return s.ServiceCode == row.ServiceType;\r\n        });\r\n        if(service) return service[0].Name;\r\n    }else if(row.VendorCode == VENDORS.veriphy){\r\n        let service = VERIPHY_APIS.filter((s)=>{\r\n            return s.ServiceCode == row.ServiceType;\r\n        });\r\n        if(service) return service[0].Name;\r\n    }else if(row.VendorCode == VENDORS.yoti){\r\n        let service = YOTI_SERVICES.filter((s)=>{\r\n            return s.ServiceCode == row.ServiceType;\r\n        });\r\n        if(service) return service[0].Name;\r\n    }else if(row.VendorCode == VENDORS.creditSage){\r\n        return row.Service;\r\n    }\r\n}  \r\n\r\n\r\nconst Listing = (props:any)=>{\r\n    \r\n    const columns = [\r\n        {\r\n          name: 'Your Reference',\r\n          selector: 'Reference',\r\n          compact:true,\r\n          width:'220px',\r\n        },\r\n        {\r\n            name: 'Vendor',\r\n            selector: 'VendorCode',\r\n            compact:true,\r\n        },\r\n        {\r\n            name: 'Service',\r\n            compact:true,\r\n            //width:'100px',\r\n            cell:(row:any) => \r\n                <>\r\n                    {getServiceName(row)}          \r\n                </>\r\n        }, \r\n        {\r\n            name: 'Date',\r\n            compact:true,\r\n            //width:'100px',\r\n            cell:(row:any) => \r\n                <>\r\n                    {u.format.datetime(row.DateCreated)}          \r\n                </>\r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: 'Status',\r\n            compact:true,\r\n            cell:(row:any)=><>\r\n                <div className={`status ${row.Status.toLowerCase()}`}>{row.Status}</div>\r\n            </>\r\n        },\r\n        {\r\n            name: 'Action',\r\n            compact:true,\r\n            //width:'100px',\r\n            right:true,\r\n            cell:(row:any) => \r\n            <>\r\n                {row.Status!=\"Pending\"?\r\n                    <Tooltip title=\"View Check Result\">\r\n                        <IconButton size=\"small\" className=\"action\" onClick={()=>{props.viewResults(row)}} >\r\n                            <Icon>description</Icon>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                :''\r\n                }\r\n            </>\r\n        }\r\n      ];\r\n\r\n    return(\r\n        <>\r\n        <DataTable\r\n            title=\"\"\r\n            noHeader={true}\r\n            columns={columns}\r\n            dense={true}\r\n            data={props.data.rows}\r\n            highlightOnHover={true}\r\n            pagination={true}\r\n            paginationServer={true}\r\n            paginationTotalRows={props.data.count}\r\n            paginationPerPage={props.rowPerPage}\r\n            paginationComponentOptions={ {noRowsPerPage: true}}\r\n            paginationDefaultPage={1}\r\n            paginationResetDefaultPage={1==1}\r\n            onChangePage={(page:number)=>{props.onPagingChange({page:page})}}\r\n            expandableRows\r\n            expandableRowsComponent={<ExpandedComponent data={props.data} getServiceName={getServiceName}  />}\r\n        />\r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nconst ExpandedComponent = ({data}:any)=>{\r\n    return (\r\n        <>\r\n            <div className=\"grid-result-list\" >\r\n                \r\n                <div className=\"field\">\r\n                    <span className=\"key\">Your Reference:</span>\r\n                    <div className=\"value\"> {data.Reference} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Vendor:</span>\r\n                    <div className=\"value\"> {data.VendorCode} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Service:</span>\r\n                    <div className=\"value\"> {getServiceName(data) } </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Status:</span>\r\n                    <div className=\"value\"> {data.Status} </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <span className=\"key\">Date:</span>\r\n                    <div className=\"value\"> {u.format.datetime(data.DateCreated)} </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Listing;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\myResults\\Filter.tsx",["1430","1431","1432"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, FormControl, Grid, Icon,InputLabel,MenuItem,Select,TextField} from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport {PRICING_TYPE} from '../../const';\r\nimport client from '../../services/client';\r\n\r\nconst Filter = (props:any)=>{\r\n    const [Term,setTerm] = useState('');\r\n    //const [pricingType,setpricingType] = useState(\"\");\r\n    const [vendors,setVendors]:any = useState([]);\r\n    const [vendorId,setvendorId]:any = useState(0);\r\n\r\n    const getVendors = async()=>{\r\n        let res = await client.get(\"admin/vendors/list\",{});\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n            setVendors([])\r\n        }else{\r\n            setVendors(res.data);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getVendors();\r\n        handlerSearch();\r\n    },[]);\r\n\r\n    const handlerSearch = ()=>{\r\n        props.onSearch({type:'active',term:Term,page:1,vendorId});\r\n    }\r\n    const handlerClear = ()=>{\r\n        setTerm('');\r\n        props.onSearch({type:'active',term:'',vendorId:0,page:1});\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} >\r\n            <Grid item md={4} sm={6} xs={12}>\r\n                <TextField variant=\"outlined\" size=\"small\" fullWidth label=\"Search By Reference\"\r\n                    value={Term}\r\n                    onChange={(e:any)=>{setTerm(e.target.value)}} \r\n                />\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={12}>\r\n                <FormControl size=\"small\" variant=\"outlined\" fullWidth>\r\n                    <InputLabel id=\"labelStatus\">Vendor</InputLabel>\r\n                    <Select \r\n                        onChange={(e:any)=>{setvendorId(e.target.value)}}\r\n                        value={vendorId}\r\n                        labelId=\"labelStatus\"\r\n                        label=\"Status\"\r\n                        >\r\n                        <MenuItem value=\"\">All</MenuItem>\r\n                        {\r\n                            vendors && vendors.map((row)=>(\r\n                                <MenuItem value={row.VendorCode} key=\"monthly\">{row.VendorName}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item md={2} sm={6} xs={6}>\r\n                <Button onClick={handlerSearch} variant=\"contained\" color=\"primary\">\r\n                    <Icon>search</Icon>\r\n                </Button> &nbsp;\r\n                <Button onClick={handlerClear} variant=\"contained\">\r\n                    <Icon>clear</Icon>\r\n                </Button>\r\n            </Grid> \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default Filter;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\trustid\\TrustIdResult.tsx",["1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link, Dialog, AppBar, Toolbar, Typography  } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n// get log ID and generate results by fetching record from db\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }));\r\n\r\nconst TrustIdResult = (props:any)=>{\r\n    const classes = useStyles();\r\n\r\n    //const [dialog, setDialog] = React.useState(props.dialog);\r\n    const getPDFString = ()=>{\r\n      if(props.dialog && props.dialog.data && props.dialog.data.Response){\r\n        return props.dialog.data.Response;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    return(\r\n        <>  \r\n        <Dialog fullScreen open={props.dialog.open} onClose={props.close}>\r\n          <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n              <IconButton edge=\"start\" color=\"inherit\" onClick={props.onClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                  TrustID Check Result\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n              <embed \r\n                src={`data:application/pdf;base64,${getPDFString()}`}\r\n                type=\"application/pdf\"\r\n              ></embed> \r\n            </Paper>\r\n        </Dialog>              \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TrustIdResult;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\index.tsx",["1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n\r\nimport SubscriptionValidator from '../../common/SubscriptionValidator';\r\n\r\nimport {YOTI_SERVICES} from '../../const';\r\nimport IdentityVerification from './IdentityVerification';\r\n\r\n\r\nconst Yoti = ()=>{\r\n    const [Service,setService]:any = useState({Type:'',ServiceCode:''});\r\n \r\n    useEffect(()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    },[]);\r\n\r\n    const HandlerOnBack = ()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <SubscriptionValidator>\r\n                {Service && Service.Type==''?\r\n                    <>\r\n                        <h1>Yoti Check List</h1>\r\n                        <Paper elevation={0} className=\"section mt-10\">\r\n                            <Grid spacing={1} container>\r\n                                {YOTI_SERVICES && YOTI_SERVICES.map((service:any,index:number)=>(\r\n                                    <>\r\n                                        <Grid item lg={3} md={4} sm={4} xs={12} key={index}>\r\n                                            <div className=\"box-wraper\">\r\n                                                <div className=\"box\">\r\n                                                    <h2>{service.Name}</h2>\r\n                                                    <p>{service.Title}</p>\r\n                                                </div>\r\n                                                <Button variant=\"contained\" fullWidth \r\n                                                    onClick={()=>{\r\n                                                        setService({Type:service.Type,ServiceCode:service.ServiceCode})\r\n                                                    }}\r\n                                                >Go</Button>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </>\r\n                                ))}\r\n                                \r\n                            </Grid>\r\n                        </Paper>    \r\n                    </>\r\n                    :\r\n                    <>\r\n                        <ServicePage onBack={HandlerOnBack} Service = {Service}/>\r\n                    </>\r\n                }\r\n            </SubscriptionValidator>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ServicePage:any = (props:any)=>{\r\n    const getService = ()=>{\r\n        let Service:any = YOTI_SERVICES.filter((service:any)=>{\r\n            return service.ServiceCode == props.Service.ServiceCode;\r\n        });\r\n        if(Service) return Service[0];\r\n    }\r\n\r\n    let Service:any = getService();\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"serviceHeading\">{Service.Title}</h1>\r\n            <div style={{textAlign:'right'}}>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={props.onBack}>&lt;&lt; Back</Button>\r\n            </div>\r\n                        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                <IdentityVerification Service={Service}/>\r\n            </Paper>\r\n        </>\r\n    );    \r\n}\r\n\r\nexport default Yoti;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\IdentityVerification.tsx",["1465","1466"],"import { Button, Grid, LinearProgress } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport client from '../../services/client';\r\nimport { ValidatorForm,TextValidator,SelectValidator } from 'react-material-ui-form-validator';\r\n\r\nwindow.addEventListener(\r\n    'message',\r\n    function(event) {\r\n      console.log('Message received', event.data);\r\n\r\n      if (event.data.eventType === 'SUCCESS') {\r\n        // Act upon success\r\n        console.log(event.data)\r\n      } else if (event.data.eventType === 'ERROR') {\r\n        // Act upon error\r\n       const errorCode = event.data.eventCode;\r\n       console.log(errorCode)\r\n      }\r\n    }\r\n  );\r\n\r\nconst IdentityVerification = (props:any)=>{\r\n    const qParam = useParams();\r\n\r\n    const [processing,setProcessing] = useState(false);\r\n    const [iFrameURL,setiFrameURL] = useState('');\r\n    const [YourReference,setYourReference] = useState('');\r\n\r\n    const handleSubmit = async(data:any)=>{\r\n        setProcessing(true);\r\n\r\n        let params = {\r\n            type:props.Service.ServiceCode,\r\n            YourReference:YourReference,\r\n            sid:qParam.sid\r\n        }\r\n\r\n        let res:any = await client.post(\"yoti/check\",params);\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setiFrameURL(res.data);\r\n            }\r\n        }\r\n\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        //initialize();\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            {!iFrameURL?\r\n            \r\n            \r\n            <ValidatorForm\r\n                onSubmit={handleSubmit}\r\n                onError={errors => {\r\n                    window.snakAlert.error(\"Please correct the highlight fields\");\r\n                }}>\r\n                <Grid container>\r\n                    <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                        <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Your Reference\"\r\n                                name=\"YourReference\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setYourReference(e.target.value) }}\r\n                                validators={['required']}\r\n                                errorMessages={['Reference is required']}\r\n                                value={YourReference}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 50 }}\r\n                            />\r\n                        \r\n                    </Grid>\r\n                    <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                    <hr/>\r\n                        <div style={{float:'right'}}>\r\n                            <br/>\r\n                            <Button disabled={processing}\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\">Start Check </Button>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </ValidatorForm>\r\n            :\r\n                <>\r\n                {iFrameURL ? \r\n                    <>\r\n                    <strong>Tracking Reference: {YourReference}</strong>\r\n                    <iframe src={iFrameURL} allow=\"camera\" style={{width:'100%',height:'800px',border:'0'}}/>\r\n                    </>\r\n                :''}\r\n                </>\r\n            }\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default IdentityVerification;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\YotoError.tsx",["1467","1468","1469","1470","1471"],"import { Button, Grid, LinearProgress, Paper } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport {useParams,Link} from 'react-router-dom';\r\nimport AlertMessage from '../../common/AlertMessage';\r\nimport client from '../../services/client';\r\n\r\n\r\nconst YotiError = ()=>{\r\n\r\n    const qParams = useParams();\r\n    const message = (qParams.yotiErrorCode)?qParams.yotiErrorCode:'An unknown error occurred';\r\n    return (\r\n        <>\r\n            <h1>Yoti Check: Error</h1>\r\n            <Paper elevation={0} className=\"section mt-10\">\r\n                <AlertMessage message={{type:'error',message:message}}/>\r\n\r\n                <div style={{textAlign:'right',paddingTop:'10px'}}>\r\n                    <Button component={Link} to={`/yoti/${qParams.sid}`} size=\"small\" variant=\"contained\" color=\"primary\" >&lt;&lt; Back</Button>\r\n                </div>\r\n            </Paper>\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default YotiError;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\YotiSuccess.tsx",["1472","1473","1474"],"import { Button, Grid, LinearProgress, Paper } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport {useParams,Link} from 'react-router-dom';\r\nimport AlertMessage from '../../common/AlertMessage';\r\nimport client from '../../services/client';\r\nimport u from '../../services/util';\r\nimport YitoResult from './YitoResult';\r\n\r\nconst YotiSuccess = ()=>{\r\n    const qParam = useParams();\r\n    const [processing,setProcessing] = useState(false);\r\n    const [Message,setMessage] = useState('');\r\n    const [DialogResult,setDialogResult] = useState({data:{},open:true,inline:true});\r\n\r\n    const getResult = async()=>{\r\n        setProcessing(true);\r\n        let res:any = await client.get('yoti/getResult',{sid:qParam.sid});\r\n        if(res.success){\r\n            if(res.data){\r\n                setDialogResult({...DialogResult,data:res.data});\r\n            }else{\r\n                setDialogResult({...DialogResult,data:{}});\r\n            }\r\n        }else{\r\n            setMessage(res.message); \r\n        }\r\n        setProcessing(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getResult();\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            <h1>Yoti Check: Result</h1>\r\n            <Paper elevation={0} className=\"section mt-10\">\r\n                {Message?<AlertMessage message={{type:'error',message:Message}}/>:''}\r\n                \r\n                <div style={{textAlign:'right',paddingTop:'10px'}}>\r\n                    <Button component={Link} to={`/yoti/${qParam.sid}`} size=\"small\" variant=\"contained\" color=\"primary\" >&lt;&lt; Back</Button>\r\n                </div>\r\n            </Paper>\r\n            \r\n            <YitoResult \r\n                dialog={DialogResult}\r\n                onClose={()=>{ setDialogResult({...DialogResult,open:false,data:{}}) }}\r\n            />\r\n\r\n            <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default YotiSuccess;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\yoti\\YitoResult.tsx",["1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link, Dialog, AppBar, Toolbar, Typography  } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AlertMessage from '../../common/AlertMessage';\r\n\r\n// get log ID and generate results by fetching record from db\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }));\r\n\r\nconst YitoResult = (props:any)=>{\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <>  \r\n        {props.dialog.inline?\r\n            <RenderResult data={props.dialog.data}/>\r\n        :\r\n            <Dialog fullScreen open={props.dialog.open} onClose={props.close}>\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={props.onClose} aria-label=\"close\">\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Yoti Check Result\r\n                    </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Paper elevation={1} className=\"section mt-10\">\r\n                    <RenderResult data={props.dialog.data}/>\r\n                </Paper>\r\n            </Dialog>              \r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nconst RenderResult = (props:any)=>{\r\n\r\n    const [Result,setResult]:any = useState({});\r\n    const getResult = ()=>{\r\n      if(props.data && props.data && props.data.Response){\r\n        return props.data.Response;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    const isEmpty = (data:any)=>{\r\n        return  Object.keys(data).length===0;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let result = getResult();\r\n        if(result && !isEmpty(result)){\r\n            setResult(JSON.parse(result));\r\n        }\r\n        \r\n    },[props])\r\n\r\n    const json:any = props.data;\r\n    return(\r\n        <>\r\n            {Result.state == 'ONGOING'? <AlertMessage message={{type:'warning',message:'Process is still on-going, please check your results after few minutes'}}/> :''}\r\n\r\n            {!isEmpty(Result)?\r\n            <div className=\"yoti\">\r\n                <div>Reference: <strong>{Result.userTrackingId}</strong></div>\r\n                <div>State: <span className={`status ${Result.state.toLowerCase()}`}>{Result.state}</span> </div>\r\n                <h3>Checks</h3>\r\n                {Result.checks && Result.checks.map((check:any,index:number)=>(\r\n                    <Check check={check} key={index} />\r\n                ))}\r\n                <Media resources={Result.resources} sessionId={Result.sessionId} />\r\n            </div>\r\n            :''}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Check = (props:any)=>{\r\n    let check = props.check;\r\n    return (\r\n        <>\r\n            <table className=\"table checks\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Type</td>\r\n                        <td><strong>{check.type}</strong></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>ID</td>\r\n                        <td>{check.id}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>State</td>\r\n                        <td>\r\n                            <span className={check.state=='DONE'?'success':'secondary'}>\r\n                                {check.state}\r\n                            </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Created</td>\r\n                        <td>{check.created}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Last Updated</td>\r\n                        <td>{check.lastUpdated}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Resources Used</td>\r\n                        <td>{check.resourcesUsed.join(', ')}</td>\r\n                    </tr>\r\n                    {check.report && check.report.recommendation?\r\n                    <>\r\n                        <tr><td><strong>Recommendation</strong></td></tr>\r\n                        <tr>\r\n                            <td>{check.report.recommendation.reason}</td>\r\n                            <td>{check.report.recommendation.value}</td>\r\n                        </tr>\r\n                    </>\r\n                    :''}\r\n                    {check.report && check.report.breakdown?\r\n                    <>\r\n                        <tr><td><strong>Breakdown</strong></td></tr>\r\n                        {check.report.breakdown.map((breakdown,index)=>(\r\n                            <>\r\n                                <tr>\r\n                                    <td>subCheck</td>\r\n                                    <td>{breakdown.subCheck}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>result</td>\r\n                                    <td>{breakdown.result}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colSpan={2}>\r\n                                        <table>\r\n                                            {breakdown.details && breakdown.details.map((detail:any,dindex:number)=>(\r\n                                                <tr key={dindex}>\r\n                                                    <td>{detail.name}</td>\r\n                                                    <td>{detail.value}</td>\r\n                                                </tr>\r\n                                            ))}\r\n                                            \r\n                                        </table>\r\n                                    </td>\r\n                                </tr>\r\n                            </>\r\n                        ))}\r\n                        \r\n                    </>\r\n                    :''}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Media = (props)=>{\r\n    return (\r\n        <>\r\n            <table>\r\n                {props.resources.idDocuments && props.resources.idDocuments.map((doc:any,index:number)=>(\r\n                    <>\r\n                        {doc.documentIdPhoto && doc.documentIdPhoto.media.type == 'IMAGE'?\r\n                            <tr key={index}>\r\n                                <td>{doc.documentType}</td>\r\n                                <td><img src={`/api/yoti/media?mediaId=${doc.documentIdPhoto.media.id}&DOC_SCAN_SESSION_ID=${props.sessionId}`} /></td>\r\n                            </tr>    \r\n                        :''}\r\n                    </>\r\n                ))}\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default YitoResult;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\creditSafe\\index.tsx",["1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510"],"import React,{useState,useEffect} from 'react';\r\nimport { Button, Card, CardContent, Grid, Icon, IconButton, List, Paper, TextField, Tooltip,Select, MenuItem, FormControl, InputLabel, Badge,Link  } from '@material-ui/core';\r\nimport {Link as RLink} from 'react-router-dom';\r\n//import TrustIDService from './TrustIDService';\r\nimport SubscriptionValidator from '../../common/SubscriptionValidator';\r\n\r\nimport {CreditSafe_SERVICES} from '../../const';\r\nimport CreditSafeCheck from './CreditSafeCheck';\r\n\r\n\r\nconst CreditSafe = ()=>{\r\n    const [Service,setService]:any = useState({Type:'',ServiceCode:''});\r\n \r\n    useEffect(()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    },[]);\r\n\r\n    const HandlerOnBack = ()=>{\r\n        setService({Type:'',ServiceCode:''});\r\n    }\r\n    \r\n\r\n    return (\r\n        <>\r\n            <SubscriptionValidator>\r\n                {Service && Service.Type==''?\r\n                    <>\r\n                        <h1>CreditSafe Check List</h1>\r\n                        <Paper elevation={0} className=\"section mt-10\">\r\n                            <Grid spacing={1} container>\r\n                                {CreditSafe_SERVICES && CreditSafe_SERVICES.map((service:any,index:number)=>(\r\n                                    <>\r\n                                        <Grid item lg={3} md={4} sm={4} xs={12} key={index}>\r\n                                            <div className=\"box-wraper\">\r\n                                                <div className=\"box\">\r\n                                                    <h2>{service.Name}</h2>\r\n                                                    <p>{service.Title}</p>\r\n                                                </div>\r\n                                                <Button variant=\"contained\" fullWidth \r\n                                                    onClick={()=>{\r\n                                                        setService({Type:service.Type,ServiceCode:service.ServiceCode})\r\n                                                    }}\r\n                                                >Go</Button>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </>\r\n                                ))}\r\n                                \r\n                            </Grid>\r\n                        </Paper>    \r\n                    </>\r\n                    :\r\n                    <>\r\n                        <ServicePage onBack={HandlerOnBack} Service = {Service}/>\r\n                    </>\r\n                }\r\n            </SubscriptionValidator>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ServicePage:any = (props:any)=>{\r\n    const getService = ()=>{\r\n        let Service:any = CreditSafe_SERVICES.filter((service:any)=>{\r\n            return service.ServiceCode == props.Service.ServiceCode;\r\n        });\r\n        if(Service) return Service[0];\r\n    }\r\n\r\n    let Service:any = getService();\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"serviceHeading\">{Service.Title}</h1>\r\n            <div style={{textAlign:'right'}}>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={props.onBack}>&lt;&lt; Back</Button>\r\n            </div>\r\n                        \r\n            <Paper elevation={1} className=\"section mt-10\">\r\n                 <CreditSafeCheck />\r\n            </Paper>\r\n        </>\r\n    );    \r\n}\r\n\r\nexport default CreditSafe;","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\creditSafe\\CreditSafeCheck.tsx",["1511","1512","1513","1514","1515"],"import React,{useState,useEffect,memo,useCallback,useRef} from 'react';\r\nimport { Button, Grid,  MenuItem, Switch, LinearProgress, FormGroup, FormControlLabel, TextField, Icon ,Dialog ,DialogTitle, DialogContent, DialogContentText, Divider, IconButton   } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { ValidatorForm,TextValidator,SelectValidator } from 'react-material-ui-form-validator';\r\nimport {Link as RLink,useParams} from 'react-router-dom';\r\nimport client from '../../services/client';\r\nimport {Countries} from '../../const';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport BlockUi from 'react-block-ui';\r\nimport 'react-block-ui/style.css';\r\nimport CreditSafeResult from './CreditSafeResult';\r\n\r\nconst CreditSafeCheck = (props:any)=>{\r\n    const qParam = useParams();\r\n    \r\n    const [processing,setProcessing] = useState(false);\r\n    const [DialogResult,setDialogResult] = useState({open:false,data:{}});\r\n    const [Help,setHelp] = useState(false);\r\n\r\n    // for fields\r\n    const [Reference,setReference] = useState('');\r\n    const [Threshold,setThreshold] = useState(70);\r\n    const [PEP,setPEP] = useState(false);\r\n    const [PreviousSanctions,setPreviousSanctions] = useState(false);\r\n    const [CurrentSanctions,setCurrentSanctions] = useState(false);\r\n    const [LawEnforcement,setLawEnforcement] = useState(false);\r\n    const [FinancialRegulator,setFinancialRegulator] = useState(false);\r\n    const [Insolvency,setInsolvency] = useState(false);\r\n    const [DisqualifiedDirector,setDisqualifiedDirector] = useState(false);\r\n    const [AdverseMedia,setAdverseMedia] = useState(false);\r\n    const [Forename,setForename] = useState('');\r\n    const [Surname,setSurname] = useState('');\r\n    const [Middlename,setMiddlename] = useState('');\r\n    const [DateOfBirth,setDateOfBirth] = useState('1952-10-23');\r\n    const [Address,setAddress] = useState('');\r\n    const [City,setCity] = useState('');\r\n    const [County,setCounty] = useState('');\r\n    const [Postcode,setPostcode] = useState('');\r\n    const [Country,setCountry] = useState('');\r\n\r\n    \r\n    const handleSubmit = async()=>{\r\n        setProcessing(true);\r\n        let params = {\r\n            sid:qParam.sid,Reference,\r\n            Threshold,Country,PEP,PreviousSanctions,CurrentSanctions,LawEnforcement,\r\n            FinancialRegulator,Insolvency,DisqualifiedDirector,AdverseMedia,\r\n            Forename,Surname,Middlename,DateOfBirth,Address,City,County,Postcode,\r\n        }\r\n        let res:any = await client.post(\"creditsafe/check\",params);\r\n        if(!res.success){\r\n            window.snakAlert.error(res.message);\r\n        }else{\r\n            if(res.success && res.data){\r\n                setDialogResult({open:true,data:res.data});\r\n                //console.log(res.data)\r\n                //window.snakAlert.success(res.data);\r\n            }else{\r\n                window.snakAlert.error(res.message);\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    }\r\n    \r\n    const handlerHelp = ()=>{\r\n        setHelp(true)\r\n    }\r\n\r\n    useEffect(()=>{\r\n         \r\n    },[])\r\n\r\n    return (\r\n        <>    \r\n        <BlockUi tag=\"div\" blocking={processing}>\r\n        <ValidatorForm \r\n                onSubmit={handleSubmit}\r\n                onError={errors => {\r\n                    window.snakAlert.error(\"Please correct the highlight fields\");\r\n                }}\r\n                \r\n            >\r\n            <Grid container>\r\n                <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                    <TextValidator\r\n                        variant=\"outlined\"\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        label=\"Your Reference Title\"\r\n                        name=\"Reference\"\r\n                        autoFocus\r\n                        onChange={(e:any)=>{ setReference(e.target.value) }}\r\n                        validators={['required']}\r\n                        errorMessages={['Reference title is required']}\r\n                        value={Reference}\r\n                        disabled={processing}\r\n                        inputProps={{ maxLength: 50 }}\r\n                    />\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={4}>\r\n                            <SelectValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Threshold\"\r\n                                name=\"Threshold\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setThreshold(e.target.value) }}\r\n                                validators={['required']}\r\n                                errorMessages={['Title is required']}\r\n                                value={Threshold}\r\n                                disabled={processing}\r\n                                >\r\n                                <MenuItem value=\"10\">10</MenuItem>\r\n                                <MenuItem value=\"20\">20</MenuItem>\r\n                                <MenuItem value=\"30\">30</MenuItem>\r\n                                <MenuItem value=\"40\">40</MenuItem>\r\n                                <MenuItem value=\"50\">50</MenuItem>\r\n                                <MenuItem value=\"60\">60</MenuItem>\r\n                                <MenuItem value=\"70\">70</MenuItem>\r\n                                <MenuItem value=\"80\">80</MenuItem>\r\n                                <MenuItem value=\"90\">90</MenuItem>\r\n                                <MenuItem value=\"100\">100</MenuItem>\r\n                            </SelectValidator>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <Autocomplete\r\n                                id=\"combo-country\"\r\n                                size=\"small\"\r\n                                options={Countries}\r\n                                onChange={(e,value)=>{ \r\n                                    setCountry(value?value:'')\r\n                                }}\r\n                                getOptionLabel={(option) => option}\r\n                                renderInput={(params) => <TextField {...params} variant=\"outlined\" label=\"Country\" placeholder=\"Country\" size=\"small\" />}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <hr/>\r\n                </Grid>\r\n                <Grid item lg={7} md={9} sm={12} xs={12} style={{position:'relative'}}>\r\n                    <div style={{position:'absolute',right:0,cursor:'pointer'}}>\r\n                        <Icon style={{color:'#6aaeab'}} onClick={handlerHelp}>help</Icon>\r\n                    </div>\r\n                    <Grid container spacing={0}>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={PEP} onChange={(e:any)=>{setPEP(e.target.checked)}} defaultChecked color='primary' />} label=\"PEP\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={PreviousSanctions} onChange={(e:any)=>{setPreviousSanctions(e.target.checked)}}  color='primary' />} label=\"Previous Sanctions\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={CurrentSanctions} onChange={(e:any)=>{setCurrentSanctions(e.target.checked)}} color='primary' />} label=\"Current Sanctions\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={LawEnforcement} onChange={(e:any)=>{setLawEnforcement(e.target.checked)}} color='primary' />} label=\"Law Enforcement\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={FinancialRegulator} onChange={(e:any)=>{setFinancialRegulator(e.target.checked)}} color='primary' />} label=\"Financial Regulator\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={Insolvency} onChange={(e:any)=>{setInsolvency(e.target.checked)}} color='primary' />} label=\"Insolvency\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={DisqualifiedDirector} onChange={(e:any)=>{setDisqualifiedDirector(e.target.checked)}} color='primary' />} label=\"Disqualified Director\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <FormGroup>\r\n                                <FormControlLabel control={<Switch checked={AdverseMedia} onChange={(e:any)=>{setAdverseMedia(e.target.checked)}} color='primary' />} label=\"Adverse Media\" />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <hr/>\r\n                </Grid>\r\n                <Grid item lg={7} md={9} sm={12} xs={12}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Forename\"\r\n                                name=\"Forename\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setForename(e.target.value) }}\r\n                                validators={['required']}\r\n                                errorMessages={['Forename is required']}\r\n                                value={Forename}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 100 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Middle name\"\r\n                                name=\"Middlename\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setMiddlename(e.target.value) }}\r\n                                //validators={['required']}\r\n                                //errorMessages={['Forename is required']}\r\n                                value={Middlename}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 100 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Surname\"\r\n                                name=\"Surname\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setSurname(e.target.value) }}\r\n                                validators={['required']}\r\n                                errorMessages={['Surname is required']}\r\n                                value={Surname}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 100 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Date Of Birth\"\r\n                                name=\"DateOfBirth\"\r\n                                placeholder=\"dd/mm/yyyy\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setDateOfBirth(e.target.value) }}\r\n                                //validators={['required']}\r\n                                //errorMessages={['Date of Birth is required']}\r\n                                value={DateOfBirth}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 10 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={8}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Address\"\r\n                                name=\"Address\"\r\n                                placeholder=\"Address\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setAddress(e.target.value) }}\r\n                                //validators={['required']}\r\n                                //errorMessages={['Date of Birth is required']}\r\n                                value={Address}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 150 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"City\"\r\n                                name=\"City\"\r\n                                placeholder=\"City\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setCity(e.target.value) }}\r\n                                //validators={['required']}\r\n                                //errorMessages={['Date of Birth is required']}\r\n                                value={City}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 50 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"County\"\r\n                                name=\"County\"\r\n                                placeholder=\"County\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setCounty(e.target.value) }}\r\n                                //validators={['required']}\r\n                                //errorMessages={['Date of Birth is required']}\r\n                                value={County}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 100 }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4}>\r\n                            <TextValidator\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Postcode\"\r\n                                name=\"Postcode\"\r\n                                placeholder=\"Postcode\"\r\n                                autoFocus\r\n                                onChange={(e:any)=>{ setPostcode(e.target.value) }}\r\n                                //validators={['required']}\r\n                                //errorMessages={['Date of Birth is required']}\r\n                                value={Postcode}\r\n                                disabled={processing}\r\n                                inputProps={{ maxLength: 20 }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                     \r\n                    \r\n                    <hr/>\r\n                    <LinearProgress className=\"progress-bar\" style={{display:(processing?'':'none')}} />\r\n                    <div style={{float:'right'}}>\r\n                        <br/>\r\n                        <Button disabled={processing}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\">Perform Check </Button>\r\n                    </div>\r\n                   \r\n                </Grid>\r\n\r\n                <Grid item md={6} sm={12} xs={12}>\r\n                    \r\n                </Grid>\r\n            </Grid>   \r\n        </ValidatorForm>\r\n        </BlockUi>\r\n        \r\n        <DialogHelp open={Help} close={()=>{setHelp(false)}} />\r\n        <CreditSafeResult\r\n            dialog={DialogResult}\r\n            onClose={()=>{\r\n                setDialogResult({...DialogResult,open:false,data:{}})\r\n            }}\r\n        />\r\n        </>\r\n    )\r\n\r\n    \r\n}\r\n\r\nconst DialogHelp = (props) => {\r\n    const { open } = props;\r\n    const handleClose = () => {\r\n        props.close();\r\n    };\r\n  \r\n    return (\r\n      <Dialog onClose={handleClose}  aria-labelledby=\"simple-dialog-title\" open={open} maxWidth=\"lg\">\r\n        \r\n        <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\" className='help'>\r\n            <IconButton aria-label=\"close\" onClick={handleClose} style={{float:'right'}}>\r\n                <CloseIcon />\r\n            </IconButton>\r\n                <ul>\r\n                    <li>\r\n                        <strong>PEP</strong><br/>\r\n                        Any individual that is considered a Politically Exposed Person, from Head of State to Members of Parliament, Members of the Board of State Owned Enterprises or Ambassadors and individuals representing their countries interests abroad.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Previous Sanctions</strong><br/>\r\n                        Any individual or entity that has formerly been subject to sanctions by either the European Union, the United Nations, the United States Office of Foreign Assets Control and State Department and Her Majesty’s Treasury in the United Kingdom.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Current Sanctions</strong><br/>\r\n                        Any individual or entity that is subject to sanctions by either the European Union, the United Nations, the United States Office of Foreign Assets Control and State Department and Her Majesty’s Treasury in the United Kingdom.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Law Enforcement</strong><br/>\r\n                        Any individual or entity that has been named in official documentation from Law Enforcement bodies such as the Police or any other agency such as Interpol or the FBI. Also those individuals and entities cited in Court and legal documents of that nature.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Financial Regulator</strong><br/>\r\n                        Any individual or entity that has been fined or in some other way subject to action by any financial regulatory body.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Insolvency </strong><br/>\r\n                        Any individual that has been declared as bankrupt or insolvent.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Disqualified Director </strong><br/>\r\n                        Any individual that has been disqualified as acting as a director of a company.\r\n                    </li>\r\n                    <li>\r\n                        <strong>Adverse Media </strong><br/>\r\n                        Any individual or entity that has been reported in global newspapers, news sites or other media as being involved in financial crime.\r\n                    </li>\r\n                </ul>\r\n                \r\n            </DialogContentText>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\nexport default memo(CreditSafeCheck);","D:\\projects\\ComplianceSearch\\ComplianceSearch-Front\\app\\src\\pages\\creditSafe\\CreditSafeResult.tsx",["1516","1517","1518","1519"],"import React,{useState,useEffect} from 'react';\r\nimport {  IconButton, Paper, Dialog, AppBar, Toolbar, Typography, Grid  } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n// get log ID and generate results by fetching record from db\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },  \r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },    \r\n}));\r\n  \r\n//const result = {\"recordsFound\":1,\"matches\":[{\"score\":73,\"person\":{\"id\":116301,\"title\":{\"description\":\"Mr\"},\"alternativeTitle\":null,\"forename\":\"Vladimir\",\"middlename\":\"Vladimirovich\",\"surname\":\"Putin\",\"dateOfBirth\":\"1952-10-07\",\"yearOfBirth\":1952,\"dateOfDeath\":null,\"yearOfDeath\":null,\"isDeceased\":false,\"gender\":\"Male\",\"nationality\":{\"nationality\":\"Russian\"},\"imageURL\":\"https://secure.c6-intelligence.com/c6images/0020715000/0020712831.jpg\",\"telephoneNumber\":\"\",\"faxNumber\":\"\",\"mobileNumber\":\"\",\"email\":\"\",\"pepLevel\":1,\"isPEP\":true,\"isSanctionsCurrent\":false,\"isSanctionsPrevious\":false,\"isLawEnforcement\":false,\"isFinancialregulator\":false,\"isDisqualifiedDirector\":false,\"isInsolvent\":false,\"isAdverseMedia\":false,\"addresses\":[{\"address1\":\"23 Ilinkina Street\",\"address2\":\"\",\"address3\":\"\",\"address4\":\"\",\"city\":\"Moscow\",\"county\":\"\",\"postcode\":\"103132\",\"country\":{\"name\":\"Russia\"}}],\"aliases\":[{\"title\":{\"description\":\"Mr\"},\"alternativeTitle\":null,\"forename\":\"Владимир\",\"middlename\":\"Владимирович\",\"surname\":\"Путин\"}],\"articles\":[{\"originalURL\":\"http://www.atimes.com/c-asia/BG14Ag02.html\",\"dateCollected\":\"2016-05-16\",\"c6URL\":\"\",\"categories\":[{\"name\":\"PEP\"},{\"name\":\"Adverse Media\"}],\"snippet\":{\"title\":\"UPDATE 2-Money manager, arts patron gets 9 yrs prison\",\"summary\":\"...trimmed...\",\"keywordsMatched\":[\"sentence\",\"arrested\"]}},{\"originalURL\":\"http://www.atimes.com/c-asia/BG14Ag02.html\",\"dateCollected\":\"2016-05-16\",\"c6URL\":\"https://secure.c6-intelligence.com/c6images/0000130000/0000127055.pdf\",\"categories\":[{\"name\":\"PEP\"}],\"snippet\":null}],\"sanctions\":[{\"sanctionType\":{\"description\":\"EU\"},\"isCurrent\":false}],\"notes\":[{\"dataSource\":{\"name\":\"C6 Intelligence\"},\"text\":\"Currently listed as a sanctioned individual by OFAC\"}],\"linkedBusinesses\":[{\"businessId\":41263,\"businessName\":\"Gazprom OJSC\",\"position\":\"Shareholder (4,5%)\"}],\"linkedPersons\":[{\"personId\":4887619,\"name\":\"Nadezhda Aleksandrovna Krasnoyarova\",\"association\":\"Surgutneftegas\"},{\"personId\":1191306,\"name\":\"Lyudmila Alexandrovna Putina\",\"association\":\"Lyudmila Putina is the former spouse of Vladimir Putin\"}],\"politicalPositions\":[{\"description\":\"Former President of the Federation (2 Terms)\",\"from\":\"31 December 1999\",\"to\":\"7 May 2008\",\"country\":{\"name\":\"Russia\"}}]}}]}\r\n\r\nconst CreditSafeResult = (props:any)=>{\r\n    const classes = useStyles();\r\n    let json:any = {recordsFound:0,matches:[]};\r\n    if(props.dialog.data.Response){\r\n      json = JSON.parse(props.dialog.data.Response);\r\n    }\r\n    \r\n    return(\r\n        <>  \r\n        <Dialog fullScreen open={props.dialog.open} onClose={props.onClose}>\r\n          <AppBar className={classes.appBar}>\r\n            <Toolbar>\r\n              <IconButton edge=\"start\" color=\"inherit\" onClick={props.onClose} aria-label=\"close\">\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                  CreditSafe Check Result\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n            <Paper elevation={1} className=\"section mt-10\">\r\n              <h3>Total Record Found: {json.recordsFound?json.recordsFound:0}</h3>\r\n              {json.matches && json.matches.map((match,index)=>(\r\n                <Accordion key={index}>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    >\r\n                    <Typography className={classes.heading}>\r\n                      {match.person.imageURL? \r\n                        <div className='cf-profile-image' style={{background:`url(${match.person.imageURL})`}}></div>\r\n                        : \r\n                        <div className='cf-profile-image'></div> \r\n                      }\r\n                      <p className='cf-profile-bar'>\r\n                        {`${match.person.forename} ${match.person.surname?match.person.surname:''}`}\r\n                        <span style={{position:'absolute', right:'60px'}}>Score: <strong>{match.score}</strong></span>\r\n                      </p>\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Grid container>\r\n                      <Grid item md={12}>\r\n                        <DisplaySingleFields person={match.person}/>\r\n                      </Grid>\r\n                      <Grid item md={6}>\r\n                        <strong>Political Positions:</strong>\r\n                        <ol>\r\n                        {match.person?.politicalPositions.map((p)=>(\r\n                          <li>{p.country?.name} - {p.description}</li>\r\n                        ))}\r\n                        </ol>\r\n                      </Grid>\r\n                      <Grid item md={6}>\r\n                        <strong>Articles:</strong>\r\n                        <ul>\r\n                        {match.person?.articles.map((p)=>(\r\n                          <li>\r\n                            {p.dateCollected} - <a href={p.originalURL} target=\"_blank\">{p.originalURL}</a> <br/>\r\n                            {p.snippet?.summary}<br/>\r\n                            {p.categories.map((c)=>(\r\n                              <><strong>{c.name}, </strong></>\r\n                            ))}\r\n                          </li>\r\n                        ))}\r\n                        </ul>\r\n                      </Grid>\r\n                      <Grid item md={6}>\r\n                        <strong>Sanctions:</strong>\r\n                        <ol>\r\n                        {match.person?.sanctions.map((s:any)=>(\r\n                          <li>{s.sanctionType?.description}</li>\r\n                        ))}\r\n                        </ol>\r\n                      </Grid>\r\n                      <Grid item md={6}>\r\n                        <strong>Linked Persons:</strong>\r\n                        <ul>\r\n                        {match.person?.linkedPersons.map((p:any)=>(\r\n                          <li>{p.name} <br/><strong>Association:</strong> {p.association} ({p.personId})</li>\r\n                        ))}\r\n                        </ul>\r\n                      </Grid>\r\n                      <Grid item md={6}>\r\n                        <strong>linked Businesses:</strong>\r\n                        <ul>\r\n                        {match.person?.linkedBusinesses.map((b:any)=>(\r\n                          <li>{b.businessName} <br/><strong>Possition:</strong> {b.position}</li>\r\n                        ))}\r\n                        </ul>\r\n                      </Grid>\r\n                      <Grid item md={6}>\r\n                        <strong>Notes:</strong>\r\n                        <ul>\r\n                        {match.person?.notes.map((n:any)=>(\r\n                          <li>{n.text} <br/><strong>dataSource:</strong> {n?.dataSource?.name}</li>\r\n                        ))}\r\n                        </ul>\r\n                      </Grid>\r\n                    </Grid>\r\n                    \r\n              \r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              )) }\r\n              \r\n            </Paper>\r\n        </Dialog>              \r\n        </>\r\n    )\r\n}\r\n\r\nconst DisplaySingleFields = ({person})=>{\r\n  \r\n  return (\r\n    <>\r\n    <div className=\"grid-result-list cs-grid-list\">\r\n      <Grid container>\r\n        {Object.keys(person).map((pkey)=>(\r\n          <>\r\n          {(Array.isArray(person[pkey]) ===false && typeof(person[pkey]) != \"object\" && pkey !=\"imageURL\" ) &&   \r\n            <Grid item md={4}>\r\n            <div className=\"field\">\r\n              <span className=\"key\">{pkey}:</span>  \r\n              <div className=\"value\">{person[pkey]}</div>\r\n            </div>\r\n            </Grid>\r\n          }\r\n          </>\r\n        ))}\r\n      </Grid> \r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreditSafeResult;",{"ruleId":"1520","severity":1,"message":"1521","line":2,"column":20,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":30},{"ruleId":"1520","severity":1,"message":"1524","line":21,"column":9,"nodeType":"1522","messageId":"1523","endLine":21,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1526","line":9,"column":8,"nodeType":"1522","messageId":"1523","endLine":9,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1527","line":10,"column":8,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1528","line":11,"column":8,"nodeType":"1522","messageId":"1523","endLine":11,"endColumn":17},{"ruleId":"1529","replacedBy":"1530"},{"ruleId":"1531","replacedBy":"1532"},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":29,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1520","severity":1,"message":"1538","line":8,"column":23,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":36},{"ruleId":"1539","severity":1,"message":"1540","line":14,"column":20,"nodeType":"1541","endLine":14,"endColumn":24},{"ruleId":"1539","severity":1,"message":"1542","line":24,"column":7,"nodeType":"1543","endLine":24,"endColumn":9,"suggestions":"1544"},{"ruleId":"1520","severity":1,"message":"1545","line":6,"column":5,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1546","line":7,"column":5,"nodeType":"1522","messageId":"1523","endLine":7,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1547","line":10,"column":7,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1539","severity":1,"message":"1549","line":22,"column":8,"nodeType":"1543","endLine":22,"endColumn":14,"suggestions":"1550"},{"ruleId":"1551","severity":1,"message":"1552","line":25,"column":18,"nodeType":"1553","messageId":"1554","endLine":25,"endColumn":20},{"ruleId":"1539","severity":1,"message":"1555","line":29,"column":7,"nodeType":"1543","endLine":29,"endColumn":14,"suggestions":"1556"},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":73,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1558","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":90},{"ruleId":"1551","severity":1,"message":"1552","line":130,"column":78,"nodeType":"1553","messageId":"1554","endLine":130,"endColumn":80},{"ruleId":"1551","severity":1,"message":"1552","line":135,"column":60,"nodeType":"1553","messageId":"1554","endLine":135,"endColumn":62},{"ruleId":"1539","severity":1,"message":"1540","line":14,"column":20,"nodeType":"1541","endLine":14,"endColumn":24},{"ruleId":"1539","severity":1,"message":"1542","line":24,"column":7,"nodeType":"1543","endLine":24,"endColumn":9,"suggestions":"1559"},{"ruleId":"1520","severity":1,"message":"1560","line":3,"column":8,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":9},{"ruleId":"1551","severity":1,"message":"1552","line":45,"column":31,"nodeType":"1553","messageId":"1554","endLine":45,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":73,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1558","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":90},{"ruleId":"1520","severity":1,"message":"1561","line":6,"column":10,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":18},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1539","severity":1,"message":"1542","line":43,"column":7,"nodeType":"1543","endLine":43,"endColumn":16,"suggestions":"1574"},{"ruleId":"1539","severity":1,"message":"1575","line":10,"column":7,"nodeType":"1543","endLine":10,"endColumn":9,"suggestions":"1576"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1580","severity":1,"message":"1581","line":151,"column":41,"nodeType":"1553","messageId":"1582","endLine":151,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":79,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":93},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":94,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":98},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":100,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":104},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":106,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":114},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":116,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":128},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":130,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":135},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":157,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":167},{"ruleId":"1520","severity":1,"message":"1525","line":2,"column":15,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1583","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":38},{"ruleId":"1520","severity":1,"message":"1584","line":2,"column":39,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1580","severity":1,"message":"1581","line":88,"column":41,"nodeType":"1553","messageId":"1582","endLine":88,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":67,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":77},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":100,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":104},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":106,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":114},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":116,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":128},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":157,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":167},{"ruleId":"1520","severity":1,"message":"1583","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":38},{"ruleId":"1520","severity":1,"message":"1584","line":2,"column":39,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1585","line":3,"column":8,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":17},{"ruleId":"1520","severity":1,"message":"1573","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":6,"column":8,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1586","line":8,"column":8,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":47,"column":7,"nodeType":"1543","endLine":47,"endColumn":16,"suggestions":"1587"},{"ruleId":"1551","severity":1,"message":"1552","line":54,"column":32,"nodeType":"1553","messageId":"1554","endLine":54,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1588","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":63},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":90,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":100},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":114,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":128},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":130,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":136,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":140},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":142,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":150},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":152,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":164},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":176,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":181},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":202,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":209},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":211,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":221},{"ruleId":"1520","severity":1,"message":"1589","line":4,"column":17,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1575","line":23,"column":7,"nodeType":"1543","endLine":23,"endColumn":9,"suggestions":"1590"},{"ruleId":"1551","severity":1,"message":"1552","line":46,"column":48,"nodeType":"1553","messageId":"1554","endLine":46,"endColumn":50},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1588","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":63},{"ruleId":"1520","severity":1,"message":"1591","line":1,"column":65,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":76},{"ruleId":"1520","severity":1,"message":"1592","line":1,"column":102,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":112},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":114,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":128},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":130,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":136,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":140},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":142,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":150},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":152,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":164},{"ruleId":"1520","severity":1,"message":"1593","line":1,"column":166,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":174},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":176,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":181},{"ruleId":"1520","severity":1,"message":"1594","line":1,"column":183,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":200},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":211,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":221},{"ruleId":"1520","severity":1,"message":"1525","line":2,"column":15,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1595","line":4,"column":23,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":32},{"ruleId":"1551","severity":1,"message":"1596","line":78,"column":85,"nodeType":"1553","messageId":"1554","endLine":78,"endColumn":87},{"ruleId":"1580","severity":1,"message":"1581","line":105,"column":41,"nodeType":"1553","messageId":"1582","endLine":105,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1588","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":63},{"ruleId":"1520","severity":1,"message":"1591","line":1,"column":65,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":76},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":78,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":82},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":90,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":100},{"ruleId":"1520","severity":1,"message":"1592","line":1,"column":102,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":112},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":136,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":140},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":142,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":150},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":152,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":164},{"ruleId":"1520","severity":1,"message":"1593","line":1,"column":166,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":174},{"ruleId":"1520","severity":1,"message":"1594","line":1,"column":183,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":200},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":211,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":221},{"ruleId":"1520","severity":1,"message":"1585","line":3,"column":8,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":17},{"ruleId":"1520","severity":1,"message":"1597","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1573","line":6,"column":8,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1598","line":8,"column":9,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":23},{"ruleId":"1539","severity":1,"message":"1542","line":46,"column":7,"nodeType":"1543","endLine":46,"endColumn":16,"suggestions":"1599"},{"ruleId":"1551","severity":1,"message":"1552","line":54,"column":37,"nodeType":"1553","messageId":"1554","endLine":54,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1591","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":68,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":72},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":80,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":90},{"ruleId":"1520","severity":1,"message":"1592","line":1,"column":92,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":126,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":130},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":132,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":140},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":142,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":154},{"ruleId":"1520","severity":1,"message":"1593","line":1,"column":156,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":164},{"ruleId":"1520","severity":1,"message":"1594","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":179},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":181,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":190},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":192,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":199},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":201,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":211},{"ruleId":"1520","severity":1,"message":"1585","line":3,"column":8,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":17},{"ruleId":"1520","severity":1,"message":"1597","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1573","line":6,"column":8,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1600","line":9,"column":9,"nodeType":"1522","messageId":"1523","endLine":9,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1586","line":10,"column":8,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":47,"column":7,"nodeType":"1543","endLine":47,"endColumn":16,"suggestions":"1601"},{"ruleId":"1551","severity":1,"message":"1552","line":50,"column":28,"nodeType":"1553","messageId":"1554","endLine":50,"endColumn":30},{"ruleId":"1551","severity":1,"message":"1552","line":55,"column":34,"nodeType":"1553","messageId":"1554","endLine":55,"endColumn":36},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1591","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1592","line":1,"column":92,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":118},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":120,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":124},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":126,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":130},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":132,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":140},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":142,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":154},{"ruleId":"1520","severity":1,"message":"1593","line":1,"column":156,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":164},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":166,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1594","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":179},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":181,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":190},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":192,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":199},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":201,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":211},{"ruleId":"1520","severity":1,"message":"1525","line":2,"column":15,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1597","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1602","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":14},{"ruleId":"1520","severity":1,"message":"1589","line":8,"column":17,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1595","line":8,"column":23,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":32},{"ruleId":"1520","severity":1,"message":"1600","line":9,"column":9,"nodeType":"1522","messageId":"1523","endLine":9,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1586","line":10,"column":8,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":80,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":90},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":118},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":120,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":124},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":126,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":130},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":132,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":140},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":142,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":154},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":166,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":192,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":199},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":201,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":211},{"ruleId":"1520","severity":1,"message":"1585","line":3,"column":8,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":17},{"ruleId":"1520","severity":1,"message":"1602","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":14},{"ruleId":"1520","severity":1,"message":"1573","line":6,"column":8,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1589","line":8,"column":17,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1596","line":22,"column":16,"nodeType":"1553","messageId":"1554","endLine":22,"endColumn":18},{"ruleId":"1539","severity":1,"message":"1575","line":28,"column":7,"nodeType":"1543","endLine":28,"endColumn":9,"suggestions":"1603"},{"ruleId":"1551","severity":1,"message":"1552","line":60,"column":48,"nodeType":"1553","messageId":"1554","endLine":60,"endColumn":50},{"ruleId":"1529","replacedBy":"1604"},{"ruleId":"1531","replacedBy":"1605"},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1545","line":6,"column":5,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1521","line":2,"column":20,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":30},{"ruleId":"1520","severity":1,"message":"1606","line":13,"column":10,"nodeType":"1522","messageId":"1523","endLine":13,"endColumn":15},{"ruleId":"1520","severity":1,"message":"1607","line":13,"column":17,"nodeType":"1522","messageId":"1523","endLine":13,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1545","line":13,"column":35,"nodeType":"1522","messageId":"1523","endLine":13,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1608","line":14,"column":8,"nodeType":"1522","messageId":"1523","endLine":14,"endColumn":20},{"ruleId":"1520","severity":1,"message":"1609","line":15,"column":8,"nodeType":"1522","messageId":"1523","endLine":15,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1610","line":19,"column":21,"nodeType":"1522","messageId":"1523","endLine":19,"endColumn":28},{"ruleId":"1520","severity":1,"message":"1611","line":19,"column":30,"nodeType":"1522","messageId":"1523","endLine":19,"endColumn":42},{"ruleId":"1520","severity":1,"message":"1524","line":25,"column":9,"nodeType":"1522","messageId":"1523","endLine":25,"endColumn":16},{"ruleId":"1551","severity":1,"message":"1552","line":29,"column":75,"nodeType":"1553","messageId":"1554","endLine":29,"endColumn":77},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":35,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":32,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1612","line":16,"column":11,"nodeType":"1522","messageId":"1523","endLine":16,"endColumn":15},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":35,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1539","severity":1,"message":"1613","line":37,"column":8,"nodeType":"1543","endLine":37,"endColumn":10,"suggestions":"1614"},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":35,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1539","severity":1,"message":"1613","line":48,"column":8,"nodeType":"1543","endLine":48,"endColumn":10,"suggestions":"1615"},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1616","line":5,"column":10,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":13},{"ruleId":"1539","severity":1,"message":"1575","line":14,"column":5,"nodeType":"1543","endLine":14,"endColumn":7,"suggestions":"1617"},{"ruleId":"1580","severity":1,"message":"1581","line":132,"column":39,"nodeType":"1553","messageId":"1582","endLine":132,"endColumn":43},{"ruleId":"1529","replacedBy":"1618"},{"ruleId":"1531","replacedBy":"1619"},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1539","severity":1,"message":"1575","line":12,"column":5,"nodeType":"1543","endLine":12,"endColumn":7,"suggestions":"1620"},{"ruleId":"1580","severity":1,"message":"1581","line":187,"column":39,"nodeType":"1553","messageId":"1582","endLine":187,"endColumn":43},{"ruleId":"1520","severity":1,"message":"1537","line":1,"column":38,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1621","line":1,"column":47,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":50},{"ruleId":"1520","severity":1,"message":"1622","line":3,"column":10,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1623","line":39,"column":11,"nodeType":"1522","messageId":"1523","endLine":39,"endColumn":26},{"ruleId":"1551","severity":1,"message":"1552","line":52,"column":41,"nodeType":"1553","messageId":"1554","endLine":52,"endColumn":43},{"ruleId":"1529","replacedBy":"1624"},{"ruleId":"1531","replacedBy":"1625"},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1537","line":1,"column":34,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1539","severity":1,"message":"1626","line":32,"column":7,"nodeType":"1543","endLine":32,"endColumn":20,"suggestions":"1627"},{"ruleId":"1551","severity":1,"message":"1552","line":60,"column":46,"nodeType":"1553","messageId":"1554","endLine":60,"endColumn":48},{"ruleId":"1551","severity":1,"message":"1552","line":75,"column":46,"nodeType":"1553","messageId":"1554","endLine":75,"endColumn":48},{"ruleId":"1551","severity":1,"message":"1552","line":90,"column":50,"nodeType":"1553","messageId":"1554","endLine":90,"endColumn":52},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1628","line":8,"column":12,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":18},{"ruleId":"1539","severity":1,"message":"1575","line":12,"column":7,"nodeType":"1543","endLine":12,"endColumn":9,"suggestions":"1629"},{"ruleId":"1520","severity":1,"message":"1630","line":17,"column":11,"nodeType":"1522","messageId":"1523","endLine":17,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1631","line":20,"column":11,"nodeType":"1522","messageId":"1523","endLine":20,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1632","line":168,"column":11,"nodeType":"1522","messageId":"1523","endLine":168,"endColumn":15},{"ruleId":"1520","severity":1,"message":"1633","line":172,"column":13,"nodeType":"1522","messageId":"1523","endLine":172,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":35,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1520","severity":1,"message":"1634","line":17,"column":10,"nodeType":"1522","messageId":"1523","endLine":17,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1607","line":6,"column":10,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":14},{"ruleId":"1539","severity":1,"message":"1635","line":43,"column":7,"nodeType":"1543","endLine":43,"endColumn":16,"suggestions":"1636"},{"ruleId":"1637","severity":1,"message":"1638","line":56,"column":17,"nodeType":"1639","endLine":56,"endColumn":34},{"ruleId":"1529","replacedBy":"1604"},{"ruleId":"1531","replacedBy":"1605"},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":29,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":35,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1640","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":15},{"ruleId":"1520","severity":1,"message":"1641","line":2,"column":17,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1537","line":3,"column":24,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":31},{"ruleId":"1539","severity":1,"message":"1642","line":28,"column":8,"nodeType":"1543","endLine":28,"endColumn":10,"suggestions":"1643"},{"ruleId":"1551","severity":1,"message":"1552","line":49,"column":30,"nodeType":"1553","messageId":"1554","endLine":49,"endColumn":32},{"ruleId":"1520","severity":1,"message":"1534","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":27},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":35,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":57,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":66},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":31},{"ruleId":"1520","severity":1,"message":"1640","line":8,"column":10,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":15},{"ruleId":"1520","severity":1,"message":"1641","line":8,"column":17,"nodeType":"1522","messageId":"1523","endLine":8,"endColumn":27},{"ruleId":"1539","severity":1,"message":"1644","line":51,"column":8,"nodeType":"1543","endLine":51,"endColumn":10,"suggestions":"1645"},{"ruleId":"1520","severity":1,"message":"1646","line":1,"column":34,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":38},{"ruleId":"1551","severity":1,"message":"1596","line":15,"column":20,"nodeType":"1553","messageId":"1554","endLine":15,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":70,"column":7,"nodeType":"1543","endLine":70,"endColumn":16,"suggestions":"1647"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1648","line":11,"column":11,"nodeType":"1522","messageId":"1523","endLine":11,"endColumn":31},{"ruleId":"1580","severity":1,"message":"1581","line":113,"column":41,"nodeType":"1553","messageId":"1582","endLine":113,"endColumn":45},{"ruleId":"1539","severity":1,"message":"1575","line":9,"column":7,"nodeType":"1543","endLine":9,"endColumn":9,"suggestions":"1649"},{"ruleId":"1539","severity":1,"message":"1650","line":71,"column":8,"nodeType":"1543","endLine":71,"endColumn":10,"suggestions":"1651"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":70,"column":7,"nodeType":"1543","endLine":70,"endColumn":16,"suggestions":"1652"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1648","line":11,"column":11,"nodeType":"1522","messageId":"1523","endLine":11,"endColumn":31},{"ruleId":"1580","severity":1,"message":"1581","line":99,"column":41,"nodeType":"1553","messageId":"1582","endLine":99,"endColumn":45},{"ruleId":"1539","severity":1,"message":"1575","line":10,"column":7,"nodeType":"1543","endLine":10,"endColumn":9,"suggestions":"1653"},{"ruleId":"1551","severity":1,"message":"1552","line":60,"column":17,"nodeType":"1553","messageId":"1554","endLine":60,"endColumn":19},{"ruleId":"1551","severity":1,"message":"1552","line":79,"column":17,"nodeType":"1553","messageId":"1554","endLine":79,"endColumn":19},{"ruleId":"1539","severity":1,"message":"1654","line":97,"column":8,"nodeType":"1543","endLine":97,"endColumn":10,"suggestions":"1655"},{"ruleId":"1551","severity":1,"message":"1552","line":101,"column":42,"nodeType":"1553","messageId":"1554","endLine":101,"endColumn":44},{"ruleId":"1551","severity":1,"message":"1552","line":104,"column":22,"nodeType":"1553","messageId":"1554","endLine":104,"endColumn":24},{"ruleId":"1551","severity":1,"message":"1552","line":149,"column":39,"nodeType":"1553","messageId":"1554","endLine":149,"endColumn":41},{"ruleId":"1551","severity":1,"message":"1552","line":162,"column":40,"nodeType":"1553","messageId":"1554","endLine":162,"endColumn":42},{"ruleId":"1551","severity":1,"message":"1552","line":162,"column":78,"nodeType":"1553","messageId":"1554","endLine":162,"endColumn":80},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":118,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":128},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":145,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":149},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":151,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":155},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":157,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":165},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":167,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":179},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":181,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":186},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":199,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":206},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":208,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":218},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1589","line":5,"column":17,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":89,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":98},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1602","line":7,"column":8,"nodeType":"1522","messageId":"1523","endLine":7,"endColumn":14},{"ruleId":"1520","severity":1,"message":"1538","line":19,"column":23,"nodeType":"1522","messageId":"1523","endLine":19,"endColumn":36},{"ruleId":"1520","severity":1,"message":"1656","line":21,"column":12,"nodeType":"1522","messageId":"1523","endLine":21,"endColumn":14},{"ruleId":"1520","severity":1,"message":"1657","line":30,"column":12,"nodeType":"1522","messageId":"1523","endLine":30,"endColumn":19},{"ruleId":"1520","severity":1,"message":"1658","line":30,"column":20,"nodeType":"1522","messageId":"1523","endLine":30,"endColumn":30},{"ruleId":"1551","severity":1,"message":"1552","line":41,"column":49,"nodeType":"1553","messageId":"1554","endLine":41,"endColumn":51},{"ruleId":"1539","severity":1,"message":"1659","line":50,"column":8,"nodeType":"1543","endLine":50,"endColumn":15,"suggestions":"1660"},{"ruleId":"1551","severity":1,"message":"1552","line":55,"column":32,"nodeType":"1553","messageId":"1554","endLine":55,"endColumn":34},{"ruleId":"1551","severity":1,"message":"1552","line":92,"column":50,"nodeType":"1553","messageId":"1554","endLine":92,"endColumn":52},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":70,"column":7,"nodeType":"1543","endLine":70,"endColumn":16,"suggestions":"1661"},{"ruleId":"1539","severity":1,"message":"1575","line":10,"column":7,"nodeType":"1543","endLine":10,"endColumn":9,"suggestions":"1662"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1648","line":11,"column":11,"nodeType":"1522","messageId":"1523","endLine":11,"endColumn":31},{"ruleId":"1580","severity":1,"message":"1581","line":83,"column":41,"nodeType":"1553","messageId":"1582","endLine":83,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1588","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1663","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":44},{"ruleId":"1520","severity":1,"message":"1664","line":1,"column":46,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":55},{"ruleId":"1520","severity":1,"message":"1665","line":6,"column":8,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":20},{"ruleId":"1551","severity":1,"message":"1552","line":53,"column":17,"nodeType":"1553","messageId":"1554","endLine":53,"endColumn":19},{"ruleId":"1551","severity":1,"message":"1552","line":72,"column":17,"nodeType":"1553","messageId":"1554","endLine":72,"endColumn":19},{"ruleId":"1539","severity":1,"message":"1654","line":75,"column":8,"nodeType":"1543","endLine":75,"endColumn":10,"suggestions":"1666"},{"ruleId":"1551","severity":1,"message":"1552","line":79,"column":41,"nodeType":"1553","messageId":"1554","endLine":79,"endColumn":43},{"ruleId":"1551","severity":1,"message":"1552","line":82,"column":22,"nodeType":"1553","messageId":"1554","endLine":82,"endColumn":24},{"ruleId":"1520","severity":1,"message":"1588","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1663","line":1,"column":41,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":57},{"ruleId":"1520","severity":1,"message":"1664","line":1,"column":59,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1667","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":84},{"ruleId":"1551","severity":1,"message":"1552","line":69,"column":17,"nodeType":"1553","messageId":"1554","endLine":69,"endColumn":19},{"ruleId":"1551","severity":1,"message":"1552","line":111,"column":17,"nodeType":"1553","messageId":"1554","endLine":111,"endColumn":19},{"ruleId":"1539","severity":1,"message":"1654","line":115,"column":8,"nodeType":"1543","endLine":115,"endColumn":10,"suggestions":"1668"},{"ruleId":"1551","severity":1,"message":"1552","line":119,"column":36,"nodeType":"1553","messageId":"1554","endLine":119,"endColumn":38},{"ruleId":"1551","severity":1,"message":"1552","line":121,"column":22,"nodeType":"1553","messageId":"1554","endLine":121,"endColumn":24},{"ruleId":"1551","severity":1,"message":"1552","line":213,"column":46,"nodeType":"1553","messageId":"1554","endLine":213,"endColumn":48},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":70,"column":7,"nodeType":"1543","endLine":70,"endColumn":16,"suggestions":"1669"},{"ruleId":"1539","severity":1,"message":"1575","line":28,"column":7,"nodeType":"1543","endLine":28,"endColumn":9,"suggestions":"1670"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1671","line":10,"column":12,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1672","line":10,"column":22,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":34},{"ruleId":"1551","severity":1,"message":"1552","line":51,"column":34,"nodeType":"1553","messageId":"1554","endLine":51,"endColumn":36},{"ruleId":"1580","severity":1,"message":"1581","line":111,"column":41,"nodeType":"1553","messageId":"1582","endLine":111,"endColumn":45},{"ruleId":"1551","severity":1,"message":"1552","line":145,"column":35,"nodeType":"1553","messageId":"1554","endLine":145,"endColumn":37},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1589","line":5,"column":17,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":55,"column":7,"nodeType":"1543","endLine":55,"endColumn":16,"suggestions":"1673"},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1575","line":27,"column":7,"nodeType":"1543","endLine":27,"endColumn":9,"suggestions":"1674"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1589","line":5,"column":17,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1552","line":44,"column":34,"nodeType":"1553","messageId":"1554","endLine":44,"endColumn":36},{"ruleId":"1580","severity":1,"message":"1581","line":82,"column":41,"nodeType":"1553","messageId":"1582","endLine":82,"endColumn":45},{"ruleId":"1551","severity":1,"message":"1552","line":122,"column":35,"nodeType":"1553","messageId":"1554","endLine":122,"endColumn":37},{"ruleId":"1520","severity":1,"message":"1675","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1552","line":27,"column":41,"nodeType":"1553","messageId":"1554","endLine":27,"endColumn":43},{"ruleId":"1551","severity":1,"message":"1552","line":67,"column":40,"nodeType":"1553","messageId":"1554","endLine":67,"endColumn":42},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1548","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1535","line":2,"column":37,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1579","line":2,"column":67,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":72},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1676","line":4,"column":9,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1548","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1535","line":2,"column":37,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1579","line":2,"column":67,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":72},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1676","line":4,"column":9,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1677","line":1,"column":39,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":50},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1579","line":2,"column":67,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":72},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1589","line":4,"column":17,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1676","line":6,"column":9,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":21},{"ruleId":"1551","severity":1,"message":"1596","line":85,"column":26,"nodeType":"1553","messageId":"1554","endLine":85,"endColumn":28},{"ruleId":"1551","severity":1,"message":"1552","line":93,"column":18,"nodeType":"1553","messageId":"1554","endLine":93,"endColumn":20},{"ruleId":"1551","severity":1,"message":"1552","line":94,"column":25,"nodeType":"1553","messageId":"1554","endLine":94,"endColumn":27},{"ruleId":"1551","severity":1,"message":"1552","line":96,"column":32,"nodeType":"1553","messageId":"1554","endLine":96,"endColumn":34},{"ruleId":"1551","severity":1,"message":"1552","line":97,"column":20,"nodeType":"1553","messageId":"1554","endLine":97,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1596","line":139,"column":85,"nodeType":"1553","messageId":"1554","endLine":139,"endColumn":87},{"ruleId":"1551","severity":1,"message":"1596","line":142,"column":62,"nodeType":"1553","messageId":"1554","endLine":142,"endColumn":64},{"ruleId":"1551","severity":1,"message":"1596","line":145,"column":52,"nodeType":"1553","messageId":"1554","endLine":145,"endColumn":54},{"ruleId":"1551","severity":1,"message":"1596","line":148,"column":54,"nodeType":"1553","messageId":"1554","endLine":148,"endColumn":56},{"ruleId":"1539","severity":1,"message":"1678","line":152,"column":7,"nodeType":"1543","endLine":152,"endColumn":9,"suggestions":"1679"},{"ruleId":"1551","severity":1,"message":"1552","line":223,"column":27,"nodeType":"1553","messageId":"1554","endLine":223,"endColumn":29},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1548","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1535","line":2,"column":37,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1595","line":6,"column":23,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":32},{"ruleId":"1520","severity":1,"message":"1680","line":6,"column":33,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":43},{"ruleId":"1520","severity":1,"message":"1676","line":7,"column":9,"nodeType":"1522","messageId":"1523","endLine":7,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1588","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1591","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":39},{"ruleId":"1520","severity":1,"message":"1663","line":1,"column":41,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":57},{"ruleId":"1520","severity":1,"message":"1664","line":1,"column":59,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1667","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":84},{"ruleId":"1520","severity":1,"message":"1592","line":1,"column":92,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1593","line":1,"column":120,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":128},{"ruleId":"1520","severity":1,"message":"1594","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":143},{"ruleId":"1520","severity":1,"message":"1681","line":7,"column":3,"nodeType":"1522","messageId":"1523","endLine":7,"endColumn":21},{"ruleId":"1551","severity":1,"message":"1552","line":72,"column":17,"nodeType":"1553","messageId":"1554","endLine":72,"endColumn":19},{"ruleId":"1551","severity":1,"message":"1552","line":91,"column":17,"nodeType":"1553","messageId":"1554","endLine":91,"endColumn":19},{"ruleId":"1539","severity":1,"message":"1654","line":93,"column":8,"nodeType":"1543","endLine":93,"endColumn":10,"suggestions":"1682"},{"ruleId":"1539","severity":1,"message":"1683","line":119,"column":8,"nodeType":"1543","endLine":119,"endColumn":16,"suggestions":"1684"},{"ruleId":"1539","severity":1,"message":"1685","line":127,"column":8,"nodeType":"1543","endLine":127,"endColumn":19,"suggestions":"1686"},{"ruleId":"1551","severity":1,"message":"1552","line":131,"column":36,"nodeType":"1553","messageId":"1554","endLine":131,"endColumn":38},{"ruleId":"1551","severity":1,"message":"1552","line":142,"column":41,"nodeType":"1553","messageId":"1554","endLine":142,"endColumn":43},{"ruleId":"1551","severity":1,"message":"1596","line":155,"column":43,"nodeType":"1553","messageId":"1554","endLine":155,"endColumn":45},{"ruleId":"1551","severity":1,"message":"1552","line":175,"column":66,"nodeType":"1553","messageId":"1554","endLine":175,"endColumn":68},{"ruleId":"1551","severity":1,"message":"1552","line":197,"column":58,"nodeType":"1553","messageId":"1554","endLine":197,"endColumn":60},{"ruleId":"1551","severity":1,"message":"1596","line":279,"column":43,"nodeType":"1553","messageId":"1554","endLine":279,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1560","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":9},{"ruleId":"1520","severity":1,"message":"1589","line":6,"column":17,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":70,"column":7,"nodeType":"1543","endLine":70,"endColumn":16,"suggestions":"1687"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1671","line":10,"column":12,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":21},{"ruleId":"1520","severity":1,"message":"1672","line":10,"column":22,"nodeType":"1522","messageId":"1523","endLine":10,"endColumn":34},{"ruleId":"1580","severity":1,"message":"1581","line":98,"column":41,"nodeType":"1553","messageId":"1582","endLine":98,"endColumn":45},{"ruleId":"1551","severity":1,"message":"1552","line":124,"column":35,"nodeType":"1553","messageId":"1554","endLine":124,"endColumn":37},{"ruleId":"1539","severity":1,"message":"1575","line":28,"column":7,"nodeType":"1543","endLine":28,"endColumn":9,"suggestions":"1688"},{"ruleId":"1539","severity":1,"message":"1540","line":14,"column":20,"nodeType":"1541","endLine":14,"endColumn":24},{"ruleId":"1539","severity":1,"message":"1542","line":24,"column":7,"nodeType":"1543","endLine":24,"endColumn":9,"suggestions":"1689"},{"ruleId":"1539","severity":1,"message":"1540","line":14,"column":20,"nodeType":"1541","endLine":14,"endColumn":24},{"ruleId":"1539","severity":1,"message":"1542","line":24,"column":7,"nodeType":"1543","endLine":24,"endColumn":9,"suggestions":"1690"},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1552","line":25,"column":41,"nodeType":"1553","messageId":"1554","endLine":25,"endColumn":43},{"ruleId":"1551","severity":1,"message":"1552","line":64,"column":40,"nodeType":"1553","messageId":"1554","endLine":64,"endColumn":42},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1579","line":2,"column":67,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":72},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1691","line":4,"column":38,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":53},{"ruleId":"1539","severity":1,"message":"1692","line":32,"column":7,"nodeType":"1543","endLine":32,"endColumn":9,"suggestions":"1693"},{"ruleId":"1637","severity":1,"message":"1638","line":84,"column":28,"nodeType":"1639","endLine":84,"endColumn":75},{"ruleId":"1637","severity":1,"message":"1638","line":85,"column":28,"nodeType":"1639","endLine":85,"endColumn":75},{"ruleId":"1637","severity":1,"message":"1638","line":86,"column":28,"nodeType":"1639","endLine":86,"endColumn":75},{"ruleId":"1551","severity":1,"message":"1552","line":17,"column":32,"nodeType":"1553","messageId":"1554","endLine":17,"endColumn":34},{"ruleId":"1539","severity":1,"message":"1694","line":24,"column":7,"nodeType":"1543","endLine":24,"endColumn":9,"suggestions":"1695"},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1607","line":1,"column":104,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":108},{"ruleId":"1520","severity":1,"message":"1557","line":1,"column":110,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":120},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1571","line":1,"column":191,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":198},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1522","messageId":"1523","endLine":4,"endColumn":12},{"ruleId":"1520","severity":1,"message":"1589","line":5,"column":17,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":22},{"ruleId":"1539","severity":1,"message":"1542","line":57,"column":7,"nodeType":"1543","endLine":57,"endColumn":16,"suggestions":"1696"},{"ruleId":"1551","severity":1,"message":"1552","line":67,"column":36,"nodeType":"1553","messageId":"1554","endLine":67,"endColumn":38},{"ruleId":"1551","severity":1,"message":"1552","line":68,"column":37,"nodeType":"1553","messageId":"1554","endLine":68,"endColumn":39},{"ruleId":"1551","severity":1,"message":"1552","line":71,"column":42,"nodeType":"1553","messageId":"1554","endLine":71,"endColumn":44},{"ruleId":"1551","severity":1,"message":"1552","line":73,"column":42,"nodeType":"1553","messageId":"1554","endLine":73,"endColumn":44},{"ruleId":"1551","severity":1,"message":"1552","line":75,"column":42,"nodeType":"1553","messageId":"1554","endLine":75,"endColumn":44},{"ruleId":"1520","severity":1,"message":"1562","line":1,"column":10,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":13},{"ruleId":"1520","severity":1,"message":"1577","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":26},{"ruleId":"1520","severity":1,"message":"1548","line":1,"column":28,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":34},{"ruleId":"1520","severity":1,"message":"1563","line":1,"column":36,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":40},{"ruleId":"1520","severity":1,"message":"1564","line":1,"column":42,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":53},{"ruleId":"1520","severity":1,"message":"1565","line":1,"column":55,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":68},{"ruleId":"1520","severity":1,"message":"1566","line":1,"column":70,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1567","line":1,"column":85,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":96},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":98,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":102},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":122,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":136},{"ruleId":"1520","severity":1,"message":"1545","line":1,"column":137,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1568","line":1,"column":143,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1569","line":1,"column":149,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":157},{"ruleId":"1520","severity":1,"message":"1570","line":1,"column":159,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":171},{"ruleId":"1520","severity":1,"message":"1579","line":1,"column":173,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":178},{"ruleId":"1520","severity":1,"message":"1536","line":1,"column":180,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":189},{"ruleId":"1520","severity":1,"message":"1572","line":1,"column":200,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":210},{"ruleId":"1520","severity":1,"message":"1525","line":2,"column":15,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1537","line":2,"column":34,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1589","line":5,"column":17,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1552","line":12,"column":23,"nodeType":"1553","messageId":"1554","endLine":12,"endColumn":25},{"ruleId":"1551","severity":1,"message":"1552","line":14,"column":34,"nodeType":"1553","messageId":"1554","endLine":14,"endColumn":36},{"ruleId":"1551","severity":1,"message":"1552","line":17,"column":29,"nodeType":"1553","messageId":"1554","endLine":17,"endColumn":31},{"ruleId":"1551","severity":1,"message":"1552","line":19,"column":34,"nodeType":"1553","messageId":"1554","endLine":19,"endColumn":36},{"ruleId":"1551","severity":1,"message":"1552","line":22,"column":29,"nodeType":"1553","messageId":"1554","endLine":22,"endColumn":31},{"ruleId":"1551","severity":1,"message":"1552","line":24,"column":34,"nodeType":"1553","messageId":"1554","endLine":24,"endColumn":36},{"ruleId":"1551","severity":1,"message":"1552","line":27,"column":29,"nodeType":"1553","messageId":"1554","endLine":27,"endColumn":31},{"ruleId":"1551","severity":1,"message":"1596","line":80,"column":28,"nodeType":"1553","messageId":"1554","endLine":80,"endColumn":30},{"ruleId":"1580","severity":1,"message":"1581","line":107,"column":41,"nodeType":"1553","messageId":"1582","endLine":107,"endColumn":45},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1697","line":5,"column":9,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":21},{"ruleId":"1539","severity":1,"message":"1575","line":27,"column":7,"nodeType":"1543","endLine":27,"endColumn":9,"suggestions":"1698"},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1548","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1535","line":2,"column":37,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1552","line":26,"column":41,"nodeType":"1553","messageId":"1554","endLine":26,"endColumn":43},{"ruleId":"1551","severity":1,"message":"1552","line":65,"column":40,"nodeType":"1553","messageId":"1554","endLine":65,"endColumn":42},{"ruleId":"1520","severity":1,"message":"1691","line":5,"column":38,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":53},{"ruleId":"1699","severity":1,"message":"1700","line":100,"column":21,"nodeType":"1639","endLine":100,"endColumn":110},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1578","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":38},{"ruleId":"1520","severity":1,"message":"1525","line":2,"column":15,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":33},{"ruleId":"1520","severity":1,"message":"1602","line":5,"column":8,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":14},{"ruleId":"1520","severity":1,"message":"1535","line":1,"column":18,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1560","line":6,"column":8,"nodeType":"1522","messageId":"1523","endLine":6,"endColumn":9},{"ruleId":"1539","severity":1,"message":"1701","line":32,"column":7,"nodeType":"1543","endLine":32,"endColumn":9,"suggestions":"1702"},{"ruleId":"1520","severity":1,"message":"1548","line":2,"column":10,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":16},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1535","line":2,"column":37,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":41},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1539","severity":1,"message":"1701","line":66,"column":7,"nodeType":"1543","endLine":66,"endColumn":14,"suggestions":"1703"},{"ruleId":"1520","severity":1,"message":"1704","line":68,"column":11,"nodeType":"1522","messageId":"1523","endLine":68,"endColumn":19},{"ruleId":"1551","severity":1,"message":"1552","line":71,"column":27,"nodeType":"1553","messageId":"1554","endLine":71,"endColumn":29},{"ruleId":"1551","severity":1,"message":"1552","line":105,"column":57,"nodeType":"1553","messageId":"1554","endLine":105,"endColumn":59},{"ruleId":"1551","severity":1,"message":"1552","line":174,"column":80,"nodeType":"1553","messageId":"1554","endLine":174,"endColumn":82},{"ruleId":"1637","severity":1,"message":"1638","line":177,"column":37,"nodeType":"1639","endLine":177,"endColumn":147},{"ruleId":"1520","severity":1,"message":"1563","line":2,"column":18,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1564","line":2,"column":24,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":35},{"ruleId":"1520","severity":1,"message":"1607","line":2,"column":43,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":47},{"ruleId":"1520","severity":1,"message":"1557","line":2,"column":49,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":59},{"ruleId":"1520","severity":1,"message":"1568","line":2,"column":61,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":65},{"ruleId":"1520","severity":1,"message":"1536","line":2,"column":74,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":83},{"ruleId":"1520","severity":1,"message":"1571","line":2,"column":85,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":92},{"ruleId":"1520","severity":1,"message":"1594","line":2,"column":93,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":99},{"ruleId":"1520","severity":1,"message":"1593","line":2,"column":101,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":109},{"ruleId":"1520","severity":1,"message":"1591","line":2,"column":111,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":122},{"ruleId":"1520","severity":1,"message":"1592","line":2,"column":124,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":134},{"ruleId":"1520","severity":1,"message":"1606","line":2,"column":136,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":141},{"ruleId":"1520","severity":1,"message":"1545","line":2,"column":142,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":146},{"ruleId":"1520","severity":1,"message":"1589","line":3,"column":17,"nodeType":"1522","messageId":"1523","endLine":3,"endColumn":22},{"ruleId":"1551","severity":1,"message":"1552","line":26,"column":41,"nodeType":"1553","messageId":"1554","endLine":26,"endColumn":43},{"ruleId":"1551","severity":1,"message":"1552","line":65,"column":40,"nodeType":"1553","messageId":"1554","endLine":65,"endColumn":42},{"ruleId":"1520","severity":1,"message":"1677","line":1,"column":39,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":50},{"ruleId":"1520","severity":1,"message":"1705","line":1,"column":51,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":57},{"ruleId":"1520","severity":1,"message":"1567","line":2,"column":113,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":124},{"ruleId":"1520","severity":1,"message":"1706","line":2,"column":160,"nodeType":"1522","messageId":"1523","endLine":2,"endColumn":167},{"ruleId":"1520","severity":1,"message":"1589","line":5,"column":17,"nodeType":"1522","messageId":"1523","endLine":5,"endColumn":22},{"ruleId":"1520","severity":1,"message":"1525","line":1,"column":15,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":23},{"ruleId":"1520","severity":1,"message":"1533","line":1,"column":24,"nodeType":"1522","messageId":"1523","endLine":1,"endColumn":33},{"ruleId":"1707","severity":1,"message":"1708","line":89,"column":49,"nodeType":"1639","messageId":"1709","endLine":89,"endColumn":89,"fix":"1710"},{"ruleId":"1551","severity":1,"message":"1596","line":151,"column":94,"nodeType":"1553","messageId":"1554","endLine":151,"endColumn":96},"@typescript-eslint/no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'useState' is defined but never used.","'Login' is defined but never used.","'Machines' is defined but never used.","'Processes' is defined but never used.","no-native-reassign",["1711"],"no-negated-in-lhs",["1712"],"'useEffect' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'useMemo' is defined but never used.","'setProcessing' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'loading' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","Literal","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.","ArrayExpression",["1713"],"'Link' is defined but never used.","'Redirect' is defined but never used.","'Login' is assigned a value but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'interval'. Either include it or remove the dependency array.",["1714"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'interval', 'props', and 'show'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1715"],"'IconButton' is defined but never used.","'Input' is defined but never used.",["1716"],"'u' is defined but never used.","'MenuOpen' is defined but never used.","'Box' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Tooltip' is defined but never used.","'Typography' is defined but never used.","'util' is defined but never used.",["1717"],"React Hook useEffect has a missing dependency: 'handlerSearch'. Either include it or remove the dependency array.",["1718"],"'Breadcrumbs' is defined but never used.","'LinearProgress' is defined but never used.","'Paper' is defined but never used.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","'lazy' is defined but never used.","'Suspense' is defined but never used.","'DataTable' is defined but never used.","'TimerRefresher' is defined but never used.",["1719"],"'Checkbox' is defined but never used.","'RLink' is defined but never used.",["1720"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'useParams' is defined but never used.","Expected '!==' and instead saw '!='.","'HandlerDropdown' is defined but never used.","'PROCESS_STATUS' is defined but never used.",["1721"],"'QUEUE_STATUS' is defined but never used.",["1722"],"'client' is defined but never used.",["1723"],["1711"],["1712"],"'Badge' is defined but never used.","'Icon' is defined but never used.","'ComputerIcon' is defined but never used.","'SettingsInputComponentIcon' is defined but never used.","'ListAlt' is defined but never used.","'ShoppingCart' is defined but never used.","'Role' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'isLogin'. Either include them or remove the dependency array.",["1724"],["1725"],"'now' is defined but never used.",["1726"],["1711"],["1712"],["1727"],"'SFC' is defined but never used.","'AddBox' is defined but never used.","'validateNumeric' is assigned a value but never used.",["1711"],["1712"],"React Hook useEffect has a missing dependency: 'loadSubscriptions'. Either include it or remove the dependency array.",["1728"],"'Active' is assigned a value but never used.",["1729"],"'handleStatus' is assigned a value but never used.","'handlerClear' is assigned a value but never used.","'data' is assigned a value but never used.","'rowPerPage' is assigned a value but never used.","'isLatestBuildDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'verifyToken'. Either include it or remove the dependency array.",["1730"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Alert' is defined but never used.","'AlertTitle' is defined but never used.","React Hook useEffect has missing dependencies: 'activate', 'history', 'isLogin', and 'params.email'. Either include them or remove the dependency array.",["1731"],"React Hook useEffect has missing dependencies: 'isLogin' and 'validateUUID'. Either include them or remove the dependency array.",["1732"],"'memo' is defined but never used.",["1733"],"'handlerShowTagDialog' is assigned a value but never used.",["1734"],"React Hook useEffect has a missing dependency: 'getRecord'. Either include it or remove the dependency array.",["1735"],["1736"],["1737"],"React Hook useEffect has missing dependencies: 'getRecord' and 'mode'. Either include them or remove the dependency array.",["1738"],"'ID' is assigned a value but never used.","'OrderID' is assigned a value but never used.","'setOrderID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'APIQuantity'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPackageAmount' needs the current value of 'APIQuantity'.",["1739"],["1740"],["1741"],"'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'AlertMessage' is defined but never used.",["1742"],"'FormHelperText' is defined but never used.",["1743"],["1744"],["1745"],"'tagDialog' is assigned a value but never used.","'setTagDialog' is assigned a value but never used.",["1746"],["1747"],"'Filter' is defined but never used.","'VERIPHY_APIS' is defined but never used.","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'props.ServiceCode'. Either include it or remove the dependency array.",["1748"],"'useHistory' is defined but never used.","'KeyboardTimePicker' is defined but never used.",["1749"],"React Hook useMemo has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["1750"],"React Hook useMemo has a missing dependency: 'loadPackage'. Either include it or remove the dependency array.",["1751"],["1752"],["1753"],["1754"],["1755"],"'SelectValidator' is defined but never used.","React Hook useEffect has a missing dependency: 'addDocument'. Either include it or remove the dependency array.",["1756"],"React Hook useEffect has a missing dependency: 'validate'. Either include it or remove the dependency array.",["1757"],["1758"],"'PRICING_TYPE' is defined but never used.",["1759"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect has a missing dependency: 'getResult'. Either include it or remove the dependency array.",["1760"],["1761"],"'json' is assigned a value but never used.","'useRef' is defined but never used.","'Divider' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"1762","text":"1763"},"no-global-assign","no-unsafe-negation",{"desc":"1764","fix":"1765"},{"desc":"1766","fix":"1767"},{"desc":"1768","fix":"1769"},{"desc":"1764","fix":"1770"},{"desc":"1771","fix":"1772"},{"desc":"1773","fix":"1774"},{"desc":"1771","fix":"1775"},{"desc":"1773","fix":"1776"},{"desc":"1771","fix":"1777"},{"desc":"1771","fix":"1778"},{"desc":"1773","fix":"1779"},{"desc":"1780","fix":"1781"},{"desc":"1780","fix":"1782"},{"desc":"1773","fix":"1783"},{"desc":"1773","fix":"1784"},{"desc":"1785","fix":"1786"},{"desc":"1773","fix":"1787"},{"desc":"1788","fix":"1789"},{"desc":"1790","fix":"1791"},{"desc":"1792","fix":"1793"},{"desc":"1771","fix":"1794"},{"desc":"1773","fix":"1795"},{"desc":"1796","fix":"1797"},{"desc":"1771","fix":"1798"},{"desc":"1773","fix":"1799"},{"desc":"1800","fix":"1801"},{"desc":"1802","fix":"1803"},{"desc":"1771","fix":"1804"},{"desc":"1773","fix":"1805"},{"desc":"1800","fix":"1806"},{"desc":"1800","fix":"1807"},{"desc":"1771","fix":"1808"},{"desc":"1773","fix":"1809"},{"desc":"1771","fix":"1810"},{"desc":"1773","fix":"1811"},{"desc":"1812","fix":"1813"},{"desc":"1800","fix":"1814"},{"desc":"1815","fix":"1816"},{"desc":"1817","fix":"1818"},{"desc":"1771","fix":"1819"},{"desc":"1773","fix":"1820"},{"desc":"1764","fix":"1821"},{"desc":"1764","fix":"1822"},{"desc":"1823","fix":"1824"},{"desc":"1825","fix":"1826"},{"desc":"1771","fix":"1827"},{"desc":"1773","fix":"1828"},{"desc":"1829","fix":"1830"},{"desc":"1831","fix":"1832"},[5969,5969]," rel=\"noreferrer\"","Update the dependencies array to be: [search]",{"range":"1833","text":"1834"},"Update the dependencies array to be: [interval, show]",{"range":"1835","text":"1836"},"Update the dependencies array to be: [count, interval, props, show]",{"range":"1837","text":"1838"},{"range":"1839","text":"1834"},"Update the dependencies array to be: [filters, search]",{"range":"1840","text":"1841"},"Update the dependencies array to be: [handlerSearch]",{"range":"1842","text":"1843"},{"range":"1844","text":"1841"},{"range":"1845","text":"1843"},{"range":"1846","text":"1841"},{"range":"1847","text":"1841"},{"range":"1848","text":"1843"},"Update the dependencies array to be: [history, isLogin]",{"range":"1849","text":"1850"},{"range":"1851","text":"1850"},{"range":"1852","text":"1843"},{"range":"1853","text":"1843"},"Update the dependencies array to be: [ShowExpired, loadSubscriptions]",{"range":"1854","text":"1855"},{"range":"1856","text":"1843"},"Update the dependencies array to be: [isLogin, verifyToken]",{"range":"1857","text":"1858"},"Update the dependencies array to be: [activate, history, isLogin, params.email]",{"range":"1859","text":"1860"},"Update the dependencies array to be: [isLogin, validateUUID]",{"range":"1861","text":"1862"},{"range":"1863","text":"1841"},{"range":"1864","text":"1843"},"Update the dependencies array to be: [getRecord]",{"range":"1865","text":"1866"},{"range":"1867","text":"1841"},{"range":"1868","text":"1843"},"Update the dependencies array to be: [getRecord, mode]",{"range":"1869","text":"1870"},"Update the dependencies array to be: [APIQuantity, props]",{"range":"1871","text":"1872"},{"range":"1873","text":"1841"},{"range":"1874","text":"1843"},{"range":"1875","text":"1870"},{"range":"1876","text":"1870"},{"range":"1877","text":"1841"},{"range":"1878","text":"1843"},{"range":"1879","text":"1841"},{"range":"1880","text":"1843"},"Update the dependencies array to be: [props.ServiceCode]",{"range":"1881","text":"1882"},{"range":"1883","text":"1870"},"Update the dependencies array to be: [UserID, loadUser]",{"range":"1884","text":"1885"},"Update the dependencies array to be: [PackageID, loadPackage]",{"range":"1886","text":"1887"},{"range":"1888","text":"1841"},{"range":"1889","text":"1843"},{"range":"1890","text":"1834"},{"range":"1891","text":"1834"},"Update the dependencies array to be: [addDocument]",{"range":"1892","text":"1893"},"Update the dependencies array to be: [validate]",{"range":"1894","text":"1895"},{"range":"1896","text":"1841"},{"range":"1897","text":"1843"},"Update the dependencies array to be: [getResult]",{"range":"1898","text":"1899"},"Update the dependencies array to be: [getResult, props]",{"range":"1900","text":"1901"},[884,886],"[search]",[678,684],"[interval, show]",[845,852],"[count, interval, props, show]",[885,887],[1489,1498],"[filters, search]",[304,306],"[handlerSearch]",[1714,1723],[982,984],[1665,1674],[1665,1674],[1223,1225],[1226,1228],"[history, isLogin]",[1847,1849],[469,471],[507,509],[1275,1288],"[ShowExpired, loadSubscriptions]",[405,407],[1406,1415],"[isLogin, verifyToken]",[965,967],"[activate, history, isLogin, params.email]",[1904,1906],"[isLogin, validateUUID]",[2493,2502],[339,341],[2303,2305],"[getRecord]",[2516,2525],[388,390],[3190,3192],"[getRecord, mode]",[1826,1833],"[APIQuantity, props]",[2525,2534],[380,382],[2255,2257],[4098,4100],[2494,2503],[935,937],[1896,1905],[881,883],[6614,6616],"[props.ServiceCode]",[3108,3110],[3706,3714],"[UserID, loadUser]",[3858,3869],"[PackageID, loadPackage]",[2522,2531],[935,937],[883,885],[877,879],[1348,1350],"[addDocument]",[781,783],"[validate]",[2039,2048],[883,885],[1118,1120],"[getResult]",[2156,2163],"[getResult, props]"]